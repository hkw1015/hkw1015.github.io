const e=JSON.parse('{"key":"v-8c5a3974","path":"/java/framework/spring/annotation/spring-annotation-4.html","title":"自动装配","lang":"zh-CN","frontmatter":{"title":"自动装配","date":"2021-12-11T00:00:00.000Z","category":"常用框架","tag":["Spring 注解"],"description":"1. @Autowired、@Qualifier、@Primary 自动装配：Spring 利用依赖注入（DI），完成对 IOC 容器中各个组件的依赖关系组件的赋值 @Autowired：自动注入 默认优先按照类型去容器中找对应的组件：ioc.getBean(UserDao.class); 如果找到多个相同类型的组件，再将属性的名称作为组件的 id 去容器中查找：ioc.getBean(\\"userDao\\"); 自动装配默认一定要将属性赋值完成，没有找到就会报错，可以使用 @Autowired(required = false) 来防止找不到报错 @Qualifier：使用 @Qualifier 指定需要装配的组件的 id，而不是使用属性名 @Primary：让 Spring 进行自动装配的时候，默认使用首选的 Bean，也可以继续使用 @Qualifier 指定需要装配的 Bean 的名字","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/framework/spring/annotation/spring-annotation-4.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"自动装配"}],["meta",{"property":"og:description","content":"1. @Autowired、@Qualifier、@Primary 自动装配：Spring 利用依赖注入（DI），完成对 IOC 容器中各个组件的依赖关系组件的赋值 @Autowired：自动注入 默认优先按照类型去容器中找对应的组件：ioc.getBean(UserDao.class); 如果找到多个相同类型的组件，再将属性的名称作为组件的 id 去容器中查找：ioc.getBean(\\"userDao\\"); 自动装配默认一定要将属性赋值完成，没有找到就会报错，可以使用 @Autowired(required = false) 来防止找不到报错 @Qualifier：使用 @Qualifier 指定需要装配的组件的 id，而不是使用属性名 @Primary：让 Spring 进行自动装配的时候，默认使用首选的 Bean，也可以继续使用 @Qualifier 指定需要装配的 Bean 的名字"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Spring 注解"}],["meta",{"property":"article:published_time","content":"2021-12-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自动装配\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-12-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. @Autowired、@Qualifier、@Primary","slug":"_1-autowired、-qualifier、-primary","link":"#_1-autowired、-qualifier、-primary","children":[]},{"level":2,"title":"2. @Resource、@Inject","slug":"_2-resource、-inject","link":"#_2-resource、-inject","children":[]},{"level":2,"title":"3. xxxAware 接口","slug":"_3-xxxaware-接口","link":"#_3-xxxaware-接口","children":[]},{"level":2,"title":"4. @Profile","slug":"_4-profile","link":"#_4-profile","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":4.92,"words":1475},"filePathRelative":"java/framework/spring/annotation/spring-annotation-4.md","localizedDate":"2021年12月11日","excerpt":"<h2> 1. @Autowired、@Qualifier、@Primary</h2>\\n<p>自动装配：Spring 利用依赖注入（DI），完成对 IOC 容器中各个组件的依赖关系组件的赋值</p>\\n<ul>\\n<li>@Autowired：自动注入\\n<ul>\\n<li>默认优先按照类型去容器中找对应的组件：ioc.getBean(UserDao.class);</li>\\n<li>如果找到多个相同类型的组件，再将属性的名称作为组件的 id 去容器中查找：ioc.getBean(\\"userDao\\");</li>\\n<li>自动装配默认一定要将属性赋值完成，没有找到就会报错，可以使用  <code>@Autowired(required = false)</code> 来防止找不到报错</li>\\n</ul>\\n</li>\\n<li>@Qualifier：使用 @Qualifier 指定需要装配的组件的 id，而不是使用属性名</li>\\n<li>@Primary：让 Spring 进行自动装配的时候，默认使用首选的 Bean，也可以继续使用 @Qualifier 指定需要装配的 Bean 的名字</li>\\n</ul>","autoDesc":true}');export{e as data};
