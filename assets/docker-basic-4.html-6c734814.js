const e=JSON.parse('{"key":"v-411fcab0","path":"/deploy/docker/basic/docker-basic-4.html","title":"Docker 镜像","lang":"zh-CN","frontmatter":{"title":"Docker 镜像","date":"2022-11-25T00:00:00.000Z","category":"Docker","tag":["Docker 基础"],"description":"1. 是什么 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境（包括代码、运行时需要的库、环境变量和配置文件等），这个打包好的运行时环境就是 image 镜像文件 只有通过这个镜像文件才能生成 Docker 容器实例（类似 Java 中 new 出来一个对象） 当我们使用 pull 命令下载某个镜像的时候，我们可以看到 Docker 的镜像好像是在一层一层的下载： image-20220310131424402","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/deploy/docker/basic/docker-basic-4.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"Docker 镜像"}],["meta",{"property":"og:description","content":"1. 是什么 镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境（包括代码、运行时需要的库、环境变量和配置文件等），这个打包好的运行时环境就是 image 镜像文件 只有通过这个镜像文件才能生成 Docker 容器实例（类似 Java 中 new 出来一个对象） 当我们使用 pull 命令下载某个镜像的时候，我们可以看到 Docker 的镜像好像是在一层一层的下载： image-20220310131424402"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Docker 基础"}],["meta",{"property":"article:published_time","content":"2022-11-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 镜像\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. 是什么","slug":"_1-是什么","link":"#_1-是什么","children":[]},{"level":2,"title":"2. 重点理解","slug":"_2-重点理解","link":"#_2-重点理解","children":[]},{"level":2,"title":"3. Docker 镜像 commit 操作案例","slug":"_3-docker-镜像-commit-操作案例","link":"#_3-docker-镜像-commit-操作案例","children":[]},{"level":2,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":4.31,"words":1294},"filePathRelative":"deploy/docker/basic/docker-basic-4.md","localizedDate":"2022年11月25日","excerpt":"<h2> 1. 是什么</h2>\\n<p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境（包括代码、运行时需要的库、环境变量和配置文件等），这个打包好的运行时环境就是 image 镜像文件</p>\\n<p>只有通过这个镜像文件才能生成 Docker 容器实例（类似 Java 中 new 出来一个对象）</p>\\n<p>当我们使用 <code>pull</code> 命令下载某个镜像的时候，我们可以看到 Docker 的镜像好像是在一层一层的下载：</p>\\n<figure><img src=\\"http://img.hl1015.top/blog/image-20220310131424402.png\\" alt=\\"image-20220310131424402\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20220310131424402</figcaption></figure>","autoDesc":true}');export{e as data};
