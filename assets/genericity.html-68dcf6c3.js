const n=JSON.parse('{"key":"v-b231bd26","path":"/java/basic/genericity.html","title":"泛型","lang":"zh-CN","frontmatter":{"title":"泛型","category":"Java","tag":["Java 基础"],"description":"1. 泛型在集合中的使用 在集合中使用泛型的例子 @Test public void test1() { \\tList list = new ArrayList(); \\tlist.add(89); \\tlist.add(76); \\tlist.add(66); \\tlist.add(54); \\t// 问题一：类型不安全 \\tlist.add(\\"AA\\"); \\tfor(int i = 0;i &lt; list.size();i++) { \\t\\tObject obj = list.get(i); \\t\\t// 问题二：需要强转，一方面繁琐，另一方面可能报ClassCastException \\t\\tint score = (Integer) obj; \\t\\tSystem.out.println(score); \\t} } 例子1： @Test public void test2() { \\tList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); \\tlist.add(67); \\tlist.add(54); \\tlist.add(87); \\t// list.add(\\"MM\\"); \\tIterator&lt;Integer&gt; iterator = list.iterator(); \\twhile(iterator.hasNext()){ \\t\\tInteger score = iterator.next(); \\t\\tSystem.out.println(score); \\t} // 不允许。 // List&lt;int&gt; list = new ArrayList&lt;int&gt;(); } 例子2： @Test public void test3() { \\tHashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;(); // 类型推断：int[] arr = {1,2,3}; \\tmap.put(\\"Tom\\", 12); \\tmap.put(\\"Lilei\\", 23); \\tmap.put(\\"HanMeimei\\", 33); \\tmap.put(\\"Jim\\", 14); \\t// map.put(12, \\"Jerry\\"); \\tSet&lt;Map.Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet(); \\tIterator&lt;Map.Entry&lt;String,Integer&gt;&gt; iterator =entrySet.iterator(); \\twhile(iterator.hasNext()){ \\t\\tEntry&lt;String, Integer&gt; entry = iterator.next(); \\t\\tSystem.out.println(entry.getKey() + \\"--&gt;\\" + entry.getValue()); \\t} } 总结 （1）泛型参数只能使用引用数据类型，不能使用基本数据类型； （2）集合中，如果没有使用泛型，则默认使用 Object 类型； ​ &nbsp;如果集合中使用泛型，则集合的相关属性、方法中，凡是使用到类或接口泛型参数的地方，都要调整为具体的泛型类型。 （3）什么时候使用泛型呢？ ​ &nbsp;首先，类或接口应该声明为泛型类、泛型接口； ​ &nbsp;其次，在实例化类时，就可以指明泛型参数的类型。","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/basic/genericity.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"1. 泛型在集合中的使用 在集合中使用泛型的例子 @Test public void test1() { \\tList list = new ArrayList(); \\tlist.add(89); \\tlist.add(76); \\tlist.add(66); \\tlist.add(54); \\t// 问题一：类型不安全 \\tlist.add(\\"AA\\"); \\tfor(int i = 0;i &lt; list.size();i++) { \\t\\tObject obj = list.get(i); \\t\\t// 问题二：需要强转，一方面繁琐，另一方面可能报ClassCastException \\t\\tint score = (Integer) obj; \\t\\tSystem.out.println(score); \\t} } 例子1： @Test public void test2() { \\tList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); \\tlist.add(67); \\tlist.add(54); \\tlist.add(87); \\t// list.add(\\"MM\\"); \\tIterator&lt;Integer&gt; iterator = list.iterator(); \\twhile(iterator.hasNext()){ \\t\\tInteger score = iterator.next(); \\t\\tSystem.out.println(score); \\t} // 不允许。 // List&lt;int&gt; list = new ArrayList&lt;int&gt;(); } 例子2： @Test public void test3() { \\tHashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;(); // 类型推断：int[] arr = {1,2,3}; \\tmap.put(\\"Tom\\", 12); \\tmap.put(\\"Lilei\\", 23); \\tmap.put(\\"HanMeimei\\", 33); \\tmap.put(\\"Jim\\", 14); \\t// map.put(12, \\"Jerry\\"); \\tSet&lt;Map.Entry&lt;String,Integer&gt;&gt; entrySet = map.entrySet(); \\tIterator&lt;Map.Entry&lt;String,Integer&gt;&gt; iterator =entrySet.iterator(); \\twhile(iterator.hasNext()){ \\t\\tEntry&lt;String, Integer&gt; entry = iterator.next(); \\t\\tSystem.out.println(entry.getKey() + \\"--&gt;\\" + entry.getValue()); \\t} } 总结 （1）泛型参数只能使用引用数据类型，不能使用基本数据类型； （2）集合中，如果没有使用泛型，则默认使用 Object 类型； ​ &nbsp;如果集合中使用泛型，则集合的相关属性、方法中，凡是使用到类或接口泛型参数的地方，都要调整为具体的泛型类型。 （3）什么时候使用泛型呢？ ​ &nbsp;首先，类或接口应该声明为泛型类、泛型接口； ​ &nbsp;其次，在实例化类时，就可以指明泛型参数的类型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Java 基础"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. 泛型在集合中的使用","slug":"_1-泛型在集合中的使用","link":"#_1-泛型在集合中的使用","children":[]},{"level":2,"title":"2. 自定义泛型类、接口、方法","slug":"_2-自定义泛型类、接口、方法","link":"#_2-自定义泛型类、接口、方法","children":[]},{"level":2,"title":"3. 泛型与继承的关系","slug":"_3-泛型与继承的关系","link":"#_3-泛型与继承的关系","children":[]},{"level":2,"title":"4. 通配符","slug":"_4-通配符","link":"#_4-通配符","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":4.11,"words":1234},"filePathRelative":"java/basic/genericity.md","localizedDate":"2023年5月17日","excerpt":"<h2> 1. 泛型在集合中的使用</h2>\\n<ul>\\n<li>\\n<p><strong>在集合中使用泛型的例子</strong></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Test</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">List</span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">89</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">76</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">66</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">54</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// 问题一：类型不安全</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"AA\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>i <span class=\\"token operator\\">&lt;</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\">Object</span> obj <span class=\\"token operator\\">=</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token comment\\">// 问题二：需要强转，一方面繁琐，另一方面可能报ClassCastException</span>\\n\\t\\t<span class=\\"token keyword\\">int</span> score <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">)</span> obj<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>score<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>例子1：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Test</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test2</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> list <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">67</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">54</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tlist<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">87</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// list.add(\\"MM\\");</span>\\n\\n\\t<span class=\\"token class-name\\">Iterator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> iterator <span class=\\"token operator\\">=</span> list<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\">Integer</span> score <span class=\\"token operator\\">=</span> iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>score<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 不允许。</span>\\n    <span class=\\"token comment\\">// List&lt;int&gt; list = new ArrayList&lt;int&gt;();</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>例子2：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Test</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test3</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> map <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 类型推断：int[] arr = {1,2,3};</span>\\n\\n\\tmap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Tom\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">12</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tmap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Lilei\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">23</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tmap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"HanMeimei\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">33</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\tmap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Jim\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">14</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// map.put(12, \\"Jerry\\");</span>\\n\\n\\t<span class=\\"token class-name\\">Set</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> entrySet <span class=\\"token operator\\">=</span> map<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entrySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">Iterator</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Map<span class=\\"token punctuation\\">.</span>Entry</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> iterator <span class=\\"token operator\\">=</span>entrySet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">iterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">hasNext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token class-name\\">Entry</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> entry <span class=\\"token operator\\">=</span> iterator<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">next</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>entry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getKey</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\"--&gt;\\"</span> <span class=\\"token operator\\">+</span> entry<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>总结</strong></p>\\n<p>（1）泛型参数只能使用引用数据类型，不能使用基本数据类型；</p>\\n<p>（2）集合中，如果没有使用泛型，则默认使用 Object 类型；</p>\\n<p>​        &nbsp;如果集合中使用泛型，则集合的相关属性、方法中，凡是使用到类或接口泛型参数的地方，都要调整为具体的泛型类型。</p>\\n<p>（3）什么时候使用泛型呢？</p>\\n<p>​        &nbsp;首先，类或接口应该声明为泛型类、泛型接口；</p>\\n<p>​        &nbsp;其次，在实例化类时，就可以指明泛型参数的类型。</p>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
