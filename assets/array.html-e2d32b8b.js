const n=JSON.parse('{"key":"v-e17274d6","path":"/java/basic/array.html","title":"数组","lang":"zh-CN","frontmatter":{"title":"数组","category":"Java","tag":["Java 基础"],"description":"1. 一维数组 数组的说明 数组（array）：可以理解为多个相同数据类型的变量的组合。 目的：为了便于在内存中对数据进行统一管理。 一维数组的声明与初始化 （1）静态初始化：数组的赋值和数组元素的赋值同时进行。 int[] ids1 = new int[]{1,2,3,4,5,6,7}; int[] ids2 = {1,2,3,4,5,6,7}; （2）动态初始化：数组的赋值和数组元素的赋值分开进行。 String[] names = new String[3]; 一维数组的引用 通过下角标的方式进行调用（下角标从0开始，到数组长度-1结束）。 总结：不管是静态初始化还是动态初始化，一旦数组初始化完成，其长度就确定了，而且长度是不可变的。 数组的属性 数组的长度，即为数组中元素的个数，可以通过 length 属性来获取。 一维数组的遍历","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/basic/array.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"数组"}],["meta",{"property":"og:description","content":"1. 一维数组 数组的说明 数组（array）：可以理解为多个相同数据类型的变量的组合。 目的：为了便于在内存中对数据进行统一管理。 一维数组的声明与初始化 （1）静态初始化：数组的赋值和数组元素的赋值同时进行。 int[] ids1 = new int[]{1,2,3,4,5,6,7}; int[] ids2 = {1,2,3,4,5,6,7}; （2）动态初始化：数组的赋值和数组元素的赋值分开进行。 String[] names = new String[3]; 一维数组的引用 通过下角标的方式进行调用（下角标从0开始，到数组长度-1结束）。 总结：不管是静态初始化还是动态初始化，一旦数组初始化完成，其长度就确定了，而且长度是不可变的。 数组的属性 数组的长度，即为数组中元素的个数，可以通过 length 属性来获取。 一维数组的遍历"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Java 基础"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. 一维数组","slug":"_1-一维数组","link":"#_1-一维数组","children":[]},{"level":2,"title":"2. 数组的常见算法","slug":"_2-数组的常见算法","link":"#_2-数组的常见算法","children":[]},{"level":2,"title":"3. Arrays 工具类的使用","slug":"_3-arrays-工具类的使用","link":"#_3-arrays-工具类的使用","children":[]},{"level":2,"title":"4. 数组的常见异常","slug":"_4-数组的常见异常","link":"#_4-数组的常见异常","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":3.55,"words":1065},"filePathRelative":"java/basic/array.md","localizedDate":"2023年5月17日","excerpt":"<h2> 1. 一维数组</h2>\\n<ul>\\n<li>\\n<p><strong>数组的说明</strong></p>\\n<p>数组（array）：可以理解为多个相同数据类型的变量的组合。</p>\\n<p>目的：为了便于在内存中对数据进行统一管理。</p>\\n</li>\\n<li>\\n<p><strong>一维数组的声明与初始化</strong></p>\\n<p>（1）静态初始化：数组的赋值和数组元素的赋值同时进行。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> ids1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> ids2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>（2）动态初始化：数组的赋值和数组元素的赋值分开进行。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> names <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>一维数组的引用</strong></p>\\n<p>通过下角标的方式进行调用（下角标从0开始，到数组长度-1结束）。</p>\\n<p>总结：不管是静态初始化还是动态初始化，一旦数组初始化完成，其长度就确定了，而且长度是不可变的。</p>\\n</li>\\n<li>\\n<p><strong>数组的属性</strong></p>\\n<p>数组的长度，即为数组中元素的个数，可以通过 length 属性来获取。</p>\\n</li>\\n<li>\\n<p><strong>一维数组的遍历</strong></p>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
