const e=JSON.parse('{"key":"v-204f2809","path":"/java/framework/spring/core/spring-ioc.html","title":"IOC 容器","lang":"zh-CN","frontmatter":{"title":"IOC 容器","date":"2021-08-23T00:00:00.000Z","category":"常用框架","tag":["Spring"],"description":"1. IOC 底层原理 什么是 IOC（inversion of control） （1）控制反转，将对象的创建和对象之间的调用关系，都交由 Spring 去管理 （2）使用 IOC 目的：降低耦合度 （3）入门案例就是 IOC 的实现 底层原理 三大原理：xml 解析、工厂模式、反射 image-20210821225139096","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/framework/spring/core/spring-ioc.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"IOC 容器"}],["meta",{"property":"og:description","content":"1. IOC 底层原理 什么是 IOC（inversion of control） （1）控制反转，将对象的创建和对象之间的调用关系，都交由 Spring 去管理 （2）使用 IOC 目的：降低耦合度 （3）入门案例就是 IOC 的实现 底层原理 三大原理：xml 解析、工厂模式、反射 image-20210821225139096"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2021-08-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IOC 容器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-08-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. IOC 底层原理","slug":"_1-ioc-底层原理","link":"#_1-ioc-底层原理","children":[]},{"level":2,"title":"2. IOC 的接口","slug":"_2-ioc-的接口","link":"#_2-ioc-的接口","children":[]},{"level":2,"title":"3. IOC 操作-Bean 管理","slug":"_3-ioc-操作-bean-管理","link":"#_3-ioc-操作-bean-管理","children":[]},{"level":2,"title":"4. 基于 xml 配置文件方式实现 Bean 管理","slug":"_4-基于-xml-配置文件方式实现-bean-管理","link":"#_4-基于-xml-配置文件方式实现-bean-管理","children":[]},{"level":2,"title":"5. IOC 操作-Bean 管理之 FactoryBean","slug":"_5-ioc-操作-bean-管理之-factorybean","link":"#_5-ioc-操作-bean-管理之-factorybean","children":[]},{"level":2,"title":"6. IOC 操作-Bean 管理之 Bean 的作用域","slug":"_6-ioc-操作-bean-管理之-bean-的作用域","link":"#_6-ioc-操作-bean-管理之-bean-的作用域","children":[]},{"level":2,"title":"7. IOC 操作-Bean 管理之 Bean 的生命周期","slug":"_7-ioc-操作-bean-管理之-bean-的生命周期","link":"#_7-ioc-操作-bean-管理之-bean-的生命周期","children":[]},{"level":2,"title":"8. IOC 操作-Bean 管理之 xml 自动装配","slug":"_8-ioc-操作-bean-管理之-xml-自动装配","link":"#_8-ioc-操作-bean-管理之-xml-自动装配","children":[]},{"level":2,"title":"9. IOC 操作-Bean 管理之 引入外部属性文件","slug":"_9-ioc-操作-bean-管理之-引入外部属性文件","link":"#_9-ioc-操作-bean-管理之-引入外部属性文件","children":[]},{"level":2,"title":"10. 基于注解方式实现 Bean 管理（★★★★★）","slug":"_10-基于注解方式实现-bean-管理-★★★★★","link":"#_10-基于注解方式实现-bean-管理-★★★★★","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":21.54,"words":6463},"filePathRelative":"java/framework/spring/core/spring-ioc.md","localizedDate":"2021年8月23日","excerpt":"<h2> 1. IOC 底层原理</h2>\\n<ul>\\n<li><strong>什么是 IOC（inversion of control）</strong></li>\\n</ul>\\n<p>（1）控制反转，将对象的创建和对象之间的调用关系，都交由 Spring 去管理</p>\\n<p>（2）使用 IOC 目的：降低耦合度</p>\\n<p>（3）入门案例就是 IOC 的实现</p>\\n<ul>\\n<li>\\n<p><strong>底层原理</strong></p>\\n<p>三大原理：xml 解析、工厂模式、反射</p>\\n</li>\\n</ul>\\n<figure><img src=\\"https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210821225139096.png\\" alt=\\"image-20210821225139096\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20210821225139096</figcaption></figure>","autoDesc":true}');export{e as data};
