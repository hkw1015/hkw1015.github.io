const n=JSON.parse('{"key":"v-4e7af638","path":"/java/framework/mybatis-plus/mybatis-plus-8.html","title":"自定义全局操作","lang":"zh-CN","frontmatter":{"title":"自定义全局操作","date":"2021-11-03T00:00:00.000Z","category":"常用框架","tag":["MyBatis-Plus"],"description":"根据 MyBatisPlus 的 AutoSqlInjector 可以自定义各种你想要的 SQL，注入到全局中，相当于自定义 MyBatisPlus 自动注入的方法。 1. AutoSqlInjector 在 Mapper 接口中定义相关的 CRUD 方法 image-20211130163632225 扩展 AutoSqlInjector --- inject 方法，实现 Mapper 接口中要注入的 SQL /** * 自定义全局操作 */ public class MySQLInjector extends AutoSqlInjector { /** * 扩展 inject 方法，完成自定义全局操作 */ @Override public void inject(Configuration configuration, MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo table) { // 总体目标：将 EmployeeMapper 中定义的 selectAll，处理成对应的 MappedStatement 对象，加入到 configuration 对象中 // 1)注入的 SQL 语句 String sql = \\"select id,last_name,email,gender,age,version from \\" + table.getTableName(); // 2)注入的方法名，一定要与 EmployeeMapper 接口中的方法名一致 String method = \\"selectAll\\"; // 3)构造 SqlSource 对象 SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass); // 4)构造一个查询的 MappedStatement，并加入到 configuration this.addSelectMappedStatement(mapperClass, method, sqlSource, Employee.class, table); } } 在 MP 全局策略中，配置自定义注入器 image-20211130163517834","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/framework/mybatis-plus/mybatis-plus-8.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"自定义全局操作"}],["meta",{"property":"og:description","content":"根据 MyBatisPlus 的 AutoSqlInjector 可以自定义各种你想要的 SQL，注入到全局中，相当于自定义 MyBatisPlus 自动注入的方法。 1. AutoSqlInjector 在 Mapper 接口中定义相关的 CRUD 方法 image-20211130163632225 扩展 AutoSqlInjector --- inject 方法，实现 Mapper 接口中要注入的 SQL /** * 自定义全局操作 */ public class MySQLInjector extends AutoSqlInjector { /** * 扩展 inject 方法，完成自定义全局操作 */ @Override public void inject(Configuration configuration, MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo table) { // 总体目标：将 EmployeeMapper 中定义的 selectAll，处理成对应的 MappedStatement 对象，加入到 configuration 对象中 // 1)注入的 SQL 语句 String sql = \\"select id,last_name,email,gender,age,version from \\" + table.getTableName(); // 2)注入的方法名，一定要与 EmployeeMapper 接口中的方法名一致 String method = \\"selectAll\\"; // 3)构造 SqlSource 对象 SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass); // 4)构造一个查询的 MappedStatement，并加入到 configuration this.addSelectMappedStatement(mapperClass, method, sqlSource, Employee.class, table); } } 在 MP 全局策略中，配置自定义注入器 image-20211130163517834"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"MyBatis-Plus"}],["meta",{"property":"article:published_time","content":"2021-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"自定义全局操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. AutoSqlInjector","slug":"_1-autosqlinjector","link":"#_1-autosqlinjector","children":[]},{"level":2,"title":"2. 自定义注入器的应用之逻辑删除","slug":"_2-自定义注入器的应用之逻辑删除","link":"#_2-自定义注入器的应用之逻辑删除","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"java/framework/mybatis-plus/mybatis-plus-8.md","localizedDate":"2021年11月3日","excerpt":"<p>根据 MyBatisPlus 的 AutoSqlInjector 可以自定义各种你想要的 SQL，注入到全局中，相当于自定义 MyBatisPlus 自动注入的方法。</p>\\n<h2> 1. AutoSqlInjector</h2>\\n<ul>\\n<li>\\n<p>在 Mapper 接口中定义相关的 CRUD 方法</p>\\n<figure><img src=\\"http://img.hl1015.top/blog/image-20211130163632225.png\\" alt=\\"image-20211130163632225\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20211130163632225</figcaption></figure>\\n</li>\\n<li>\\n<p>扩展 AutoSqlInjector --- inject 方法，实现 Mapper 接口中要注入的 SQL</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/**\\n * 自定义全局操作\\n */</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MySQLInjector</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">AutoSqlInjector</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 扩展 inject 方法，完成自定义全局操作\\n     */</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">inject</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Configuration</span> configuration<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">MapperBuilderAssistant</span> builderAssistant<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Class</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">&gt;</span></span> mapperClass<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Class</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token operator\\">?</span><span class=\\"token punctuation\\">&gt;</span></span> modelClass<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">TableInfo</span> table<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 总体目标：将 EmployeeMapper 中定义的 selectAll，处理成对应的 MappedStatement 对象，加入到 configuration 对象中</span>\\n        <span class=\\"token comment\\">// 1)注入的 SQL 语句</span>\\n        <span class=\\"token class-name\\">String</span> sql <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"select id,last_name,email,gender,age,version from \\"</span> <span class=\\"token operator\\">+</span> table<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getTableName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 2)注入的方法名，一定要与 EmployeeMapper 接口中的方法名一致</span>\\n        <span class=\\"token class-name\\">String</span> method <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"selectAll\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 3)构造 SqlSource 对象</span>\\n        <span class=\\"token class-name\\">SqlSource</span> sqlSource <span class=\\"token operator\\">=</span> languageDriver<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createSqlSource</span><span class=\\"token punctuation\\">(</span>configuration<span class=\\"token punctuation\\">,</span> sql<span class=\\"token punctuation\\">,</span> modelClass<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 4)构造一个查询的 MappedStatement，并加入到 configuration</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addSelectMappedStatement</span><span class=\\"token punctuation\\">(</span>mapperClass<span class=\\"token punctuation\\">,</span> method<span class=\\"token punctuation\\">,</span> sqlSource<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Employee</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span> table<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>在 MP 全局策略中，配置自定义注入器</p>\\n<figure><img src=\\"http://img.hl1015.top/blog/image-20211130163517834.png\\" alt=\\"image-20211130163517834\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20211130163517834</figcaption></figure>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
