import{_ as n,Z as s,$ as a,a5 as t}from"./framework-1fb77053.js";const p={},e=t(`<h2 id="_1-string、stringbuffer、stringbuilder" tabindex="-1"><a class="header-anchor" href="#_1-string、stringbuffer、stringbuilder" aria-hidden="true">#</a> 1. String、StringBuffer、StringBuilder</h2><blockquote><p>（一）java.lang.String 类</p></blockquote><ul><li><p><strong>特点</strong></p><p>String 的不可变性</p><p>体现：</p><p>①给现有的字符串添加一个新的字符串，不能在原有的字符串后面添加，而必须声明一个新的内存空间，存放新的字符串；</p><p>②给现有的字符串重新赋值，不能在原有的常量池对应的字符串的位置赋值，必须重新声明一个新的内存空间，存放新的字符串；</p><p>③现有的字符串调用 replace() 方法，仍然声明一个新的内存空间，存放修改以后的字符串。</p></li><li><p><strong>内存的存储结构</strong></p><p>String 声明的变量，我们称为字符串，本质上数据存放在字符串常量池中，字符串常量池存放在方法区中。</p><blockquote><p>jdk 6：方法区（具体的实现就是永久代---&gt;堆：新生代、老年代、永久代）；</p><p>jdk 7：方法区取消，统一归入堆；</p><p>jdk 8：元空间取代原的方法区</p></blockquote></li><li><p><strong>String 的实例化方式</strong></p><p>方式一：通过字面量定义的方式；</p><p>方式二：通过new + 构造器的方式。</p><p>二者区别：</p><p>①字面量的方式：地址值对应的数据声明在方法区中的字符串常量池；</p><p>②new + 构造器的方式：地址值对应的数据声明在堆空间中（堆空间中对应的 String 对象里存的是对应声明在字符串常量池中的字符串（若有，则不用创建；若无，就创建）的地址值）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 方式一：通过字面量的方式</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
		
<span class="token comment">// 方式二：通过new + 构造器的方式</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/java/base/image-20210811110223198.png" alt="image-20210811110223198" tabindex="0" loading="lazy"><figcaption>image-20210811110223198</figcaption></figure></li></ul><p><strong>【面试题】String s = new String(“abc”); 这种方式创建对象，在内存中创建了几个对象？</strong></p><p>​        一个或两个。一个是堆空间中 new 出的结构，另一个是char[]对应的字符串常量池的：&quot;abc&quot;（若有，则不用创建；若无，就创建）。</p><ul><li><strong>连接运算</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// String的连接运算</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
	
	<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">&quot;helloworld&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
	
	<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>
	<span class="token class-name">String</span> s6 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>
	
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
	<span class="token comment">// 此时的 s8 就使用已存在的 s3 对应 &quot;helloworld&quot;</span>
	<span class="token class-name">String</span> s8 <span class="token operator">=</span> <span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
	
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token class-name">String</span> ss1 <span class="token operator">=</span> <span class="token string">&quot;horld&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> ss2 <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> ss3 <span class="token operator">=</span> ss2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ss1 <span class="token operator">==</span> ss3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：①常量与常量的拼接结果在常量池，且常量池中不会存在相同内容的常量； ②只要其中一个是变量，结果就在堆中。</p><ul><li><p><strong>常用方法</strong></p><p>①compareTo()：比较字符串的大小，从第一个字母开始比较，返回 (a - b) 的 int 值（a.compareTo(b)）；</p><p>②equals()：比较两个字符串的内容是否相等；</p><p>③indexOf()：返回指定字符在字符串中出现的第一个位置脚标；</p><p>④length()：返回字符串的长度；</p><p>⑤charAt(int index)：返回指定脚标位置上的字符；</p><p>⑥lastIndexOf()：返回指定字符在字符串中出现的最后一个位置脚标；</p><p>⑦split()：按某个字符串对当前字符串进行分离得到一个String[]；</p><p>⑧subString()：截取字符串;</p><p>⑨trim()：去除字符串的前后空格。</p></li><li><p><strong>与基本数据类型、包装类之间的转换</strong></p></li></ul><p>（1）基本数据类型、包装类 ---&gt; String：</p><p>​        ①+&quot;&quot; ②String.valueOf();</p><p>（2）String ---&gt; 基本数据类型、包装类：</p><p>​        调用包装类的parseXxx(String s)。</p><ul><li><p><strong>与字节数组 byte[] 之间的转换</strong></p><p>（1）String ---&gt; byte[]：</p><p>​        调用 String 的 getBytes();</p><p>（2）byte[] ---&gt; String：</p><p>​        调用 String 的构造器：String s = new String(buffer);</p></li><li><p><strong>与字符数组 char[] 之间的转换</strong></p><p>（1）String ---&gt; char[]：</p><p>​       调用 String 的 toCharArray()；</p><p>（2）char[] ---&gt; String：</p><p>​       调用 String 的构造器：String s = new String(cbuf);</p></li></ul><blockquote><p>（二）StringBuffer 类与 StringBuilder 类</p></blockquote><p><strong>常用方法</strong></p><p>①增：append(Xxx xxx)；</p><p>②删：delete(int startIndex,int endIndex)；</p><p>③改：setCharAt(int index,char ch) / replace(int startIndex,int endIndex,String str)；</p><p>④查：charAt(int index)；</p><p>⑤插：insert(int index，String str)；</p><p>⑥长度：length()；</p><p>⑦遍历：for + charAt() / toString()。</p><p><strong>对比</strong></p><p>String、StringBuffer、StringBuilder 三者的异同？</p><p>​        同：表示字符串相关的类；</p><p>​        异：String：不可变的字符串序列，底层使用 char[] 存储；</p><p>​                StringBuffer：可变的字符串序列，线程安全的，效率低，底层使用 char[] 存储；</p><p>​                StringBuilder：可变的字符串序列，线程不安全的，效率高（jdk 5），底层使用 char[] 存储。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token operator">:</span> 类似看成数组
<span class="token class-name">StringBuffer</span><span class="token operator">:</span> 类似看成 <span class="token class-name">Vector</span>
<span class="token class-name">StringBuilder</span><span class="token operator">:</span>类似看成 <span class="token class-name">ArrayList</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new char[0];</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new char[]{&#39;a&#39;,&#39;b&#39;,&#39;c&#39;};</span>
<span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new char[16]; 空参构造器的默认底层数组的长度为16。</span>
<span class="token function">sysout</span><span class="token punctuation">(</span>sb1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
<span class="token class-name">StringBuffer</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new char[&quot;abc&quot;.length() + 16]; char[0] = &#39;a&#39;,...String 作为形参的构造器，底层会创建一个 str.length() + 16 为长度的数组。</span>
s2 <span class="token operator">+=</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 不可变性：创建一个新的字符串</span>
sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;def&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// char[3] = &#39;d&#39;,char[4] = &#39;e&#39;;char[5] = &#39;f&#39;;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// 如果底层数组存储新数据的空间不够，需要扩容：默认扩容为原来的数组长度的2倍+2.</span>
<span class="token comment">// StringBuilder 类似于上述的 StringBuffer,只是 StringBuffer 在方法的声明上，使用了 synchronized</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【算法题】考查：①数组；②字符串。</strong></p><p>（1）&quot;aaaabbbccccedaaabbfffeee&quot;---&gt;a7b5c4...</p><p>​        ----&gt;a4b34e1d1a3b2f3e3</p><p>​        ----&gt;返回当前字符串中首次出现一个的字符</p><p>（2）模拟一个 trim 方法，去除字符串两端的空格。</p><p>（3）将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</p><p>（4）获取一个字符串在另一个字符串中出现的次数。</p><p>​        比如：获取 &quot;ab&quot; 在 &quot;abkkcadkabkebfkabkskab&quot; 中出现的次数</p><p>（5）获取两个字符串中最大相同子串。比如：</p><p>​      str1 = &quot;abcwerthelloyuiodef“;str2 = &quot;cvhellobnm&quot;</p><p>​      提示：将短的那个串进行长度依次递减的子串与较长的串比较。</p><p>（6）对字符串中字符进行自然顺序排序。</p><p>​       提示：</p><p>​       1）字符串变成字符数组。</p><p>​       2）对数组排序，选择，冒泡，Arrays.sort();</p><p>​       3）将排序后的数组变成字符串。</p><h2 id="_2-jdk8-之前的时间日期-api" tabindex="-1"><a class="header-anchor" href="#_2-jdk8-之前的时间日期-api" aria-hidden="true">#</a> 2. jdk8 之前的时间日期 API</h2><ul><li><p><strong>获取系统当前时间</strong></p><p>调用 System 类的静态方法：currentTimeMillis();（毫秒数）</p></li><li><p><strong>Date 类</strong></p><p>（1）java.util.Date</p><p>​       ①如何实例化？两个构造器：Date() / Date(long millis)；</p><p>​       ②两个方法的调用：toString()：显示当前日期对应的年月日时分秒的信息；</p><p>​       getTime()：获取指定日期对应的毫秒数；</p><p>（2）java.sql.Date：</p><p>​       作为 util 下 Date类的子类，与数据库交互时，和数据表中的 Date 类型对应。</p><p>​       ①一个构造器：Date(long millis)；</p><p>​       ②两个方法的调用：toString() / getTime()。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.如何实例化 java.util.Date</span>
	<span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代表着系统当前时间</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">545254352345L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代表着指定毫秒数对应的时间</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token comment">// 2.toString()：显示当前日期对应的年月日时分秒的信息</span>
	<span class="token comment">// getTime()：获取指定日期对应的毫秒数</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wed Aug 11 13:52:58 CST 2021</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Mon Apr 13 04:32:32 CDT 1987</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.如何实例化 java.sql.Date</span>
	<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token number">5234523453245L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 2.常用方法：toString() / getTime()</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>java.text.SimpleDateFormat：用于 Date 的格式化和解析</strong></p><p>（1）格式化（format）：日期 ---&gt; 字符串、文本；</p><p>（2）解析（parse）：字符串、文本 ---&gt; 日期。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// SimpleDateFormat 类的使用</span>
<span class="token comment">// 1.格式化：日期 ---&gt; 字符串、文本</span>
<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2020-04-17 11:02:48</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.解析：字符串、文本 ---&gt; 日期</span>
<span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">&quot;2020-04-17 11:02:48&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> parse <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Fri Apr 17 11:02:48 CST 2020</span>
<span class="token comment">// 练习：将字符串“1998-04-22”转换为 java.sql.Date 类的对象</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;1998-04-22&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;date2: &quot;</span> <span class="token operator">+</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;date3: &quot;</span> <span class="token operator">+</span> date3<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Calendar 类：日历</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Calendar类的使用</span>
<span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应当前的时间</span>
<span class="token comment">// 常用操作</span>
<span class="token comment">// get()</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_WEEK</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// set()</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// add()</span>
calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 与 Date 之间的转换</span>
<span class="token class-name">Date</span> time2 <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-jdk8-中新时间日期-api" tabindex="-1"><a class="header-anchor" href="#_3-jdk8-中新时间日期-api" aria-hidden="true">#</a> 3. jdk8 中新时间日期 API</h2><ul><li><p><strong>时间日期 API 的迭代</strong></p><p>第一代：Date 类；</p><p>第二代：使用 Calendar 替换 Date 类；</p><p>第三代：java8 中新增时间日期API，存在于 java.time，以及相关子包下。</p></li><li><p><strong>前两代存在的问题说明</strong></p><p>①可变性：像日期和时间这样的类型应该是不可变的；</p><p>②偏移性：Date 中的年份是从 1900 开始的，而月份是从 0 开始的；</p><p>③格式化：格式化只对 Date 用，而 Calendar 则不行；</p><p>④此外：它们都是线程安全的、不能处理闰秒等。</p></li><li><p><strong>java8 中新的时间日期 API 的说明</strong></p><p>java.time：包含值对象的基础包；</p><p>java.time.chrono：提供对不同日历系统的访问；</p><p>java.time.format：格式化和解析时间和日期；</p><p>java.time.temporal：包括底层框架和扩展特性；</p><p>java.time.zone：包含时区支持的类。</p></li><li><p><strong>本地日期、本地时间、本地日期时间的使用：LocalDate / LocalTime / LocalDateTime</strong></p><p>（1）可以理解为：替换Calendar；</p><p>（2）常用方法</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>now() / now(ZoneId zone)</strong></td><td style="text-align:center;">静态方法，根据当前时间创建对象/指定时区的对象</td></tr><tr><td style="text-align:center;"><strong>of()</strong></td><td style="text-align:center;">静态方法，根据指定日期/时间创建对象</td></tr><tr><td style="text-align:center;">getDayOfMonth() / getDayOfYear()</td><td style="text-align:center;">获得月份天数(1-31)/获得年份天数(1-366)</td></tr><tr><td style="text-align:center;">getDayOfWeek()</td><td style="text-align:center;">获得星期几（返回一个 DayOfWeek 枚举值）</td></tr><tr><td style="text-align:center;">getMonth()</td><td style="text-align:center;">获得月份，返回一个 Month 枚举值</td></tr><tr><td style="text-align:center;">getMonthValue() / getYear()</td><td style="text-align:center;">获得月份(1-12)/获得年份</td></tr><tr><td style="text-align:center;">getHour() / getMinute() / getSecond()</td><td style="text-align:center;">获得当前对象对应的小时、分钟、秒</td></tr><tr><td style="text-align:center;">withDayOfMonth() / withDayOfYear() / withMonth() / withYear()</td><td style="text-align:center;">将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td></tr><tr><td style="text-align:center;">plusDays() / plusWeeks() / plusMonths / plusYears / plusHours()</td><td style="text-align:center;">向当前对象添加几天、几周、几个月、几年、几小时</td></tr><tr><td style="text-align:center;">minuteMonths() / minusWeeks() / minusDays() / minusYears() / minusHours()</td><td style="text-align:center;">从当前对象减去几月、几周、几天、几年、几小时</td></tr></tbody></table></li><li><p><strong>时间点：Instant</strong></p><p>（1）可以理解为：代表一个时间点。类似于 java.util.Date；</p><p>（2）常用方法</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>now()</strong></td><td style="text-align:center;">静态方法，返回默认 UTC 时区的 Instant 类的对象</td></tr><tr><td style="text-align:center;"><strong>ofEpochMilli(long epochMilli)</strong></td><td style="text-align:center;">静态方法，返回在 1970-01-01 00:00:00 基础上加上指定毫秒数之后的 Instant 类的对象</td></tr><tr><td style="text-align:center;"><strong>toEpochMilli()</strong></td><td style="text-align:center;">返回 1970-01-01 00:00:00 到当前时间的毫秒数，即为时间戳</td></tr><tr><td style="text-align:center;">atOffset(ZoneOffset offset)</td><td style="text-align:center;">结合即时的偏移来创建一个 OffsetDateTime</td></tr></tbody></table></li><li><p><strong>日期时间格式化类：DateTimeFormatter</strong></p><p>类似于 SimpleDateFormat 类。</p><p>自定义的格式：如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java8 中新增的时间日期 API</span>
<span class="token comment">// DateTimeFormatter 类的使用（类似于 SimpleDateFormat 类）</span>
<span class="token class-name">DateTimeFormatter</span> dtf <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 格式化：日期 ---&gt; 字符串、文本</span>
<span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> format2 <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解析：字符串、文本 ---&gt; 日期</span>
<span class="token class-name">TemporalAccessor</span> temporalAccessor <span class="token operator">=</span> dtf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2020-04-17 12:00:52&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temporalAccessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-jdk8-中的-optional-类" tabindex="-1"><a class="header-anchor" href="#_4-jdk8-中的-optional-类" aria-hidden="true">#</a> 4. jdk8 中的 Optional 类</h2><blockquote><p>java.util.Optional 类</p></blockquote><ul><li><p><strong>理解</strong></p><p>①为了解决 java 代码中对象的空指针问题；</p><p>②这是一个可以为 null 的容器对象。如果值存在则 isPresent() 方法会返回 true，调用 get() 方法会返回该对象。</p></li><li><p><strong>常用方法</strong></p><p>Optional.empty() : 创建一个空的 Optional 实例</p><p>Optional.of(T t) : 创建一个 Optional 实例</p><p>Optional.ofNullable(T t) : 若 t 不为 null,创建 Optional 实例,否则创建空实例</p><p>isPresent() : 判断是否包含值</p><p>T get() : 如果调用对象包含值，返回该值，否则抛异常</p><p>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t</p><p>orElseGet(Supplier s) : 如果调用对象包含值，返回该值，否则返回 s 获取的值</p><p>map(Function f) : 如果有值对其处理，并返回处理后的 Optional，否则返回 Optional.empty()</p><p>flatMap(Function mapper) : 与 map 类似，要求返回值必须是 Optional</p></li><li><p><strong>典型练习</strong></p><p>能保证如下的方法执行中不会出现空指针的异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 Optional</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGirlName2</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Man</span><span class="token punctuation">&gt;</span></span> op <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token class-name">Man</span> man1 <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">&quot;赵丽颖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// man1：一定非空</span>
		
	<span class="token class-name">Girl</span> girl <span class="token operator">=</span> man1<span class="token punctuation">.</span><span class="token function">getGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Girl</span><span class="token punctuation">&gt;</span></span> op1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token class-name">Girl</span> girl1 <span class="token operator">=</span> op1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">&quot;苍老师&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// girl1:一定非空</span>
			
	<span class="token keyword">return</span> girl1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-其他类" tabindex="-1"><a class="header-anchor" href="#_5-其他类" aria-hidden="true">#</a> 5. 其他类</h2><ul><li><p><strong>Math类</strong></p><p>java.lang.Math 提供了一系列静态方法用于科学计算，其方法的参数和返回值类型一般为 double 型；</p><p>常用方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>abs   绝对值

acos<span class="token punctuation">,</span>asin<span class="token punctuation">,</span>atan<span class="token punctuation">,</span>cos<span class="token punctuation">,</span>sin<span class="token punctuation">,</span>tan  三角函数

sqrt   平方根

<span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span>doble b<span class="token punctuation">)</span>   a 的 b 次幂

log   自然对数

exp   e 为底指数

<span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>

<span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">double</span> b<span class="token punctuation">)</span>

<span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    返回 <span class="token number">0.0</span> 到 <span class="token number">1.0</span> 的随机数

<span class="token keyword">long</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span>   <span class="token keyword">double</span> 型数据 a 转换为 <span class="token keyword">long</span> 型（四舍五入）

<span class="token function">toDegrees</span><span class="token punctuation">(</span><span class="token keyword">double</span> angrad<span class="token punctuation">)</span>   弧度—<span class="token operator">&gt;</span>角度

<span class="token function">toRadians</span><span class="token punctuation">(</span><span class="token keyword">double</span> angdeg<span class="token punctuation">)</span>   角度—<span class="token operator">&gt;</span>弧度
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>BigInteger类、BigDecimal类</strong></p><p>BigInteger类：Integer 类作为 int 的包装类，能存储的最大整型值为 2的31次方 - 1，BigInteger 类的数值范围较 Integer类、Long 类的数值范围要大得多，可以支持任意精度的整数。</p><p>​        构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​        常用方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> exponent<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">divideAndRemainder</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BigDecimal类：一般的 Float 类和 Double 类可以用来做科学计算或工程计算，但在商业计算中，要求数字精度比较高，故用到 java.math.BigDecimal 类。BigDecimal 类支持任何精度的定点数。</p><p>      构造方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token class-name">String</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>      常用方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> augend<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加</span>
<span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> subtrahend<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 减</span>
<span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> multiplicand<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 乘</span>
<span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> divisor<span class="token punctuation">,</span> <span class="token keyword">int</span> scale<span class="token punctuation">,</span> <span class="token keyword">int</span> roundingMode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,55),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","common-class.html.vue"]]);export{k as default};
