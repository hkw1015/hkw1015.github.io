import{_ as o,E as c,Z as i,$ as l,a3 as a,a4 as t,a0 as e,a1 as n,a5 as p}from"./framework-1fb77053.js";const u={},d=p('<h2 id="_1-缓存穿透" tabindex="-1"><a class="header-anchor" href="#_1-缓存穿透" aria-hidden="true">#</a> 1. 缓存穿透</h2><h3 id="_1-1-问题描述" tabindex="-1"><a class="header-anchor" href="#_1-1-问题描述" aria-hidden="true">#</a> 1.1 问题描述</h3><p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><figure><img src="http://img.hl1015.top/blog/image-20211124223024214.png" alt="image-20211124223024214" tabindex="0" loading="lazy"><figcaption>image-20211124223024214</figcaption></figure><h3 id="_1-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_1-2-解决方案" aria-hidden="true">#</a> 1.2 解决方案</h3><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查询不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>解决方案：</p>',7),k=e("p",null,"如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟",-1),r=e("p",null,"使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmaps 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问",-1),m=e("p",null,"布隆过滤器（Bloom Filter）是 1970 年由布隆提出的，它实际上是一个很长的二进制向量（位图）和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中，它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难",-1),v=p('<p>当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配置，可以设置黑名单限制服务</p><h2 id="_2-缓存击穿" tabindex="-1"><a class="header-anchor" href="#_2-缓存击穿" aria-hidden="true">#</a> 2. 缓存击穿</h2><h3 id="_2-1-问题描述" tabindex="-1"><a class="header-anchor" href="#_2-1-问题描述" aria-hidden="true">#</a> 2.1 问题描述</h3><p>key 对应的数据存在，但在 Redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</p><figure><img src="http://img.hl1015.top/blog/image-20211124224459158.png" alt="image-20211124224459158" tabindex="0" loading="lazy"><figcaption>image-20211124224459158</figcaption></figure><h3 id="_2-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_2-2-解决方案" aria-hidden="true">#</a> 2.2 解决方案</h3><p>key 可能会在某些时间点被超高并发地访问，是一种非常 &quot;热点&quot; 的数据，这个时候，需要考虑一个问题：缓存被 &quot;击穿&quot; 的问题。</p><p>解决方案：</p>',8),g=e("p",null,"在 Redis 高峰访问之前，把一些热门数据提前存入到 Redis 里面，加大这些热门数据 key 的时长",-1),b=e("p",null,"现场监控哪些数据热门，实时调整 key 的过期时长",-1),h=p('<p>①就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db</p><p>②先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 setnx），去 set 一个 mutex key</p><p>③当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key</p><p>④当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试这个 get 缓存的方法</p><figure><img src="http://img.hl1015.top/blog/image-20211124225505942.png" alt="image-20211124225505942" tabindex="0" loading="lazy"><figcaption>image-20211124225505942</figcaption></figure><h2 id="_3-缓存雪崩" tabindex="-1"><a class="header-anchor" href="#_3-缓存雪崩" aria-hidden="true">#</a> 3. 缓存雪崩</h2><h3 id="_3-1-问题描述" tabindex="-1"><a class="header-anchor" href="#_3-1-问题描述" aria-hidden="true">#</a> 3.1 问题描述</h3><p>key 对应的数据存在，但在 Redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key。</p><p>正常访问：</p><figure><img src="http://img.hl1015.top/blog/image-20211125153808299.png" alt="image-20211125153808299" tabindex="0" loading="lazy"><figcaption>image-20211125153808299</figcaption></figure><p>缓存失效瞬间：</p><figure><img src="http://img.hl1015.top/blog/image-20211125153814327.png" alt="image-20211125153814327" tabindex="0" loading="lazy"><figcaption>image-20211125153814327</figcaption></figure><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p><h3 id="_3-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_3-2-解决方案" aria-hidden="true">#</a> 3.2 解决方案</h3>',15),f=e("p",null,"nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）",-1),_=e("p",null,"用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，不适用高并发的情况",-1),x=e("p",null,"记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存",-1),y=p(`<p>比如我们可以在原有的失效时间基础上增加一个随机值，比如 1 - 5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件</p><h2 id="_4-分布式锁" tabindex="-1"><a class="header-anchor" href="#_4-分布式锁" aria-hidden="true">#</a> 4. 分布式锁</h2><h3 id="_4-1-问题描述" tabindex="-1"><a class="header-anchor" href="#_4-1-问题描述" aria-hidden="true">#</a> 4.1 问题描述</h3><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li>基于数据库实现的分布式锁</li><li><strong>基于缓存（Redis 等）</strong></li><li>基于 Zookeeper</li></ol><p>每一种分布式锁解决方案都有各自的优缺点：</p><ol><li>性能：Redis 最高</li><li>可靠性：Zookeeper 最高</li></ol><h3 id="_4-2-解决方案-使用-redis-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#_4-2-解决方案-使用-redis-实现分布式锁" aria-hidden="true">#</a> 4.2 解决方案：使用 redis 实现分布式锁</h3><p>redis 命令：<code>set sku:1:info &quot;OK&quot; NX PX 10000</code></p><ul><li>EX second：设置键的过期时间为 second 秒，<code>set key value EX second</code> 效果等同于 <code>setex key second value</code></li><li>PX millisecond：设置键的过期时间为 millisecond 毫秒，<code>set key value PX millisecond</code> 等同于 <code>psetex key value</code></li><li>NX：只有键不存在时，才对键进行设置操作，<code>set key value NX</code> 效果等同于 <code>setnx key value</code></li><li>XX：只有键已经存在时，才对键进行设置操作</li></ul><figure><img src="http://img.hl1015.top/blog/image-20211125164143768.png" alt="image-20211125164143768" tabindex="0" loading="lazy"><figcaption>image-20211125164143768</figcaption></figure><ol><li>多个客户端同时获取锁（setnx）</li><li>获取成功，执行业务逻辑，执行完成释放锁（del）</li><li>其他客户端等待重试</li></ol><h3 id="_4-3-编写代码" tabindex="-1"><a class="header-anchor" href="#_4-3-编写代码" aria-hidden="true">#</a> 4.3 编写代码</h3><p>准备工作：Redis 中 设置：<code>set num 0</code></p><figure><img src="http://img.hl1015.top/blog/image-20211125165451603.png" alt="image-20211125165451603" tabindex="0" loading="lazy"><figcaption>image-20211125165451603</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;testLock&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.获取锁，setnx</span>
	<span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 2.获取锁成功、查询num的值</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.1 判断num为空return</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 2.2 有值就转成成int</span>
		<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.3 把redis的num加1</span>
		redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.4 释放锁，del</span>
		redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 3.获取锁失败、每隔0.1秒再获取</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 ab 工具进行压测：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ab <span class="token parameter variable">-n</span> <span class="token number">1000</span> <span class="token parameter variable">-c</span> <span class="token number">100</span> http://192.168.81.1:6666/testLock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看 Redis 中 num 的值：</p><figure><img src="http://img.hl1015.top/blog/image-20211125170512714.png" alt="image-20211125170512714" tabindex="0" loading="lazy"><figcaption>image-20211125170512714</figcaption></figure><p>可以发现基本实现了。</p><h3 id="_4-4-优化之设置锁的过期时间" tabindex="-1"><a class="header-anchor" href="#_4-4-优化之设置锁的过期时间" aria-hidden="true">#</a> 4.4 优化之设置锁的过期时间</h3><ul><li>问题：setnx 刚好获取到锁，业务逻辑出现异常，导致锁无法释放</li><li>解决：设置过期时间，自动释放锁</li></ul><p>设置过期时间有两种方式：</p>`,25),q=e("li",null,"首先想到通过 expire 设置过期时间（缺乏原子性：如果在 setnx 和 expire 之间出现异常，锁也无法释放）",-1),S=p(`<figure><img src="http://img.hl1015.top/blog/image-20211125171728670.png" alt="image-20211125171728670" tabindex="0" loading="lazy"><figcaption>image-20211125171728670</figcaption></figure><p>设置过期时间：</p><figure><img src="http://img.hl1015.top/blog/image-20211125173113296.png" alt="image-20211125173113296" tabindex="0" loading="lazy"><figcaption>image-20211125173113296</figcaption></figure><blockquote><p>压力测试肯定也没有问题，可以自行测试</p></blockquote><h3 id="_4-5-优化之-uuid-防误删" tabindex="-1"><a class="header-anchor" href="#_4-5-优化之-uuid-防误删" aria-hidden="true">#</a> 4.5 优化之 UUID 防误删</h3><p>问题：可能会释放其他服务器的锁</p><p>场景：如果业务逻辑的执行时间是 7 s，执行流程如下：</p><ol><li>index 1 业务逻辑没执行完，3 秒后锁被自动释放</li><li>index 2 获取到锁，执行业务逻辑，3 秒后锁被自动释放</li><li>index 3 获取到锁，执行业务逻辑</li><li>index 1 业务逻辑执行完成，开始调用 del 释放锁，这时释放的是 index 3 的锁，导致 index 3 的业务只执行 1 秒就被别人释放</li><li>最终等于没锁的情况</li></ol><p>解决：setnx 获取锁时，设置一个指定的唯一值（例如：uuid），释放前获取这个值，判断是否是自己的锁</p><figure><img src="http://img.hl1015.top/blog/image-20211126101422403.png" alt="image-20211126101422403" tabindex="0" loading="lazy"><figcaption>image-20211126101422403</figcaption></figure><figure><img src="http://img.hl1015.top/blog/image-20211126102750424.png" alt="image-20211126102750424" tabindex="0" loading="lazy"><figcaption>image-20211126102750424</figcaption></figure><h3 id="_4-6-优化之-lua-脚本保证删除的原子性" tabindex="-1"><a class="header-anchor" href="#_4-6-优化之-lua-脚本保证删除的原子性" aria-hidden="true">#</a> 4.6 优化之 LUA 脚本保证删除的原子性</h3><p>问题：删除操作缺乏原子性</p><p>场景：</p><ol><li><p>index 1 执行删除时，查询到的 lock 值确实和 uuid 相等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>uuid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// index 1 线程刚好执行到这一步，并且查询到的 lock 值和 uuid 相等</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>index 1 执行删除前，lock 刚好过期时间已到，被 redis 自动释放</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在下面一步之前，Redis 中的 lock 刚好过期了</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>index 2 获取到了 lock</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 此时 index 2 线程获取到了 CPU 资源，开始执行方法</span>
uuid <span class="token operator">=</span> uuid2<span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>index 1 执行删除，此时会把 index 2 的 lock 删除</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 因为 index 1 已经在执行方法中，所以不需要重新上锁，有执行权限了，而且 uuid 和 lock 值已经比较完成，这个时候往下执行删除 lock 方法</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 这时就会误删了 index 2 的 lock</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>加入 Lua 脚本保证原子性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;testLockLua&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1 声明一个 uuid ,将做为一个 value 放入我们的key所对应的值中</span>
	<span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span>
	<span class="token class-name">String</span> skuId <span class="token operator">=</span> <span class="token string">&quot;25&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 访问 skuId 为 25 号的商品</span>
	<span class="token class-name">String</span> locKey <span class="token operator">=</span> <span class="token string">&quot;lock:&quot;</span> <span class="token operator">+</span> skuId<span class="token punctuation">;</span> <span class="token comment">// 锁住的是每个商品的数据</span>

	<span class="token comment">// 3 获取锁</span>
	<span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>locKey<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果 true</span>
		<span class="token comment">// 开始执行业务逻辑</span>
		<span class="token comment">// 获取缓存中的 num 数据</span>
		<span class="token class-name">Object</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 如果是空直接返回</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 不是空 如果说在这出现了异常！ 那么 delete 就删除失败！ 也就是说锁永远存在！</span>
		<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 使 num 每次 +1 放入缓存</span>
		redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;num&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token operator">++</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">/* 使用 lua 脚本来锁 */</span>
		<span class="token comment">// 定义lua 脚本</span>
		<span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
		<span class="token comment">// 使用 redis 执行 lua 脚本</span>
		<span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 设置一下 返回值类型 为 Long</span>
		<span class="token comment">// 因为删除判断的时候，返回的 0，给其封装为数据类型。如果不封装那么默认返回 String 类型，那么返回字符串与 0 会有发生错误。</span>
		redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 第一个要是 script 脚本，第二个需要判断的 key，第三个就是 key 所对应的值。</span>
		redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>locKey<span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// 其他线程等待</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 睡眠</span>
			<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 睡醒了之后，调用方法。</span>
			<span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lua 脚本详解：</p><figure><img src="http://img.hl1015.top/blog/image-20211126131343639.png" alt="image-20211126131343639" tabindex="0" loading="lazy"><figcaption>image-20211126131343639</figcaption></figure><p>项目中正确使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义 key，key 应该是为每个 sku 定义的，也就是每个 sku 有一把琐。</span>
<span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">&quot;lock:&quot;</span> <span class="token operator">+</span> skuId<span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> lock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-总结" tabindex="-1"><a class="header-anchor" href="#_4-7-总结" aria-hidden="true">#</a> 4.7 总结</h3><p><strong>（1）加锁</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 从 redis 中获取锁,set k1 v1 px 20000 nx</span>
<span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）使用 lua 释放锁</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2. 释放锁 del</span>
<span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 lua 脚本返回的数据类型</span>
<span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置 lua 脚本返回类型为 Long</span>
redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）重试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">testLockLua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了确保分布式锁可用，我们至少要确保锁的实现同时 <strong>满足以下四个条件</strong>：</p><ul><li>互斥性。在任意时刻，只有一个客户端能持有锁。</li><li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li><li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li><li>加锁和解锁必须具有原子性。</li></ul>`,30);function j(w,T){const s=c("font");return i(),l("div",null,[d,a(s,{color:"red"},{default:t(()=>[n("**（1）对空值缓存**")]),_:1}),k,a(s,{color:"red"},{default:t(()=>[n("**（2）设置可访问的名单（白名单）**")]),_:1}),r,a(s,{color:"red"},{default:t(()=>[n("**（3）采用布隆过滤器**")]),_:1}),m,a(s,{color:"red"},{default:t(()=>[n("**（4）进行实时监控**")]),_:1}),v,a(s,{color:"red"},{default:t(()=>[n("**（1）预先设置热门数据**")]),_:1}),g,a(s,{color:"red"},{default:t(()=>[n("**（2）实时调整**")]),_:1}),b,a(s,{color:"red"},{default:t(()=>[n("**（3）使用锁**")]),_:1}),h,a(s,{color:"red"},{default:t(()=>[n("**（1）构建多级缓存架构**")]),_:1}),f,a(s,{color:"red"},{default:t(()=>[n("**（2）使用锁或队列**")]),_:1}),_,a(s,{color:"red"},{default:t(()=>[n("**（3）设置过期标志更新缓存**")]),_:1}),x,a(s,{color:"red"},{default:t(()=>[n("**（4）将缓存失效时间分散开**")]),_:1}),y,e("ol",null,[q,e("li",null,[n("在 set 时指定过期时间（"),a(s,{color:"red"},{default:t(()=>[n("推荐")]),_:1}),n("）")])]),S])}const I=o(u,[["render",j],["__file","redis-16.html.vue"]]);export{I as default};
