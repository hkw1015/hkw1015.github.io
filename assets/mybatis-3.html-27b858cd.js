import{_ as e,E as p,Z as o,$ as c,a0 as n,a1 as s,a3 as l,a5 as a}from"./framework-1fb77053.js";const i={},u=a(`<h2 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念" aria-hidden="true">#</a> 1. 概念</h2><h3 id="_1-1-关联关系的概念说明" tabindex="-1"><a class="header-anchor" href="#_1-1-关联关系的概念说明" aria-hidden="true">#</a> 1.1 关联关系的概念说明</h3><p><strong>①数量关系</strong></p><p>主要体现在数据库表中</p><ul><li>一对一 <ul><li>夫妻关系，人和身份证号</li></ul></li><li>一对多 <ul><li>用户和用户的订单，锁和钥匙</li></ul></li><li>多对多 <ul><li>老师和学生，部门和员工</li></ul></li></ul><p><strong>②关联关系的方向</strong></p><p>主要体现在 Java 实体类中</p><ul><li>双向：双方都可以访问到对方 <ul><li>Customer：包含 Order 的集合属性</li><li>Order：包含单个 Customer 的属性</li></ul></li><li>单向：双方中只有一方能够访问到对方 <ul><li>Customer：不包含 Order 的集合属性，访问不到 Order</li><li>Order：包含单个 Customer 的属性</li></ul></li></ul><h3 id="_1-2-创建模型" tabindex="-1"><a class="header-anchor" href="#_1-2-创建模型" aria-hidden="true">#</a> 1.2 创建模型</h3><p><strong>①创建实体类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> customerId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> customerName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderList<span class="token punctuation">;</span> <span class="token comment">// 体现的是对多的关系</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> orderName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Customer</span> customer<span class="token punctuation">;</span> <span class="token comment">// 体现的是对一的关系</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>②创建数据库表并插入测试数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_customer<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
	 <span class="token identifier"><span class="token punctuation">\`</span>customer_id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> 
	 <span class="token identifier"><span class="token punctuation">\`</span>customer_name<span class="token punctuation">\`</span></span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>customer_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t_order<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span> 
	<span class="token identifier"><span class="token punctuation">\`</span>order_id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span> 
	<span class="token identifier"><span class="token punctuation">\`</span>order_name<span class="token punctuation">\`</span></span> <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
	<span class="token identifier"><span class="token punctuation">\`</span>customer_id<span class="token punctuation">\`</span></span> <span class="token keyword">INT</span><span class="token punctuation">,</span> 
	<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>order_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> 
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>t_customer<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>customer_name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;c01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>t_order<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>order_name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>customer_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;o1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>t_order<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>order_name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>customer_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;o2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>t_order<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>order_name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">\`</span>customer_id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;o3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>实际开发中，一般在开发过程中，不给数据库表设置外键约束，原因是避免调试不方便。</p><p>一般是功能开发完成，再加外键约束检查 是否有 bug。</p></blockquote><h2 id="_2-对一" tabindex="-1"><a class="header-anchor" href="#_2-对一" aria-hidden="true">#</a> 2. 对一</h2><h3 id="_2-1-创建-ordermapper-接口" tabindex="-1"><a class="header-anchor" href="#_2-1-创建-ordermapper-接口" aria-hidden="true">#</a> 2.1 创建 OrderMapper 接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">Order</span> <span class="token function">selectOrderWithCustomer</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-创建-ordermapper-xml-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-2-创建-ordermapper-xml-配置文件" aria-hidden="true">#</a> 2.2 创建 OrderMapper.xml 配置文件</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 --&gt;</span>
<span class="token comment">&lt;!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.mapper.OrderMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 创建resultMap实现“对一”关联关系映射 --&gt;</span>
    <span class="token comment">&lt;!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” --&gt;</span>
    <span class="token comment">&lt;!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectOrderWithCustomerResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.entity.Order<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 先设置Order自身属性和字段的对应关系 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>order_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderId<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>order_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token comment">&lt;!-- 使用association标签配置“对一”关联关系 --&gt;</span>
        <span class="token comment">&lt;!-- property属性：在Order类中对一的一端进行引用时使用的属性名 --&gt;</span>
        <span class="token comment">&lt;!-- javaType属性：一的一端类的全类名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.entity.Customer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 配置Customer类的属性和字段名之间的对应关系 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customerId<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customerName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- Order selectOrderWithCustomer(Integer orderId); --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectOrderWithCustomer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectOrderWithCustomerResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select
            order_id,order_name,c.customer_id,customer_name
        from
            t_order o
        left join t_customer c on o.customer_id = c.customer_id
        where o.order_id = #{orderId}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应关系可以参考下图：</p><figure><img src="http://img.hl1015.top/blog/image-20211027215737573.png" alt="image-20211027215737573" tabindex="0" loading="lazy"><figcaption>image-20211027215737573</figcaption></figure><h3 id="_2-3-在-mybatis-全局配置文件中注册-mapper-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-3-在-mybatis-全局配置文件中注册-mapper-配置文件" aria-hidden="true">#</a> 2.3 在 MyBatis 全局配置文件中注册 Mapper 配置文件</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span>
	<span class="token comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span>
	<span class="token comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span>
	<span class="token comment">&lt;!-- 对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappers/OrderMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-junit-测试" tabindex="-1"><a class="header-anchor" href="#_2-4-junit-测试" aria-hidden="true">#</a> 2.4 junit 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRelationshipToOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">OrderMapper</span> orderMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">OrderMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 查询Order对象，检查是否同时查询了关联的Customer对象</span>
    <span class="token class-name">Order</span> order <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">selectOrderWithCustomer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;order = &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试运行，控制台打印结果如下：</p><figure><img src="http://img.hl1015.top/blog/image-20211027220247981.png" alt="image-20211027220247981" tabindex="0" loading="lazy"><figcaption>image-20211027220247981</figcaption></figure><h3 id="_2-5-关键词" tabindex="-1"><a class="header-anchor" href="#_2-5-关键词" aria-hidden="true">#</a> 2.5 关键词</h3><p>在 &quot;对一&quot; 关联关系中，我们的配置比较多，但是关键词就只有：<strong>association</strong> 和 <strong>javaType</strong></p><h2 id="_3-对多" tabindex="-1"><a class="header-anchor" href="#_3-对多" aria-hidden="true">#</a> 3. 对多</h2><h3 id="_3-1-创建-mapper-接口" tabindex="-1"><a class="header-anchor" href="#_3-1-创建-mapper-接口" aria-hidden="true">#</a> 3.1 创建 Mapper 接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">Customer</span> <span class="token function">selectCustomerWithOrderList</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> customerId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-创建-customermapper-xml-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2-创建-customermapper-xml-配置文件" aria-hidden="true">#</a> 3.2 创建 CustomerMapper.xml 配置文件</h3><figure><img src="http://img.hl1015.top/blog/image-20211028070830779.png" alt="image-20211028070830779" tabindex="0" loading="lazy"><figcaption>image-20211028070830779</figcaption></figure><p>在 MyBatis 全局配置文件中注册 Mapper 配置文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span>
	<span class="token comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span>
	<span class="token comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span>
	<span class="token comment">&lt;!-- 对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappers/CustomerMapper.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-配置关联关系和-sql-语句" tabindex="-1"><a class="header-anchor" href="#_3-3-配置关联关系和-sql-语句" aria-hidden="true">#</a> 3.3 配置关联关系和 SQL 语句</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 --&gt;</span>
<span class="token comment">&lt;!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.mapper.CustomerMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 配置resultMap实现从Customer到OrderList的“对多”关联关系 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectCustomerWithOrderListResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.entity.Customer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 映射Customer本身的属性 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customerId<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customerName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

        <span class="token comment">&lt;!-- collection标签：映射“对多”的关联关系 --&gt;</span>
        <span class="token comment">&lt;!-- property属性：在Customer类中，关联“多”的一端的属性名 --&gt;</span>
        <span class="token comment">&lt;!-- ofType属性：集合属性中元素的类型 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.entity.Order<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 映射Order的属性 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>order_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderId<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>order_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- Customer selectCustomerWithOrderList(Integer customerId); --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectCustomerWithOrderList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectCustomerWithOrderListResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select
            c.customer_id,c.customer_name,o.order_id,o.order_name
        from
            t_customer c
        left join t_order o on c.customer_id = o.customer_id
        where c.customer_id = #{customerId}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应关系可以参考下图：</p><figure><img src="http://img.hl1015.top/blog/image-20211028070612051.png" alt="image-20211028070612051" tabindex="0" loading="lazy"><figcaption>image-20211028070612051</figcaption></figure><h3 id="_3-4-junit-测试" tabindex="-1"><a class="header-anchor" href="#_3-4-junit-测试" aria-hidden="true">#</a> 3.4 junit 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRelationshipToMulti</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">CustomerMapper</span> customerMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">CustomerMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 查询Customer对象同时将关联的Order集合查询出来</span>
	<span class="token class-name">Customer</span> customer <span class="token operator">=</span> customerMapper<span class="token punctuation">.</span><span class="token function">selectCustomerWithOrderList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;customer.getCustomerId() = &quot;</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span><span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;customer.getCustomerName() = &quot;</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span><span class="token function">getCustomerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">getOrderList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Order</span> order <span class="token operator">:</span> orderList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;order = &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试运行，控制台打印结果如下：</p><figure><img src="http://img.hl1015.top/blog/image-20211028071130755.png" alt="image-20211028071130755" tabindex="0" loading="lazy"><figcaption>image-20211028071130755</figcaption></figure><h3 id="_3-5-关键词" tabindex="-1"><a class="header-anchor" href="#_3-5-关键词" aria-hidden="true">#</a> 3.5 关键词</h3><p>在 &quot;对多&quot; 关联关系中，同样有很多配置，但是提炼出来最关键的就是：<strong>collection</strong> 和 <strong>ofType</strong></p><h2 id="_4-分步查询" tabindex="-1"><a class="header-anchor" href="#_4-分步查询" aria-hidden="true">#</a> 4. 分步查询</h2><h3 id="_4-1-概念和需求" tabindex="-1"><a class="header-anchor" href="#_4-1-概念和需求" aria-hidden="true">#</a> 4.1 概念和需求</h3><p>为了实现延迟加载，对 Customer 和 Order 的查询必须分开，分成两步来做，才能够实现。为此，我们需要单独查询 Order，也就是需要在 Mapper 配置文件中，单独编写查询 Order 集合数据的 SQL 语句。</p><h3 id="_4-2-具体操作" tabindex="-1"><a class="header-anchor" href="#_4-2-具体操作" aria-hidden="true">#</a> 4.2 具体操作</h3><p><strong>①编写查询 Customer 的 SQL 语句</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Customer selectCustomerWithLazyOrderList(Integer customerId); --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectCustomerWithLazyOrderList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectCustomerWithLazyOrderListResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	select customer_id,customer_name from t_customer where customer_id = #{customerId}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>②编写查询 Order 的 SQL 语句</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- List&lt;Order&gt; selectOrderListByCustomerId(Integer customerId); --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectOrderListByCustomerId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.entity.Order<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	select order_id,order_name from t_order where customer_id = #{customerId}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>③引用 SQL 语句</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectCustomerWithLazyOrderListResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.entity.Customer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 映射Customer本身的属性 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customerId<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customerName<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

	<span class="token comment">&lt;!-- orderList集合属性的映射关系，使用分步查询 --&gt;</span>
	<span class="token comment">&lt;!-- 在collection标签中使用select属性指定要引用的SQL语句 --&gt;</span>
	<span class="token comment">&lt;!-- select属性值的格式是：Mapper配置文件的名称空间.SQL语句id --&gt;</span>
	<span class="token comment">&lt;!-- column属性：指定Customer和Order之间建立关联关系时所依赖的字段 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orderList<span class="token punctuation">&quot;</span></span>
				<span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hkw.mybatis.mapper.CustomerMapper.selectOrderListByCustomerId<span class="token punctuation">&quot;</span></span>
				<span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customer_id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>扩展，多列值封装 map 传递：</p><p>分步查询时通过 column 指定，将对应的列的数据传递过去，但我们有时候需要传递多列数据，这时候使用<span style="color:red;"><strong>{key1=column1,key2=column2,...}</strong></span> 的形式。</p><p>assocation 或者 collection 标签的 fetchType=eager/lazy 可以覆盖全局的延迟加载策略，指定 <strong>立即加载(eager)</strong> 或者 <strong>延迟加载(lazy)</strong></p></blockquote><p><strong>④各个要素之间的对应关系</strong></p><figure><img src="http://img.hl1015.top/blog/image-20211028074759559.png" alt="image-20211028074759559" tabindex="0" loading="lazy"><figcaption>image-20211028074759559</figcaption></figure><p><strong>⑤junit 测试</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRelationshipByStepSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">CustomerMapper</span> customerMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">CustomerMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 查询Customer对象同时将关联的Order集合查询出来</span>
	<span class="token class-name">Customer</span> customer <span class="token operator">=</span> customerMapper<span class="token punctuation">.</span><span class="token function">selectCustomerWithLazyOrderList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;customer.getCustomerId() = &quot;</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span><span class="token function">getCustomerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;customer.getCustomerName() = &quot;</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span><span class="token function">getCustomerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">getOrderList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Order</span> order <span class="token operator">:</span> orderList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;order = &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试运行，控制台打印结果如下：</p><figure><img src="http://img.hl1015.top/blog/image-20211028090513471.png" alt="image-20211028090513471" tabindex="0" loading="lazy"><figcaption>image-20211028090513471</figcaption></figure><h2 id="_5-延迟加载" tabindex="-1"><a class="header-anchor" href="#_5-延迟加载" aria-hidden="true">#</a> 5. 延迟加载</h2><h3 id="_5-1-概念" tabindex="-1"><a class="header-anchor" href="#_5-1-概念" aria-hidden="true">#</a> 5.1 概念</h3><p>查询到 Customer 的时候，不一定会使用 Order 的 List 集合数据。如果 Order 的集合数据始终没有使用，那么这部分数据占用的内存就浪费了。对此，我们希望不一定会被用到的数据，能够在需要使用的时候再去查询。</p><p>例如：对 Customer 进行 1000 次查询中，其中只有 15 次会用到 Order 的集合数据，那么就在需要使用时才去查询能够大幅度节约内存空间。</p><p><strong><span style="color:blue;">延迟加载</span></strong> 的概念：对于实体类关联的属性在 <strong><span style="color:blue;">需要使用</span></strong> 时才查询，也叫 <strong><span style="color:blue;">懒加载</span></strong>。</p><h3 id="_5-2-配置" tabindex="-1"><a class="header-anchor" href="#_5-2-配置" aria-hidden="true">#</a> 5.2 配置</h3><figure><img src="http://img.hl1015.top/blog/image-20211028093816123.png" alt="image-20211028093816123" tabindex="0" loading="lazy"><figcaption>image-20211028093816123</figcaption></figure>`,71),r={href:"https://mybatis.org/mybatis-3/zh/configuration.html#settings",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><strong>①较低版本</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 开启延迟加载功能：需要配置两个配置项 --&gt;</span>
    <span class="token comment">&lt;!-- 1、将lazyLoadingEnabled设置为true，开启懒加载功能 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazyLoadingEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

    <span class="token comment">&lt;!-- 2、将aggressiveLazyLoading设置为false，关闭“积极的懒加载” --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aggressiveLazyLoading<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>②较高版本</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Mybatis全局配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 开启延迟加载功能 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazyLoadingEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-junit-测试" tabindex="-1"><a class="header-anchor" href="#_5-3-junit-测试" aria-hidden="true">#</a> 5.3 junit 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectCustomerWithOrderList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>

	<span class="token class-name">CustomerMapper</span> mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">CustomerMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">Customer</span> customer <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectCustomerWithOrderList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 这里必须只打印“customerId或customerName”这样已经加载的属性才能看到延迟加载的效果</span>
	<span class="token comment">// 这里如果打印Customer对象整体则看不到效果</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;customer = &quot;</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span><span class="token function">getCustomerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 先指定具体的时间单位，然后再让线程睡一会儿</span>
	<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">getOrderList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Order</span> order <span class="token operator">:</span> orderList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;order = &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试运行，控制台打印结果如下：</p><figure><img src="http://img.hl1015.top/blog/image-20211028095259066.png" alt="image-20211028095259066" tabindex="0" loading="lazy"><figcaption>image-20211028095259066</figcaption></figure><p>从打印结果可以看到效果：刚开始先查询 Customer 本身，需要用到 OrderList 的时候才发送 SQL 语句去查询</p><h3 id="_5-4-关键词总结" tabindex="-1"><a class="header-anchor" href="#_5-4-关键词总结" aria-hidden="true">#</a> 5.4 关键词总结</h3><p>我们是在 &quot;对多&quot; 关系中举例说明延迟加载的，在 &quot;对一&quot; 中配置方法基本一样。</p><table><thead><tr><th style="text-align:center;">关联关系</th><th style="text-align:center;">配置项关键词</th><th style="text-align:center;">所在配置文件</th></tr></thead><tbody><tr><td style="text-align:center;">对一</td><td style="text-align:center;">association 标签 / javaType 属性</td><td style="text-align:center;">Mapper 配置文件中的 resulteMap</td></tr><tr><td style="text-align:center;">对多</td><td style="text-align:center;">collection 标签 / ofType 属性</td><td style="text-align:center;">Mapper 配置文件中的 resulteMap</td></tr><tr><td style="text-align:center;">对一分步</td><td style="text-align:center;">association 标签 / select 属性 / column 属性</td><td style="text-align:center;">Mapper 配置文件中的 resulteMap</td></tr><tr><td style="text-align:center;">对多分步</td><td style="text-align:center;">collection 标签 / select 属性 / column 属性</td><td style="text-align:center;">Mapper 配置文件中的 resulteMap</td></tr><tr><td style="text-align:center;">延迟加载[低]</td><td style="text-align:center;">lazyLoadingEnabled 设置为 true<br>aggressiveLazyLoading 设置为 false</td><td style="text-align:center;">MyBatis 全局配置文件中的 settings</td></tr><tr><td style="text-align:center;">延迟加载[高]</td><td style="text-align:center;">lazyLoadingEnabled 设置为 true</td><td style="text-align:center;">MyBatis 全局配置文件中的 settings</td></tr></tbody></table><h2 id="_6-多对多关联关系需要中间表" tabindex="-1"><a class="header-anchor" href="#_6-多对多关联关系需要中间表" aria-hidden="true">#</a> 6. 多对多关联关系需要中间表</h2><h3 id="_6-1-如果不使用中间表" tabindex="-1"><a class="header-anchor" href="#_6-1-如果不使用中间表" aria-hidden="true">#</a> 6.1 如果不使用中间表</h3><figure><img src="http://img.hl1015.top/blog/image-20211028100748900.png" alt="image-20211028100748900" tabindex="0" loading="lazy"><figcaption>image-20211028100748900</figcaption></figure><p>在某一个表中，使用一个字段保存多个 &quot;外键&quot; 值，这将导致无法使用SQL语句进行关联查询。</p><h3 id="_6-2-使用中间表" tabindex="-1"><a class="header-anchor" href="#_6-2-使用中间表" aria-hidden="true">#</a> 6.2 使用中间表</h3><figure><img src="http://img.hl1015.top/blog/image-20211028100839934.png" alt="image-20211028100839934" tabindex="0" loading="lazy"><figcaption>image-20211028100839934</figcaption></figure><p>这样就可以使用SQL进行关联查询了，只是有可能需要三张表进行关联。</p><h3 id="_6-3-中间表设置主键" tabindex="-1"><a class="header-anchor" href="#_6-3-中间表设置主键" aria-hidden="true">#</a> 6.3 中间表设置主键</h3><p><strong>①方案一：另外设置一个专门的主键字段</strong></p><figure><img src="http://img.hl1015.top/blog/image-20211028101012017.png" alt="image-20211028101012017" tabindex="0" loading="lazy"><figcaption>image-20211028101012017</figcaption></figure><p><strong>②方案二：使用联合主键</strong></p><figure><img src="http://img.hl1015.top/blog/image-20211028101057094.png" alt="image-20211028101057094" tabindex="0" loading="lazy"><figcaption>image-20211028101057094</figcaption></figure><p>使用联合主键时，只要多个字段的组合不重复即可，单个字段内部是可以重复的。</p>`,25);function k(m,v){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("参考自："),n("a",r,[s("mybatis – MyBatis 3 | 配置"),l(t)])]),d])}const b=e(i,[["render",k],["__file","mybatis-3.html.vue"]]);export{b as default};
