import{_ as p,E as o,Z as c,$ as l,a0 as n,a1 as s,a3 as t,a5 as e}from"./framework-1fb77053.js";const i={},u=n("h2",{id:"_1-springmvc-自动配置概览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-springmvc-自动配置概览","aria-hidden":"true"},"#"),s(" 1. SpringMVC 自动配置概览")],-1),r=n("p",null,[s("Spring Boot provides auto-configuration for Spring MVC that "),n("strong",null,"works well with most applications.(大多场景我们都无需自定义配置)"),s(" The auto-configuration adds the following features on top of Spring’s defaults:")],-1),k=n("li",null,[s("Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans. "),n("ul",null,[n("li",null,"内容协商视图解析器和 BeanName 视图解析器")])],-1),d={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.static-content",target:"_blank",rel:"noopener noreferrer"},m=n("ul",null,[n("li",null,"静态资源（包括 webjars ）")],-1),v=n("li",null,[s("Automatic registration of Converter, GenericConverter, and Formatter beans. "),n("ul",null,[n("li",null,"自动注册 Converter，GenericConverter，Formatter")])],-1),g={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.message-converters",target:"_blank",rel:"noopener noreferrer"},b=n("ul",null,[n("li",null,"支持 HttpMessageConverters （后来我们配合内容协商理解原理）")],-1),h={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.message-codes",target:"_blank",rel:"noopener noreferrer"},f=n("ul",null,[n("li",null,"自动注册 MessageCodesResolver （国际化用）")],-1),y=n("li",null,[s("Static index.html support. "),n("ul",null,[n("li",null,"静态 index.html 页支持")])],-1),w={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#boot-features-spring-mvc-favicon",target:"_blank",rel:"noopener noreferrer"},q=n("ul",null,[n("li",null,"自定义 Favicon")],-1),x={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-web-applications.spring-mvc.binding-initializer",target:"_blank",rel:"noopener noreferrer"},_=n("ul",null,[n("li",null,"自动使用 ConfigurableWebBindingInitializer（DataBinder 负责将请求数据绑定到 JavaBean 上）")],-1),M=e(`<blockquote><p>If you want to keep those Spring Boot MVC customizations and make more MVC customizations (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc.</p><p>不用 @EnableWebMvc 注解。使用 @Configuration + WebMvcConfigurer 自定义规则</p></blockquote><blockquote><p>If you want to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, and still keep the Spring Boot MVC customizations, you can declare a bean of type WebMvcRegistrations and use it to provide custom instances of those components.</p><p>声明 WebMvcRegistrations 改变默认底层组件</p></blockquote><blockquote><p>If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.</p><p>使用 @EnableWebMvc + @Configuration + DelegatingWebMvcConfiguration 全面接管 SpringMVC</p></blockquote><h2 id="_2-简单功能分析" tabindex="-1"><a class="header-anchor" href="#_2-简单功能分析" aria-hidden="true">#</a> 2. 简单功能分析</h2><h3 id="_2-1-静态资源访问" tabindex="-1"><a class="header-anchor" href="#_2-1-静态资源访问" aria-hidden="true">#</a> 2.1 静态资源访问</h3><h4 id="_1、静态资源目录" tabindex="-1"><a class="header-anchor" href="#_1、静态资源目录" aria-hidden="true">#</a> 1、静态资源目录</h4><p>只要静态资源放在类路径下：called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code>)</p><p>访问：当前项目根路径 / + 静态资源名</p><p>原理：静态映射 /**</p><blockquote><p>请求进来，先去找 Controller 看能不能处理，不能处理的所有请求又都交给静态资源处理器，静态资源再找不到则响应 404 页面。</p></blockquote><p>改变默认的静态资源路径</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、静态资源访问前缀" tabindex="-1"><a class="header-anchor" href="#_2、静态资源访问前缀" aria-hidden="true">#</a> 2、静态资源访问前缀</h4><p>默认无前缀</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p></blockquote><h4 id="_3、webjar" tabindex="-1"><a class="header-anchor" href="#_3、webjar" aria-hidden="true">#</a> 3、webjar</h4><p>自动映射 /webjar/**</p>`,18),S={href:"https://www.webjars.org/",target:"_blank",rel:"noopener noreferrer"},C=e(`<figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210830090847668.png" alt="image-20210830090847668" tabindex="0" loading="lazy"><figcaption>image-20210830090847668</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),R={href:"http://localhost:8080/webjars/jquery/3.6.0/jquery.js",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="_2-2-欢迎页支持" tabindex="-1"><a class="header-anchor" href="#_2-2-欢迎页支持" aria-hidden="true">#</a> 2.2 欢迎页支持</h3><ul><li><p>静态资源路径下：index.html</p><ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html 不能被默认访问</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
<span class="token comment">#  mvc:</span>
<span class="token comment">#    static-path-pattern: /res/** 这个会导致 welcome page 功能失效</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>controller 能处理 /index</p></li></ul><h3 id="_2-3-自定义-favicon" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义-favicon" aria-hidden="true">#</a> 2.3 自定义 <code>Favicon</code></h3><p>将 favicon.ico 放在静态资源目录下即可。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
<span class="token comment">#  mvc:</span>
<span class="token comment">#    static-path-pattern: /res/** 这个会导致 Favicon 功能失效</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-静态资源配置原理" tabindex="-1"><a class="header-anchor" href="#_2-4-静态资源配置原理" aria-hidden="true">#</a> 2.4 静态资源配置原理</h3><ul><li><p>SpringBoot 启动默认加载 XxxAutoCinfiguration 类（自动配置类）</p></li><li><p>SpringMVC 功能的自动配置类 WebMvcAutoCinfiguration 生效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">WebMvcConfigurationSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2147483638</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DispatcherServletAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TaskExecutionAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ValidationAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfiguration</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>给容器中配置了什么</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">WebMvcAutoConfiguration<span class="token punctuation">.</span>EnableWebMvcConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">WebMvcProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">,</span> <span class="token class-name">ServletContextAware</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置文件的相关属性和 XxxProperties 进行了绑定。</p><ul><li>WebMvcProperties == <strong>spring.mvc</strong></li><li>ResourceProperties == <strong>spring.resources</strong></li></ul></li></ul><h4 id="_1、配置类只有一个有参构造器" tabindex="-1"><a class="header-anchor" href="#_1、配置类只有一个有参构造器" aria-hidden="true">#</a> 1、配置类只有一个有参构造器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 有参构造器中的所有参数的值都会从容器中确定</span>
<span class="token comment">// ResourceProperties resourceProperties：获取和 spring.resources 绑定的所有的值的对象</span>
<span class="token comment">// WebProperties webProperties：获取和 spring.mvc 绑定的所有的值的对象</span>
<span class="token comment">// ListableBeanFactory beanFactory：Spring 的 beanFactory</span>
<span class="token comment">// HttpMessageConverters：找到所有的 HttpMessageConverters</span>
<span class="token comment">// ResourceHandlerRegistrationCustomizer：找到 资源处理器的自定义器</span>
<span class="token comment">// ServletRegistrationBean：给应用注册 Servlet、Filter、......</span>
<span class="token keyword">public</span> <span class="token class-name">WebMvcAutoConfigurationAdapter</span><span class="token punctuation">(</span><span class="token class-name">ResourceProperties</span> resourceProperties<span class="token punctuation">,</span> 
	<span class="token class-name">WebProperties</span> webProperties<span class="token punctuation">,</span> 
	<span class="token class-name">WebMvcProperties</span> mvcProperties<span class="token punctuation">,</span> 
	<span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> 
	<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverters</span><span class="token punctuation">&gt;</span></span> messageConvertersProvider<span class="token punctuation">,</span> 
	<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebMvcAutoConfiguration<span class="token punctuation">.</span>ResourceHandlerRegistrationCustomizer</span><span class="token punctuation">&gt;</span></span> resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">,</span> 
	<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DispatcherServletPath</span><span class="token punctuation">&gt;</span></span> dispatcherServletPath<span class="token punctuation">,</span> 
	<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> servletRegistrations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Resources</span><span class="token punctuation">)</span><span class="token punctuation">(</span>resourceProperties<span class="token punctuation">.</span><span class="token function">hasBeenCustomized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> resourceProperties <span class="token operator">:</span> webProperties<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties <span class="token operator">=</span> mvcProperties<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>messageConvertersProvider <span class="token operator">=</span> messageConvertersProvider<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>resourceHandlerRegistrationCustomizer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WebMvcAutoConfiguration<span class="token punctuation">.</span>ResourceHandlerRegistrationCustomizer</span><span class="token punctuation">)</span>resourceHandlerRegistrationCustomizerProvider<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>dispatcherServletPath <span class="token operator">=</span> dispatcherServletPath<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>servletRegistrations <span class="token operator">=</span> servletRegistrations<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">checkConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、资源处理的默认规则" tabindex="-1"><a class="header-anchor" href="#_2、资源处理的默认规则" aria-hidden="true">#</a> 2、资源处理的默认规则</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Default resource handling disabled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// webjars 的规则</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">&quot;/webjars/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/META-INF/resources/webjars/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
			registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">ServletContextResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>servletContext<span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				registration<span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>resource<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>

		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">add-mappings</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 禁用所有静态资源规则</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.resources&quot;</span><span class="token punctuation">,</span>ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceProperties</span> <span class="token keyword">extends</span> <span class="token class-name">Resources</span> <span class="token punctuation">{</span>
    
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	
    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Resources</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:/META-INF/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/resources/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/static/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;classpath:/public/&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> staticLocations<span class="token punctuation">;</span>
	
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token keyword">public</span> <span class="token class-name">Resources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>staticLocations <span class="token operator">=</span> <span class="token constant">CLASSPATH_RESOURCE_LOCATIONS</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>addMappings <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>customized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebProperties<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>Chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebProperties<span class="token punctuation">.</span>Resources<span class="token punctuation">.</span>Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>staticLocations<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、欢迎页的处理规则" tabindex="-1"><a class="header-anchor" href="#_3、欢迎页的处理规则" aria-hidden="true">#</a> 3、欢迎页的处理规则</h4><p>WebMvcAutoConfiguration 类下注册了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// HandlerMapping：处理器映射器，保存了每一个 Handler 能处理哪些请求。</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">WelcomePageHandlerMapping</span> <span class="token function">welcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">FormattingConversionService</span> mvcConversionService<span class="token punctuation">,</span> <span class="token class-name">ResourceUrlProvider</span> mvcResourceUrlProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">WelcomePageHandlerMapping</span> welcomePageHandlerMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TemplateAvailabilityProviders</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWelcomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>mvcConversionService<span class="token punctuation">,</span> mvcResourceUrlProvider<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	welcomePageHandlerMapping<span class="token punctuation">.</span><span class="token function">setCorsConfigurations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCorsConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> welcomePageHandlerMapping<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>WelcomePageHandlerMapping 的构造器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WelcomePageHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">TemplateAvailabilityProviders</span> templateAvailabilityProviders<span class="token punctuation">,</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">Resource</span> welcomePage<span class="token punctuation">,</span> <span class="token class-name">String</span> staticPathPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 要用欢迎页功能，必须是 /**</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>welcomePage <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;/**&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Adding welcome page: &quot;</span> <span class="token operator">+</span> welcomePage<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">&quot;forward:index.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">welcomeTemplateExists</span><span class="token punctuation">(</span>templateAvailabilityProviders<span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 调用 Controller  /index</span>
		logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Adding welcome page template: index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setRootViewName</span><span class="token punctuation">(</span><span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-请求参数处理" tabindex="-1"><a class="header-anchor" href="#_3-请求参数处理" aria-hidden="true">#</a> 3. 请求参数处理</h2><h3 id="_3-1-请求映射" tabindex="-1"><a class="header-anchor" href="#_3-1-请求映射" aria-hidden="true">#</a> 3.1 请求映射</h3><h4 id="_3-1-1-rest-使用与原理" tabindex="-1"><a class="header-anchor" href="#_3-1-1-rest-使用与原理" aria-hidden="true">#</a> 3.1.1 Rest 使用与原理</h4><h5 id="_1、rest-使用" tabindex="-1"><a class="header-anchor" href="#_1、rest-使用" aria-hidden="true">#</a> 1、Rest 使用</h5><ul><li><p><code>@XxxMapping</code></p></li><li><p>Rest 风格支持（使用 HTTP 请求方式动词来表示对资源的操作）</p><ul><li><p>以前：/getUser 获取用户 /deleterUser 删除用户 /editUser 修改用户 /saveUser 保存用户</p></li><li><p><code>现在：/user GET-获取用户 DELETE-删除用户 PUT-修改用户 POST-保存用户</code></p></li><li><p>核心 Filter：HiddenHttpMethodFilter</p></li><li><p>用法：表单 method=post，隐藏域 _method=put</p></li><li><p>SpringBoot 中<code>手动开启</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">// 默认页面表单隐藏域提交的方式是关闭的</span>
<span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.mvc.hiddenmethod.filter&quot;</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;enabled&quot;</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">OrderedHiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OrderedHiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">hiddenmethod</span><span class="token punctuation">:</span>
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 手动开启页面表单的 Rest 功能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>扩展：如何把 _method 这个名字换成我们自己喜欢的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义 Filter</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token class-name">HiddenHttpMethodFilter</span> methodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	methodFilter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">&quot;_m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> methodFilter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h5 id="_2、rest-原理" tabindex="-1"><a class="header-anchor" href="#_2、rest-原理" aria-hidden="true">#</a> 2、Rest 原理</h5><blockquote><p>场景：表单提交要使用 Rest 的时候</p></blockquote><ul><li>表单提交会带上 <strong>_method=PUT</strong></li><li><strong>请求过来被</strong> <code>HiddenHttpMethodFilter</code> <strong>拦截</strong><ul><li>请求是否正常、并且是 POST <ul><li>获取到 <strong>_mehtod</strong> 的值</li><li>兼容以下请求：<strong>PUT、DELETE、PATCH</strong></li><li><strong>原生 request（post），包装模式 requestWrapper 重写了 getMethod 方法，返回的值是传入的值</strong></li><li><strong>过滤器链放行的时候用 wrapper，以后的方法调用 getMethod 是调用 requestWrapper 的</strong></li></ul></li></ul></li></ul><blockquote><p><strong>Rest 使用客户端工具</strong> --- 如 Postman 可以直接发送 PUT、DELETE 等方式请求，无需 Filter</p></blockquote><h4 id="_3-1-2-请求映射原理" tabindex="-1"><a class="header-anchor" href="#_3-1-2-请求映射原理" aria-hidden="true">#</a> 3.1.2 请求映射原理</h4><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210831132109265.png" alt="image-20210831132109265" tabindex="0" loading="lazy"><figcaption>image-20210831132109265</figcaption></figure><blockquote><p>SpringMVC 功能分析都从 org.springframework.web.servlet.DispatcherServlet ---》doDispatch()</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>
	<span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token class-name">Object</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				processedRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
				multipartRequestParsed <span class="token operator">=</span> processedRequest <span class="token operator">!=</span> request<span class="token punctuation">;</span>
				<span class="token comment">// 找到当前请求使用哪个 Handler（Controller 的方法）处理</span>
				mappedHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// HandlerMapping：处理器映射器。/xxx --&gt; xxx</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210831134140029.png" alt="image-20210831134140029" tabindex="0" loading="lazy"><figcaption>image-20210831134140029</figcaption></figure><p><code>RequestMappingHandlerMapping</code>：保存了所有 @RequestMapping 和 handler 的映射规则</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hkw - get 请求&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hkw - post 请求&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">putUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hkw - put 请求&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hkw - delete 请求&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210831140106182.png" alt="image-20210831140106182" tabindex="0" loading="lazy"><figcaption>image-20210831140106182</figcaption></figure><p>所有的请求映射都在 HandlerMapping 中：</p><ul><li>SpringBoot 自动配置欢迎页的 WelcomePageHandlerMapping，访问 / 能访问到 index.html</li><li>SpringBoot 自动配置了默认的 RequestMappingHandlerMapping</li><li>请求进来，挨个尝试所有的 HandlerMapping 看是否有请求信息 <ul><li>如果有就找到这个请求对应的 handler</li><li>如果没有就是下一个 handlerMapping</li></ul></li><li>我们需要一些自定义的映射处理，我们也可以自己给容器中放 <code>HandlerMapping</code>（<strong>自定义 HandlerMapping</strong>）。</li></ul><h3 id="_3-2-普通参数与基本注解" tabindex="-1"><a class="header-anchor" href="#_3-2-普通参数与基本注解" aria-hidden="true">#</a> 3.2 普通参数与基本注解</h3><h4 id="_3-2-1-注解" tabindex="-1"><a class="header-anchor" href="#_3-2-1-注解" aria-hidden="true">#</a> 3.2.1 注解</h4><p><code>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 常用参数注解 使用</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test1/{id}/owner/{username}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> pv<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userAgent<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@RequestHeader</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;inters&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inters<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">&quot;Admin-Token&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">,</span>
								 <span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">&quot;Admin-Token&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Cookie</span> cookie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;pv&quot;</span><span class="token punctuation">,</span> pv<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;userAgent&quot;</span><span class="token punctuation">,</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;headers&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;inters&quot;</span><span class="token punctuation">,</span> inters<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;params&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;===&gt;&quot;</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/save&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// @RequestAttribute 使用</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/gotoPage&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">gotoPage</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hkw666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token string">&quot;forward:success&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/success&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Object</span> msg1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msg_from_request&quot;</span><span class="token punctuation">,</span> msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msg_from_annotation&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span>
<span class="token comment">// 2、SpringBoot 默认是禁用了矩阵变量的功能</span>
<span class="token comment">//      手动开启：</span>
<span class="token comment">//      原理：对于路径的处理。UrlPathHelper 进行解析。</span>
<span class="token comment">//           removeSemicolonContent（移除分号内容）支持矩阵变量的</span>
<span class="token comment">// 3、矩阵变量必须有 url 路径变量才能被解析</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/cars/{path}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">carsSell</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">&quot;low&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> low<span class="token punctuation">,</span>
					<span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> brand<span class="token punctuation">,</span>
					<span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;low&quot;</span><span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;brand&quot;</span><span class="token punctuation">,</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>手动开启<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token comment">/*@Bean
    public WebMvcConfigurer webMvcConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void configurePathMatch(PathMatchConfigurer configurer) {
                UrlPathHelper urlPathHelper = new UrlPathHelper();
                urlPathHelper.setRemoveSemicolonContent(false);
                configurer.setUrlPathHelper(urlPathHelper);
            }
        };
    }*/</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UrlPathHelper</span> urlPathHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不移除;后面的内容。矩阵变量功能就可以生效</span>
        urlPathHelper<span class="token punctuation">.</span><span class="token function">setRemoveSemicolonContent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        configurer<span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span>urlPathHelper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>手动开启<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>

<span class="token comment">// /boss/1;age=20/2;age=10</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/boss/{bossId}/{empId}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">boss</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> pathVar <span class="token operator">=</span> <span class="token string">&quot;bossId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> bossAge<span class="token punctuation">,</span>
				<span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> pathVar <span class="token operator">=</span> <span class="token string">&quot;empId&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> empAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bossAge&quot;</span><span class="token punctuation">,</span> bossAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;empAge&quot;</span><span class="token punctuation">,</span> empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-servlet-api" tabindex="-1"><a class="header-anchor" href="#_3-2-2-servlet-api" aria-hidden="true">#</a> 3.2.2 Servlet API</h4><p><code>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</code></p><p><strong>底层使用 <code>ServletRequestMethodArgumentResolver</code> 解析以上的参数</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsParameter</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> paramType <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">WebRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">ServletRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">MultipartRequest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">HttpSession</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token punctuation">(</span>pushBuilder <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pushBuilder<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">Principal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">InputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>paramType<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> paramType <span class="token operator">||</span>
			<span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> paramType <span class="token operator">||</span>
			<span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> paramType <span class="token operator">||</span>
			<span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> paramType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-复杂参数" tabindex="-1"><a class="header-anchor" href="#_3-2-3-复杂参数" aria-hidden="true">#</a> 3.2.3 复杂参数</h4><p><code>Map、Model（map、model里面的数据会被放在request的请求域 request.setAttribute）、Errors/BindingResult、RedirectAttributes（重定向携带数据）、ServletResponse（response）、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span>  <span class="token class-name">Model</span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request 都是可以给request域中放数据，
request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Map、Model 类型的参数，会返回 mavContainer.getModel(); ---&gt; BindingAwareModelMap 是 Model 也是 Map 通过 mavContainer.getModel(); 获取到值</p><h4 id="_3-2-4-自定义对象参数" tabindex="-1"><a class="header-anchor" href="#_3-2-4-自定义对象参数" aria-hidden="true">#</a> 3.2.4 自定义对象参数</h4><p>可以自动类型转换与格式化，可以级联封装</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birth<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Pet</span> pet<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-pojo-封装过程" tabindex="-1"><a class="header-anchor" href="#_3-3-pojo-封装过程" aria-hidden="true">#</a> 3.3 POJO 封装过程</h3><ul><li><strong>ServletModelAttributeMethodProcessor</strong></li></ul><h3 id="_3-4-参数处理原理" tabindex="-1"><a class="header-anchor" href="#_3-4-参数处理原理" aria-hidden="true">#</a> 3.4 参数处理原理</h3><ul><li><p>HandlerMapping 中找到能处理请求的Handler（Controller.method()）</p></li><li><p>为当前 Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></p></li><li><p>适配器执行目标方法并确定方法参数的每一个值</p></li></ul><h4 id="_3-4-1-handleradapter" tabindex="-1"><a class="header-anchor" href="#_3-4-1-handleradapter" aria-hidden="true">#</a> 3.4.1 HandlerAdapter</h4><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image6.png" alt="springboot-image6" tabindex="0" loading="lazy"><figcaption>springboot-image6</figcaption></figure><p>0 - 支持方法上标注 @RequestMapping</p><p>1 - 支持函数式编程</p><p>xxxxxx</p><h4 id="_3-4-2-执行目标方法" tabindex="-1"><a class="header-anchor" href="#_3-4-2-执行目标方法" aria-hidden="true">#</a> 3.4.2 执行目标方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Actually invoke the handler.</span>
<span class="token comment">// DispatcherServlet -- doDispatch</span>
mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行目标方法</span>

<span class="token comment">// ServletInvocableHandlerMethod</span>
<span class="token class-name">Object</span> returnValue <span class="token operator">=</span> <span class="token function">invokeForRequest</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取方法的参数值</span>
<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-3-参数解析器-handlermethodargumentresolver" tabindex="-1"><a class="header-anchor" href="#_3-4-3-参数解析器-handlermethodargumentresolver" aria-hidden="true">#</a> 3.4.3 参数解析器 - HandlerMethodArgumentResolver</h4><p>确定将要执行的目标方法的每一个参数的值是什么；</p><p>SpringMVC 目标方法能写多少种参数类型，取决于参数解析器。</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image7.png" alt="springboot-image7" tabindex="0" loading="lazy"><figcaption>springboot-image7</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image8.png" alt="springboot-image8" tabindex="0" loading="lazy"><figcaption>springboot-image8</figcaption></figure><ul><li>当前解析器是否支持这种参数</li><li>支持就调用 resolveArgument 方法</li></ul><h4 id="_3-4-4-返回值处理器" tabindex="-1"><a class="header-anchor" href="#_3-4-4-返回值处理器" aria-hidden="true">#</a> 3.4.4 返回值处理器</h4><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image9.png" alt="springboot-image9" tabindex="0" loading="lazy"><figcaption>springboot-image9</figcaption></figure><h4 id="_3-4-5-如何确定目标方法每一个参数的值" tabindex="-1"><a class="header-anchor" href="#_3-4-5-如何确定目标方法每一个参数的值" aria-hidden="true">#</a> 3.4.5 如何确定目标方法每一个参数的值</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token class-name">InvocableHandlerMethod</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethodArgumentValues</span><span class="token punctuation">(</span><span class="token class-name">NativeWebRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>
		<span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> providedArgs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token class-name">MethodParameter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> <span class="token function">getMethodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token constant">EMPTY_ARGS</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>parameters<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">MethodParameter</span> parameter <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		parameter<span class="token punctuation">.</span><span class="token function">initParameterNameDiscovery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parameterNameDiscoverer<span class="token punctuation">)</span><span class="token punctuation">;</span>
		args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">findProvidedArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> providedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">supportsParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> <span class="token string">&quot;No suitable resolver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolvers<span class="token punctuation">.</span><span class="token function">resolveArgument</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataBinderFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// Leave stack trace for later, exception may actually be resolved and handled...</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">String</span> exMsg <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>exMsg <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>exMsg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getExecutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token function">formatArgumentError</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> exMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> args<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（1）挨个判断所有的参数解析器哪个支持解析这个参数</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">private</span> <span class="token class-name">HandlerMethodArgumentResolver</span> <span class="token function">getArgumentResolver</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">HandlerMethodArgumentResolver</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolverCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethodArgumentResolver</span> resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>resolver<span class="token punctuation">.</span><span class="token function">supportsParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				result <span class="token operator">=</span> resolver<span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolverCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>parameter<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">break</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）解析这个参数的值</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>调用各自 <span class="token class-name">HandlerMethodArgumentResolver</span> 的 resolveArgument 方法即可
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（3）自定义类型参数 封装 POJO</strong></p><p><code>--- ServletModelAttributeMethodProcessor 这个参数处理器支持</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 判断是否为简单类型</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSimpleValueType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Void</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> type <span class="token operator">&amp;&amp;</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> type <span class="token operator">&amp;&amp;</span>
			<span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPrimitiveOrWrapper</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">CharSequence</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">Number</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token class-name">Temporal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span>
			<span class="token constant">URI</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type <span class="token operator">||</span>
			<span class="token constant">URL</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type <span class="token operator">||</span>
			<span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type <span class="token operator">||</span>
			<span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> <span class="token function">resolveArgument</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> parameter<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span>
		<span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">WebDataBinderFactory</span> binderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>mavContainer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>binderFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">ModelFactory</span><span class="token punctuation">.</span><span class="token function">getNameForParameter</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ModelAttribute</span> ann <span class="token operator">=</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ModelAttribute</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>ann <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		mavContainer<span class="token punctuation">.</span><span class="token function">setBinding</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ann<span class="token punctuation">.</span><span class="token function">binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token class-name">Object</span> attribute <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">BindingResult</span> bindingResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>mavContainer<span class="token punctuation">.</span><span class="token function">containsAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		attribute <span class="token operator">=</span> mavContainer<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// Create attribute instance</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			attribute <span class="token operator">=</span> <span class="token function">createAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> binderFactory<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BindException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBindExceptionRequired</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// No BindingResult parameter -&gt; fail with BindException</span>
				<span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token comment">// Otherwise, expose null/empty value and associated BindingResult</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				attribute <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			bindingResult <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>bindingResult <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// Bean property binding and validation;</span>
		<span class="token comment">// skipped in case of binding failure on construction.</span>
		<span class="token class-name">WebDataBinder</span> binder <span class="token operator">=</span> binderFactory<span class="token punctuation">.</span><span class="token function">createBinder</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> attribute<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>binder<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mavContainer<span class="token punctuation">.</span><span class="token function">isBindingDisabled</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token function">bindRequestParameters</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			<span class="token function">validateIfApplicable</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBindExceptionRequired</span><span class="token punctuation">(</span>binder<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindException</span><span class="token punctuation">(</span>binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// Value type adaptation, also covering java.util.Optional</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			attribute <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>binder<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameter<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		bindingResult <span class="token operator">=</span> binder<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Add resolved attribute and BindingResult at the end of the model</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> bindingResultModel <span class="token operator">=</span> bindingResult<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mavContainer<span class="token punctuation">.</span><span class="token function">removeAttributes</span><span class="token punctuation">(</span>bindingResultModel<span class="token punctuation">)</span><span class="token punctuation">;</span>
	mavContainer<span class="token punctuation">.</span><span class="token function">addAllAttributes</span><span class="token punctuation">(</span>bindingResultModel<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> attribute<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</strong></p><p><strong>WebDataBinder：web 数据绑定器，将请求参数的值绑定到指定的 JavaBean 里面</strong></p><p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型，再次封装到JavaBean中</strong></p><p><strong>GenericConversionService：在设置每一个值的时候，找它里面的所有 converter 那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean -- Integer）</strong></p><p><strong>byte ---&gt; file</strong></p><p>@FunctionalInterface <strong>public interface</strong> Converter&lt;S, T&gt;</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image11.png" alt="springboot-image11" tabindex="0" loading="lazy"><figcaption>springboot-image11</figcaption></figure><p>未来我们可以给 WebDataBinder 里面放自己的 Converter；</p><p><strong>private static final class</strong> StringToNumber&lt;T <strong>extends</strong> Number&gt; <strong>implements</strong> Converter&lt;String, T&gt;</p><p><code>自定义 Converter</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//  WebMvcConfigurer 定制化 SpringMVC 的功能</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

				<span class="token annotation punctuation">@Override</span>
				<span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">// 啊猫,3</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token class-name">Pet</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						pet<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						pet<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token keyword">return</span> pet<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-6-目标方法执行完成" tabindex="-1"><a class="header-anchor" href="#_3-4-6-目标方法执行完成" aria-hidden="true">#</a> 3.4.6 目标方法执行完成</h4><p>将所有的数据都放在 <strong>ModelAndViewContainer</strong>：包含要去的页面地址 View，还包含 Model 数据。</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image12.png" alt="springboot-image12" tabindex="0" loading="lazy"><figcaption>springboot-image12</figcaption></figure><h4 id="_3-4-7-处理派发结果" tabindex="-1"><a class="header-anchor" href="#_3-4-7-处理派发结果" aria-hidden="true">#</a> 3.4.7 处理派发结果</h4><p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);</p><p>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">InternalResourceView</span>：
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">renderMergedOutputModel</span><span class="token punctuation">(</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token comment">// Expose the model object as request attributes.</span>
	<span class="token function">exposeModelAsRequestAttributes</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Expose helpers as request attributes, if any.</span>
	<span class="token function">exposeHelpers</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Determine the path for the request dispatcher.</span>
	<span class="token class-name">String</span> dispatcherPath <span class="token operator">=</span> <span class="token function">prepareForRendering</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Obtain a RequestDispatcher for the target resource (typically a JSP).</span>
	<span class="token class-name">RequestDispatcher</span> rd <span class="token operator">=</span> <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> dispatcherPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>rd <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">&quot;Could not get RequestDispatcher for [&quot;</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
				<span class="token string">&quot;]: Check that the corresponding file exists within your web application archive!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// If already included or response already committed, perform include, else forward.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Including [&quot;</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		rd<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">// Note: The forwarded resource is supposed to determine the content type itself.</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Forwarding to [&quot;</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		rd<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 暴露模型作为请求域属性</span>
<span class="token comment">// Expose the model object as request attributes.</span>
<span class="token function">exposeModelAsRequestAttributes</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exposeModelAsRequestAttributes</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> model<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token comment">// 将 model 中的所有数据遍历挨个放在请求域中</span>
	model<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-数据响应与内容协商" tabindex="-1"><a class="header-anchor" href="#_4-数据响应与内容协商" aria-hidden="true">#</a> 4. 数据响应与内容协商</h2><h3 id="_4-1-响应-json" tabindex="-1"><a class="header-anchor" href="#_4-1-响应-json" aria-hidden="true">#</a> 4.1 响应 JSON</h3><h4 id="_4-1-1-jackson-jar-responsebody" tabindex="-1"><a class="header-anchor" href="#_4-1-1-jackson-jar-responsebody" aria-hidden="true">#</a> 4.1.1 jackson.jar + @ResponseBody</h4><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903082956930.png" alt="image-20210903082956930" tabindex="0" loading="lazy"><figcaption>image-20210903082956930</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903083122685.png" alt="image-20210903083122685" tabindex="0" loading="lazy"><figcaption>image-20210903083122685</figcaption></figure><p>给前端自动返回 JSON 数据</p><h5 id="_1、返回值解析器" tabindex="-1"><a class="header-anchor" href="#_1、返回值解析器" aria-hidden="true">#</a> 1、返回值解析器</h5><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image13.png" alt="springboot-image13" tabindex="0" loading="lazy"><figcaption>springboot-image13</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span>
		<span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token class-name">HandlerMethodReturnValueHandler</span> handler <span class="token operator">=</span> <span class="token function">selectHandler</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown return value type: &quot;</span> <span class="token operator">+</span> returnType<span class="token punctuation">.</span><span class="token function">getParameterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	handler<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RequestResponseBodyMethodProcessor</span>  	
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> returnValue<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span>
		<span class="token class-name">ModelAndViewContainer</span> mavContainer<span class="token punctuation">,</span> <span class="token class-name">NativeWebRequest</span> webRequest<span class="token punctuation">)</span>
		<span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>

	mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ServletServerHttpRequest</span> inputMessage <span class="token operator">=</span> <span class="token function">createInputMessage</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ServletServerHttpResponse</span> outputMessage <span class="token operator">=</span> <span class="token function">createOutputMessage</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span>
	<span class="token comment">// 使用消息转换器进行写出操作</span>
	<span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、返回值解析器原理" tabindex="-1"><a class="header-anchor" href="#_2、返回值解析器原理" aria-hidden="true">#</a> 2、返回值解析器原理</h5><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image14.png" alt="springboot-image14" tabindex="0" loading="lazy"><figcaption>springboot-image14</figcaption></figure><p>（1）返回值处理器判断是否支持这种类型返回值 <code>supportsReturnType</code></p><p>（2）返回值处理器调用 <code>handleReturnValue</code> 进行处理</p><p>（3）RequestResponseBodyMethodProcessor 可以处理返回值标了 @ResponseBody 注解的</p><p>​ <strong>利用 MessageConverters 进行处理，将数据写为 json</strong></p><p>​ ①内容协商（浏览器默认会以请求头的方式告诉服务器它能接收什么类型的数据）</p><p>​ ②服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</p><p>​ ③SpringMVC 会挨个遍历所有容器底层的 HttpMessageCoverter，看谁能处理？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>得到 <span class="token class-name">MappingJackson2HttpMessageConverter</span> 可以将对象写为 json
利用 <span class="token class-name">MappingJackson2HttpMessageConverter</span> 将对象转为 json 再写出去
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image15.png" alt="springboot-image15" tabindex="0" loading="lazy"><figcaption>springboot-image15</figcaption></figure><h4 id="_4-1-2-springmvc-到底支持哪些返回值" tabindex="-1"><a class="header-anchor" href="#_4-1-2-springmvc-到底支持哪些返回值" aria-hidden="true">#</a> 4.1.2 SpringMVC 到底支持哪些返回值</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ModelAndView</span>
<span class="token class-name">Model</span>
<span class="token class-name">View</span>
<span class="token class-name">ResponseEntity</span> 
<span class="token class-name">ResponseBodyEmitter</span>
<span class="token class-name">StreamingResponseBody</span>
<span class="token class-name">HttpEntity</span>
<span class="token class-name">HttpHeaders</span>
<span class="token class-name">Callable</span>
<span class="token class-name">DeferredResult</span>
<span class="token class-name">ListenableFuture</span>
<span class="token class-name">CompletionStage</span>
<span class="token class-name">WebAsyncTask</span>
有 <span class="token annotation punctuation">@ModelAttribute</span> 且为对象类型的
<span class="token annotation punctuation">@ResponseBody</span> 注解 <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token class-name">RequestResponseBodyMethodProcessor</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-3-httpmessageconverter-原理" tabindex="-1"><a class="header-anchor" href="#_4-1-3-httpmessageconverter-原理" aria-hidden="true">#</a> 4.1.3 HttpMessageConverter 原理</h4><h5 id="_1、messageconverter-规范" tabindex="-1"><a class="header-anchor" href="#_1、messageconverter-规范" aria-hidden="true">#</a> 1、MessageConverter 规范</h5><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image16.png" alt="springboot-image16" tabindex="0" loading="lazy"><figcaption>springboot-image16</figcaption></figure><p>HttpMessageConverter：看是否支持将此 Class 类型的对象，转为 MediaType 类型的数据</p><p>例子：Person 对象转为 JSON，或者将 JSON 转为 Person</p><h5 id="_2、默认的-messageconverter" tabindex="-1"><a class="header-anchor" href="#_2、默认的-messageconverter" aria-hidden="true">#</a> 2、默认的 MessageConverter</h5><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image17.png" alt="springboot-image17" tabindex="0" loading="lazy"><figcaption>springboot-image17</figcaption></figure><p>0 - 只支持Byte类型的 1 - String 2 - String 3 - Resource 4 - ResourceRegion 5 - DOMSource**.class** \\ SAXSource**.class** \\ StAXSource**.class** \\StreamSource**.class** \\Source**.class** 6 - MultiValueMap 7 - true 8 - true 9 - 支持注解方式xml处理的。</p><p><strong>最终 MappingJackson2HttpMessageConverter 把对象转为 JSON（利用底层的 jackson 的 objectMapping 转换的）</strong></p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image18.png" alt="springboot-image18" tabindex="0" loading="lazy"><figcaption>springboot-image18</figcaption></figure><h3 id="_4-2-内容协商" tabindex="-1"><a class="header-anchor" href="#_4-2-内容协商" aria-hidden="true">#</a> 4.2 内容协商</h3><p>根据客户端接收能力不同，返回不同媒体类型的数据</p><h4 id="_4-2-1-引入-xml-依赖" tabindex="-1"><a class="header-anchor" href="#_4-2-1-引入-xml-依赖" aria-hidden="true">#</a> 4.2.1 引入 xml 依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-postman-分别测试返回-json-和-xml" tabindex="-1"><a class="header-anchor" href="#_4-2-2-postman-分别测试返回-json-和-xml" aria-hidden="true">#</a> 4.2.2 postman 分别测试返回 json 和 xml</h4><p>只需要改变请求头中 Accept 字段。Http 协议中规定，告诉服务器客户端可以接收的数据类型。</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903210844433.png" alt="image-20210903210844433" tabindex="0" loading="lazy"><figcaption>image-20210903210844433</figcaption></figure><h4 id="_4-2-3-开启浏览器参数方式内容协商功能" tabindex="-1"><a class="header-anchor" href="#_4-2-3-开启浏览器参数方式内容协商功能" aria-hidden="true">#</a> 4.2.3 开启浏览器参数方式内容协商功能</h4><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>
      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启请求参数内容协商模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送请求：</p>`,149),P={href:"http://localhost:8080/test/user?format=json",target:"_blank",rel:"noopener noreferrer"},A=n("figure",null,[n("img",{src:"https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903212026938.png",alt:"image-20210903212026938",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20210903212026938")],-1),H={href:"http://localhost:8080/test/user?format=xml",target:"_blank",rel:"noopener noreferrer"},E=e(`<figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903212157506.png" alt="image-20210903212157506" tabindex="0" loading="lazy"><figcaption>image-20210903212157506</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image19.png" alt="springboot-image19" tabindex="0" loading="lazy"><figcaption>springboot-image19</figcaption></figure><p>确定客户端接收什么样的内容类型</p><p>（1）<code>Parameter 策略优先确定是要返回 json 数据（获取请求头中的 format 的值）</code></p><p>（2）最终进行内容协商<code>返回给客户端 json</code> 即可</p><h4 id="_4-2-4-内容协商原理" tabindex="-1"><a class="header-anchor" href="#_4-2-4-内容协商原理" aria-hidden="true">#</a> 4.2.4 内容协商原理</h4><p>（1）\`判断当前响应头中是否已经有确定的媒体类型（MediaType）。</p><p><strong>（2）获取客户端（Postman、浏览器）支持接收的内容类型。（获取客户端 Accept 请求头字段）【application/xml】</strong></p><p>​ ①<strong>contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略</strong></p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image20.png" alt="springboot-image20" tabindex="0" loading="lazy"><figcaption>springboot-image20</figcaption></figure><p>​ ②<strong>HeaderContentNegotiatonStrategy 确定客户端可以接收的内容类型</strong></p><p>（3）遍历循环所有当前系统的 <code>MessageConverter</code>，看谁支持操作这个对象（Person）</p><p>（4）找到支持操作 Person 的 converter，把 converter 支持的媒体类型统计出来</p><p>（5）客户端需要【application.xml】，服务端能力-【10种-json、xml】</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image21.png" alt="springboot-image21" tabindex="0" loading="lazy"><figcaption>springboot-image21</figcaption></figure><p>（6）进行内容协商的最佳匹配媒体类型</p><p>（7）用 支持 将对象转为 最佳匹配类型的 converter，调用它进行转化</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image21.png" alt="springboot-image21" tabindex="0" loading="lazy"><figcaption>springboot-image21</figcaption></figure><p>导入了 jackson 处理 xml 的包，xml 的 converter 就会自动进来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">WebMvcConfigurationSupport</span>
jackson2XmlPresent <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>jackson2XmlPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Jackson2ObjectMapperBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">Jackson2ObjectMapperBuilder</span><span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		builder<span class="token punctuation">.</span><span class="token function">applicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	messageConverters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2XmlHttpMessageConverter</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-5-自定义-messageconverter" tabindex="-1"><a class="header-anchor" href="#_4-2-5-自定义-messageconverter" aria-hidden="true">#</a> 4.2.5 自定义 MessageConverter</h4><p>（1）<code>@ResponseBody 响应数据出去</code>，调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理</p><p>（2）Processor 处理方法返回值，通过 <strong>MessageConverter</strong> 处理</p><p>（3）所有 <strong>MessageCOnverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）</p><p>（4）内容协商找到最终的 <strong>MessageConverter</strong></p><p>SpringMVC 的什么功能，一个入口 --- 给容器中添加一个 WebMvcConfigurer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 自定义 Converter
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMessageConverter</span> <span class="token keyword">implements</span> <span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token class-name">Class</span> aClass<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token class-name">Class</span> aClass<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> aClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaTypes</span><span class="token punctuation">(</span><span class="token string">&quot;application/x-hkw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Class</span> aClass<span class="token punctuation">,</span> <span class="token class-name">HttpInputMessage</span> httpInputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">,</span> <span class="token class-name">HttpOutputMessage</span> httpOutputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 自定义协议数据的导出</span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写出去</span>
        <span class="token class-name">OutputStream</span> body <span class="token operator">=</span> httpOutputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        body<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong><strong>我们除了完全自定义外？SpringBoot有没有为我们提供基于配置文件的快速修改媒体类型功能？怎么配置呢？【提示：参照SpringBoot官方文档web开发内容协商章节】</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>
      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启请求参数内容协商模式</span>
      <span class="token key atrule">media-types</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">hh</span><span class="token punctuation">:</span> application/x<span class="token punctuation">-</span>hkw<span class="token punctuation">}</span> <span class="token comment"># 配置媒体类型匹配功能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903235907194.png" alt="image-20210903235907194" tabindex="0" loading="lazy"><figcaption>image-20210903235907194</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210903235941647.png" alt="image-20210903235941647" tabindex="0" loading="lazy"><figcaption>image-20210903235941647</figcaption></figure><h2 id="_5-视图解析与模板引擎" tabindex="-1"><a class="header-anchor" href="#_5-视图解析与模板引擎" aria-hidden="true">#</a> 5. 视图解析与模板引擎</h2><p>视图解析：<strong>SpringBoot 默认不支持 JSP，需要引入第三方模板引擎技术实现页面渲染。</strong></p><h3 id="_5-1-视图解析" tabindex="-1"><a class="header-anchor" href="#_5-1-视图解析" aria-hidden="true">#</a> 5.1 视图解析</h3><h4 id="_5-1-1-视图解析原理流程" tabindex="-1"><a class="header-anchor" href="#_5-1-1-视图解析原理流程" aria-hidden="true">#</a> 5.1.1 视图解析原理流程</h4><p>（1）目标方法处理的过程中，所有数据都会被放在 <strong><code>ModelAndViewContainer</code></strong> 里面，<strong>包括数据和视图地址</strong></p><p>（2）方法的参数是一个自定义类型对象（从请求参数中确定的），把它重新放在 <strong><code>ModelAndViewContainer</code></strong></p><p>（3）<strong>任何目标方法执行完成以后都会返回 ModelAndView（数据和视图地址）</strong></p><p>（4）<strong>processDespatchResult 处理派发结果（页面该如何响应）</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> 进行页面渲染逻辑
<span class="token operator">--</span><span class="token operator">-</span> 根据方法的 <span class="token class-name">String</span> 返回值得到 <span class="token class-name">View</span> 对象【定义了页面的渲染逻辑】
	<span class="token operator">--</span><span class="token operator">-</span> <span class="token number">1</span>、所有的视图解析器尝试是否能根据当前返回值得到 <span class="token class-name">View</span> 对象
    <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">2</span>、得到了 redirect<span class="token operator">:</span><span class="token operator">/</span>main<span class="token punctuation">.</span>html <span class="token operator">--</span><span class="token operator">-&gt;</span> <span class="token class-name">Thymeleaf</span> <span class="token keyword">new</span> <span class="token class-name">RedirectView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">3</span>、<span class="token class-name">ContentNegotiationViewResolver</span> 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。
    <span class="token operator">--</span><span class="token operator">-</span> <span class="token number">4</span>、view<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">getModelInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> 视图对象调用自定义的 render 进行页面渲染工作
        <span class="token operator">--</span><span class="token operator">-</span> <span class="token class-name">RedirectView</span> 如何渲染【重定向到一个页面】
        	①获取目标 url 地址
        	②response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>encodedURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>视图解析：
	- 返回值以 forward: 开始：new InternalResourceView(forwardUrl); ---&gt; 转发
	- request.getRequestDispatcher(path).forward(request, response);
	- 返回值以 redirect: 开始：new RedirectView() ---&gt; render 就是重定向
	- 返回值是普通字符串：new ThymeleafView() ---&gt; thymeleaf 模板渲染
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image23.png" alt="springboot-image23" tabindex="0" loading="lazy"><figcaption>springboot-image23</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image24.png" alt="springboot-image24" tabindex="0" loading="lazy"><figcaption>springboot-image24</figcaption></figure><h3 id="_5-2-模板引擎-thymeleaf" tabindex="-1"><a class="header-anchor" href="#_5-2-模板引擎-thymeleaf" aria-hidden="true">#</a> 5.2 模板引擎 - Thymeleaf</h3><h4 id="_5-2-1-thymeleaf-简介" tabindex="-1"><a class="header-anchor" href="#_5-2-1-thymeleaf-简介" aria-hidden="true">#</a> 5.2.1 thymeleaf 简介</h4><p>Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text. --- <strong>现代化、服务端 Java 模板引擎</strong></p><h4 id="_5-2-2-基本语法" tabindex="-1"><a class="header-anchor" href="#_5-2-2-基本语法" aria-hidden="true">#</a> 5.2.2 基本语法</h4><h5 id="_1、表达式" tabindex="-1"><a class="header-anchor" href="#_1、表达式" aria-hidden="true">#</a> 1、表达式</h5>`,49),B=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"名称"),n("th",{style:{"text-align":"center"}},"语法"),n("th",{style:{"text-align":"center"}},"用途")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"变量取值"),n("td",{style:{"text-align":"center"},"css-module":"."},"$"),n("td",{style:{"text-align":"center"}},"获取请求域、session 域、对象等值")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"选择变量"),n("td",{style:{"text-align":"center"},"css-module":"."},"*"),n("td",{style:{"text-align":"center"}},"获取上下文对象值")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"消息"),n("td",{style:{"text-align":"center"},"css-module":"."},"#"),n("td",{style:{"text-align":"center"}},"获取国际化等值")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"链接"),n("td",{style:{"text-align":"center"},"css-module":"."},"@"),n("td",{style:{"text-align":"center"}},"生成链接")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"片段表达式"),n("td",{style:{"text-align":"center"},"css-module":"."},"~"),n("td",{style:{"text-align":"center"}},"jsp:include 作用，引入公共页面片段")])])],-1),W=e(`<h5 id="_2、字面量" tabindex="-1"><a class="header-anchor" href="#_2、字面量" aria-hidden="true">#</a> 2、字面量</h5><p>文本值：<strong>&#39;one text&#39; , &#39;Another one!&#39;</strong> , ...</p><p>数字：<strong>0 , 34 , 3.0 , 12.4</strong> , ...</p><p>布尔值：<strong>true , false</strong></p><p>空值：<strong>null</strong></p><p>变量：one , two , ... 【变量不能有空格】</p><h5 id="_3、文本操作" tabindex="-1"><a class="header-anchor" href="#_3、文本操作" aria-hidden="true">#</a> 3、文本操作</h5><p>字符串拼接：+</p><p>变量替换：<strong>|The name is \${name}|</strong></p><h5 id="_4、数学运算" tabindex="-1"><a class="header-anchor" href="#_4、数学运算" aria-hidden="true">#</a> 4、数学运算</h5><p>运算符：<strong>+ , - , * , / , %</strong></p><h5 id="_5、布尔运算" tabindex="-1"><a class="header-anchor" href="#_5、布尔运算" aria-hidden="true">#</a> 5、布尔运算</h5><p>运算符：<strong>and , or</strong></p><p>一元运算：<strong>! , not</strong></p><h5 id="_6、比较运算" tabindex="-1"><a class="header-anchor" href="#_6、比较运算" aria-hidden="true">#</a> 6、比较运算</h5><p>比较：&gt; , &lt; , &gt;= , &lt;= (<strong>gt , lt , ge, le</strong>)</p><p>等式：== , != (<strong>eq , ne</strong>)</p><h5 id="_7、条件运算" tabindex="-1"><a class="header-anchor" href="#_7、条件运算" aria-hidden="true">#</a> 7、条件运算</h5><p>if-then：<strong>(if) ? (then)</strong></p><p>if-then-else：<strong>(if) ? (then) : (else)</strong></p><p>default：<strong>(value) ?: (defaultvalue)</strong></p><h5 id="_8、特殊操作" tabindex="-1"><a class="header-anchor" href="#_8、特殊操作" aria-hidden="true">#</a> 8、特殊操作</h5><p>无操作：_</p><h4 id="_5-2-3-设置属性值-th-attr" tabindex="-1"><a class="header-anchor" href="#_5-2-3-设置属性值-th-attr" aria-hidden="true">#</a> 5.2.3 设置属性值 -th:attr</h4><p>设置单个值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subscribe.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>action=@{/subscribe}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Subscribe!<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value=#{subscribe.submit}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置多个值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../images/gtvglogo.png<span class="token punctuation">&quot;</span></span>  <span class="token attr-name"><span class="token namespace">th:</span>attr</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上两个的代替写法 th:xxx</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Subscribe!<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{subscribe.submit}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subscribe.html<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/subscribe}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所有 H5 兼容的标签写法</p>`,31),T={href:"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes",target:"_blank",rel:"noopener noreferrer"},F=e(`<h4 id="_5-2-4-迭代" tabindex="-1"><a class="header-anchor" href="#_5-2-4-迭代" aria-hidden="true">#</a> 5.2.4 迭代</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prod : \${prods}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.name}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.price}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.inStock}? #{true} : #{false}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prod,iterStat : \${prods}<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${iterStat.odd}? &#39;odd&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.name}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.price}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${prod.inStock}? #{true} : #{false}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2-5-条件运算" tabindex="-1"><a class="header-anchor" href="#_5-2-5-条件运算" aria-hidden="true">#</a> 5.2.5 条件运算</h5><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>comments.html<span class="token punctuation">&quot;</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/product/comments(prodId=\${prod.id})}<span class="token punctuation">&quot;</span></span>
<span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${not #lists.isEmpty(prod.comments)}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${user.role}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>admin&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User is an administrator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{roles.manager}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User is a manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>*<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User is some other thing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-6-属性优先级" tabindex="-1"><a class="header-anchor" href="#_5-2-6-属性优先级" aria-hidden="true">#</a> 5.2.6 属性优先级</h4><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210904105513168.png" alt="image-20210904105513168" tabindex="0" loading="lazy"><figcaption>image-20210904105513168</figcaption></figure><h3 id="_5-3-thymeleaf-使用" tabindex="-1"><a class="header-anchor" href="#_5-3-thymeleaf-使用" aria-hidden="true">#</a> 5.3 Thymeleaf 使用</h3><h4 id="_5-3-1-引入-starter" tabindex="-1"><a class="header-anchor" href="#_5-3-1-引入-starter" aria-hidden="true">#</a> 5.3.1 引入 starter</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-2-自动配置好了-thymeleaf" tabindex="-1"><a class="header-anchor" href="#_5-3-2-自动配置好了-thymeleaf" aria-hidden="true">#</a> 5.3.2 自动配置好了 thymeleaf</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">ThymeleafProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">TemplateMode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SpringTemplateEngine</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">WebMvcAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">WebFluxAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置好的策略：</p><ul><li>所有 thymeleaf 的配置值都在 <strong>ThymeleafProperties</strong></li><li>配置好了 <strong>SpringTemplateEngine</strong></li><li>配好了 <strong>ThymeleafViewResolver</strong></li><li>我们只需要直接开发页面</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;classpath:/templates/&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_SUFFIX</span> <span class="token operator">=</span> <span class="token string">&quot;.html&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// xxx.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-3-页面开发" tabindex="-1"><a class="header-anchor" href="#_5-3-3-页面开发" aria-hidden="true">#</a> 5.3.3 页面开发</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.thymeleaf.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${msg}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.hl1015.top<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${link}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>HL1015<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-构建后台管理系统" tabindex="-1"><a class="header-anchor" href="#_5-4-构建后台管理系统" aria-hidden="true">#</a> 5.4 构建后台管理系统</h3><h5 id="_5-4-1-项目创建" tabindex="-1"><a class="header-anchor" href="#_5-4-1-项目创建" aria-hidden="true">#</a> 5.4.1 项目创建</h5><ul><li>thymeleaf、web-starter、devtools、lombok</li></ul><h5 id="_5-4-2-静态资源处理" tabindex="-1"><a class="header-anchor" href="#_5-4-2-静态资源处理" aria-hidden="true">#</a> 5.4.2 静态资源处理</h5><ul><li>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</li></ul><h5 id="_5-4-3-路径构建" tabindex="-1"><a class="header-anchor" href="#_5-4-3-路径构建" aria-hidden="true">#</a> 5.4.3 路径构建</h5><ul><li>th:action=&quot;@{/login}&quot;</li></ul><h5 id="_5-4-4-模板抽取" tabindex="-1"><a class="header-anchor" href="#_5-4-4-模板抽取" aria-hidden="true">#</a> 5.4.4 模板抽取</h5><ul><li>th:insert/replace/include</li></ul><h5 id="_5-4-5-页面跳转" tabindex="-1"><a class="header-anchor" href="#_5-4-5-页面跳转" aria-hidden="true">#</a> 5.4.5 页面跳转</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">// 把登陆成功的用户保存起来</span>
		session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 登录成功重定向到 main.html; 重定向防止表单重复提交</span>
		<span class="token keyword">return</span> <span class="token string">&quot;redirect:/main.html&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
		model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;账号密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 回到登录页面</span>
		<span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-4-6-数据渲染" tabindex="-1"><a class="header-anchor" href="#_5-4-6-数据渲染" aria-hidden="true">#</a> 5.4.6 数据渲染</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dynamic_table&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dynamic_table</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token comment">// 表格内容的遍历</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;lisi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123444&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;haha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaaaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;hehe &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaddd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token string">&quot;table/dynamic_table&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span>table <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;display table table-bordered&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;hidden-table-info&quot;</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>thead<span class="token punctuation">&gt;</span></span>
<span class="token generics"><span class="token punctuation">&lt;</span>tr<span class="token punctuation">&gt;</span></span>
	<span class="token generics"><span class="token punctuation">&lt;</span>th<span class="token punctuation">&gt;</span></span>#<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>
	<span class="token generics"><span class="token punctuation">&lt;</span>th<span class="token punctuation">&gt;</span></span>用户名<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>
	<span class="token generics"><span class="token punctuation">&lt;</span>th<span class="token punctuation">&gt;</span></span>密码<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>thead<span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>tbody<span class="token punctuation">&gt;</span></span>
<span class="token operator">&lt;</span>tr <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;gradeX&quot;</span> th<span class="token operator">:</span>each<span class="token operator">=</span><span class="token string">&quot;user,stats:\${users}&quot;</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">&quot;\${stats.count}&quot;</span><span class="token operator">&gt;</span><span class="token class-name">Trident</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>td th<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">&quot;\${user.userName}&quot;</span><span class="token operator">&gt;</span><span class="token class-name">Internet</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
	<span class="token generics"><span class="token punctuation">&lt;</span>td <span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>user<span class="token punctuation">.</span>password<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>tbody<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-拦截器" tabindex="-1"><a class="header-anchor" href="#_6-拦截器" aria-hidden="true">#</a> 6. 拦截器</h2><h3 id="_6-1-handlerinterceptor-接口" tabindex="-1"><a class="header-anchor" href="#_6-1-handlerinterceptor-接口" aria-hidden="true">#</a> 6.1 HandlerInterceptor 接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 登录检查
 * 1、配置好拦截器要拦截哪些请求
 * 2、把这些配置放在容器中
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 目标方法执行之前
     * <span class="token keyword">@param</span> <span class="token parameter">request</span>
     * <span class="token keyword">@param</span> <span class="token parameter">response</span>
     * <span class="token keyword">@param</span> <span class="token parameter">handler</span>
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">String</span> requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;preHandle 拦截的请求路径是{}&quot;</span><span class="token punctuation">,</span> requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 登录检查逻辑</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> loginUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;loginUser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 放行</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 拦截住，未登录，跳转到登录页</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;请先登录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// re.sendRedirect(&quot;/&quot;);</span>
        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 目标方法执行完成以后
     * <span class="token keyword">@param</span> <span class="token parameter">request</span>
     * <span class="token keyword">@param</span> <span class="token parameter">response</span>
     * <span class="token keyword">@param</span> <span class="token parameter">handler</span>
     * <span class="token keyword">@param</span> <span class="token parameter">modelAndView</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;postHandle执行{}&quot;</span><span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 页面渲染以后
     * <span class="token keyword">@param</span> <span class="token parameter">request</span>
     * <span class="token keyword">@param</span> <span class="token parameter">response</span>
     * <span class="token keyword">@param</span> <span class="token parameter">handler</span>
     * <span class="token keyword">@param</span> <span class="token parameter">ex</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;afterCompletion执行异常{}&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-配置拦截器" tabindex="-1"><a class="header-anchor" href="#_6-2-配置拦截器" aria-hidden="true">#</a> 6.2 配置拦截器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 1、编写一个拦截器实现 HandlerInterceptor 接口
 * 2、拦截器注册到容器中（实现 WebMvcConfigurer 的 addInterceptors）
 * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 所有请求都被拦截包括静态资源</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/fonts/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/images/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放行的请求</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-拦截器原理" tabindex="-1"><a class="header-anchor" href="#_6-3-拦截器原理" aria-hidden="true">#</a> 6.3 拦截器原理</h3><ul><li>根据当前请求，找到 <strong>HandlerExecutionChain</strong>【可以处理请求的 handler 以及 handler 的所有拦截器】</li><li>先来 <strong>顺序执行</strong> 所有拦截器的 <code>preHandler</code> 方法 <ul><li>如果当前拦截器 preHandler 返回 true，则执行下一个拦截器的 preHandler</li><li>如果当前拦截器返回为 false，直接倒序执行所有已经执行了的拦截器的 afterCompletion 方法</li></ul></li><li><strong>如果任何一个拦截器返回为 false，直接跳出不执行目标方法</strong></li><li><strong>所有拦截器都返回 true，执行目标方法</strong></li><li><strong>倒序执行所有拦截器的 <code>postHandle</code> 方法</strong></li><li><strong>前面的步骤有任何异常都会直接倒序触发 <code>afterCompletion</code> 方法</strong></li><li>页面成功渲染完成以后，也会倒序触发 afterCompletion 方法</li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image25.png" alt="springboot-image25" tabindex="0" loading="lazy"><figcaption>springboot-image25</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image26.png" alt="springboot-image26" tabindex="0" loading="lazy"><figcaption>springboot-image26</figcaption></figure><h2 id="_7-文件上传" tabindex="-1"><a class="header-anchor" href="#_7-文件上传" aria-hidden="true">#</a> 7. 文件上传</h2><h3 id="_7-1-页面表单" tabindex="-1"><a class="header-anchor" href="#_7-1-页面表单" aria-hidden="true">#</a> 7.1 页面表单</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/upload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-文件上传代码" tabindex="-1"><a class="header-anchor" href="#_7-2-文件上传代码" aria-hidden="true">#</a> 7.2 文件上传代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * MultipartFile 自动封装上传过来的文件
 * <span class="token keyword">@param</span> <span class="token parameter">email</span>
 * <span class="token keyword">@param</span> <span class="token parameter">username</span>
 * <span class="token keyword">@param</span> <span class="token parameter">headerImg</span>
 * <span class="token keyword">@param</span> <span class="token parameter">photos</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span>
					 <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
					 <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;headerImg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> headerImg<span class="token punctuation">,</span>
					 <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">&quot;photos&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

	log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;上传的信息：email={},username={},headerImg={},photos={}&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">,</span> username<span class="token punctuation">,</span> headerImg<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> photos<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headerImg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token comment">// 保存到文件服务器，OSS服务器</span>
		<span class="token class-name">String</span> originalFilename <span class="token operator">=</span> headerImg<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		headerImg<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;H:\\\\cache\\\\&quot;</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo <span class="token operator">:</span> photos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>photo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token class-name">String</span> originalFilename <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;H:\\\\cache\\\\&quot;</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-自动配置原理" tabindex="-1"><a class="header-anchor" href="#_7-3-自动配置原理" aria-hidden="true">#</a> 7.3 自动配置原理</h3><p><strong>文件上传自动配置类-MultipartAutoConfiguration-MultipartProperties</strong></p><ul><li><p>自动配置好了 <strong><code>StandardServletMultipartResolver【文件上传解析器】</code></strong></p></li><li><p>原理步骤</p><ul><li><strong>1、请求进来使用文件上传解析器判断</strong>（isMultipart）<strong>并封装</strong>（resolveMultipart，返回 MultipartHttpServletRequest）<strong>文件上传请求</strong></li><li><strong>2、参数解析器来解析请求中的文件内容封装成 MultipartFile</strong></li><li><strong>3、将 request 中文件信息封装为一个 Map：MultiValueMap&lt;String, MultipartFile&gt;</strong></li></ul><blockquote><p><strong>FileCopyUtils：实现文件流的拷贝</strong></p></blockquote></li></ul><h2 id="_8-异常处理" tabindex="-1"><a class="header-anchor" href="#_8-异常处理" aria-hidden="true">#</a> 8. 异常处理</h2><h3 id="_8-1-错误处理" tabindex="-1"><a class="header-anchor" href="#_8-1-错误处理" aria-hidden="true">#</a> 8.1 错误处理</h3><h4 id="_8-1-1-默认规则" tabindex="-1"><a class="header-anchor" href="#_8-1-1-默认规则" aria-hidden="true">#</a> 8.1.1 默认规则</h4><ul><li><p>默认情况下，Spring Boot 提供 /error 处理所有错误的映射</p></li><li><p>对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP 状态和异常消息的详细信息。</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210904132545589.png" alt="image-20210904132545589" tabindex="0" loading="lazy"><figcaption>image-20210904132545589</figcaption></figure></li><li><p>对于浏览器客户端，响应一个 &quot;whitelabel&quot; 错误视图，以 HTML 格式呈现相同的数据</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210904132610650.png" alt="image-20210904132610650" tabindex="0" loading="lazy"><figcaption>image-20210904132610650</figcaption></figure></li><li><p><strong>要对其进行自定义，添加 <code>View</code> 解析为 <code>error</code></strong></p></li><li><p>要完全替换默认行为，可以实现 <code>ErrorController</code> 并注册该类型的 Bean 定义，或添加 <code>ErrorAttributes</code> 类型的组件 以使用现有机制来替换其内容</p></li><li><p>error/ 下的 4xx，5xx 页面会被自动解析</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210904133146949.png" alt="image-20210904133146949" tabindex="0" loading="lazy"><figcaption>image-20210904133146949</figcaption></figure></li></ul><h4 id="_8-1-2-定制错误处理逻辑" tabindex="-1"><a class="header-anchor" href="#_8-1-2-定制错误处理逻辑" aria-hidden="true">#</a> 8.1.2 定制错误处理逻辑</h4><ul><li><p>自定义错误页</p><ul><li>error/404.html、error/5xx.html，有精确的错误状态码就匹配精确，没有就找 4xx.html，如果都没有就触发白页</li></ul></li><li><p>@ControllerAdvice + @ExceptionHandler 处理全局异常，<strong>底层是 ExceptionHandlerExceptionResolver 支持的</strong></p></li><li><p><code>@ResponseStatus + 自定义异常</code>，底层是 <strong>ResponseStatusExceptionResolver，将 @ResponseStatus 注解的信息底层调用 response.sendError(statusCode, resolvedReason); tomcat 发送的 /error</strong></p></li><li><p><code>Spring 底层的异常，如 参数类型转换异常</code>。<strong>DefaultHandlerExceptionResolver 处理框架底层的异常</strong></p><ul><li>response.sendError(HttpServletResponse.<strong>SC_BAD_REQUEST</strong>, ex.getMessage());</li></ul></li><li><p><code>自定义实现 HandlerExceptionResolver 处理异常</code>，可以<code>作为默认的全局异常处理规则</code></p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image27.png" alt="springboot-image27" tabindex="0" loading="lazy"><figcaption>springboot-image27</figcaption></figure></li><li><p><strong>ErrorViewResolver 实现自定义处理异常</strong></p><ul><li>response.sendError，error 请求就会转给 controller</li><li>如果你的异常没有任何人能处理，tomcat 底层 response.sendError，error 请求就会转给 controller</li><li><strong><span style="color:red;">basicErrorController 要去的页面地址是</span> ErrorViewResolver</strong></li></ul></li></ul><h4 id="_8-1-3-异常处理自动配置原理" tabindex="-1"><a class="header-anchor" href="#_8-1-3-异常处理自动配置原理" aria-hidden="true">#</a> 8.1.3 异常处理自动配置原理</h4><ul><li><p><strong>ErrorMvcAutoConfiguration 自动配置异常处理规则</strong></p><ul><li><p><strong>容器中的组件：类型 DefaultAttributes -&gt; id：errorAttributes</strong></p><ul><li><strong>public class <span style="color:red;">DefaultAttributes</span> implements <span style="color:blue;">ErrorAttributes</span> , <span style="color:blue;">HandlerExceptionResolver</span></strong></li><li><strong>DefaultErrorAttributes</strong>：定义错误页面中可以包含哪些数据</li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image28.png" alt="springboot-image28" tabindex="0" loading="lazy"><figcaption>springboot-image28</figcaption></figure><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image29.png" alt="springboot-image29" tabindex="0" loading="lazy"><figcaption>springboot-image29</figcaption></figure></li><li><p><strong><span style="color:red;">容器中的组件：类型：BasicErrorController --&gt; id：basicErrorController（json + 白页 + 适配响应）</span></strong></p><ul><li><strong>处理默认 /error 路径的请求，页面响应</strong> <code>new ModelAndView</code>(&quot;error&quot;, model);</li><li><strong>容器中有组件 <code>View</code> --&gt; id 是 error</strong>（响应默认错误页）</li><li>容器中放组件 <strong>BeanNameViewResolver（视图解析器），按照返回的视图名作为组件的 id 去容器中找 View 对象</strong></li></ul></li><li><p><strong>容器中的组件</strong>：类型：<strong><code>DefaultErrorViewResolver</code></strong> --&gt; id：conventionErrorViewResolver</p><ul><li>如果发生错误，会以 HTTP 的状态码作为视图页地址（viewName），找到真正的页面</li><li>error/404、5xx.html</li></ul></li></ul></li></ul><p>如果想要返回页面，就会找 error 视图【StaticView】。（默认是一个百页）</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image30.png" alt="springboot-image30" tabindex="0" loading="lazy"><figcaption>springboot-image30</figcaption></figure><h4 id="_8-1-4-异常处理步骤流程" tabindex="-1"><a class="header-anchor" href="#_8-1-4-异常处理步骤流程" aria-hidden="true">#</a> 8.1.4 异常处理步骤流程</h4><ol><li><p>执行目标方法，目标方法运行期间有任何异常都会被 catch、标志当前请求结束，并且用 <code>dispatchException</code></p></li><li><p>进入视图解析流程（页面渲染？）</p><p>processDispatchResult(processedRequest, response, mappedHandler, <strong><code>mv</code>, <span style="color:red;">dispatchException</span></strong>)</p></li><li><p><strong>mv = processHandlerException;</strong> 处理 handler 发生的异常，处理完成返回 ModelAndView;</p><ol><li><p>遍历所有的 <strong>handlerExceptionResolvers，看谁能处理当前异常【<span style="color:red;">HandlerExceptionResolver 处理器异常解析器</span>】</strong></p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image31.png" alt="springboot-image31" tabindex="0" loading="lazy"><figcaption>springboot-image31</figcaption></figure></li><li><p><strong>系统默认的 异常解析器</strong></p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image34.png" alt="springboot-image34" tabindex="0" loading="lazy"><figcaption>springboot-image34</figcaption></figure><ol><li><p><strong>DefaultErrorAttributes <code>先来处理异常，把异常信息保存到 request 域，并且返回 null</code></strong></p></li><li><p><strong><code>默认没有任何人能处理异常，所以异常会抛出</code></strong></p><ol><li><p><strong>如果没有任何人能处理最终底层就会发送 /error 请求，会被底层的 BasicErrorController 处理</strong></p></li><li><p><strong>解析错误视图，遍历所有的 ErrorViewResolver，看谁能解析</strong></p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image35.png" alt="springboot-image35" tabindex="0" loading="lazy"><figcaption>springboot-image35</figcaption></figure></li><li><p><strong>默认的 DefaultErrorViewResolver，作用是把响应状态码作为错误页的地址，error/500.html</strong></p></li><li><p><strong><code>模板引擎最终响应这个页面 error/500.html</code></strong></p></li></ol></li></ol></li></ol></li></ol><h2 id="_9-web-原生组件注入-servlet、filter、listener" tabindex="-1"><a class="header-anchor" href="#_9-web-原生组件注入-servlet、filter、listener" aria-hidden="true">#</a> 9. Web 原生组件注入（Servlet、Filter、Listener）</h2><h3 id="_9-1-使用-servlet-api" tabindex="-1"><a class="header-anchor" href="#_9-1-使用-servlet-api" aria-hidden="true">#</a> 9.1 使用 Servlet API</h3><p>推荐如下方式：</p><p>@<code>ServletComponentScan(basePackages = &quot;com.hkw.springboot2&quot;)</code>：指定原生 Servlet 组件都放在那里</p><p>@WebServlet(urlPatterns = &quot;<strong>/my</strong>&quot;)：效果，直接响应，没有经过 Spring 的拦截器？</p><p>@WebFilter(urlPatterns = {<strong>&quot;/css/* &quot; , &quot;/images/* &quot;</strong>})</p><p>@WebListener</p><p>扩展：DispatcherServlet 如何注册进来？</p><ul><li>容器中自动配置了 DispatcherServlet 属性绑定到 WebMvcProperties，对应的配置文件配置项是 <strong>spring.mvc</strong></li><li><strong>通过 ServletRegistrationBean</strong>&lt; DispatcherServlet&gt; 把 DispatcherServlet 配置进来</li><li>默认映射的是 / 路径</li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image36.png" alt="springboot-image36" tabindex="0" loading="lazy"><figcaption>springboot-image36</figcaption></figure><p><code>Tomcat-Servlet</code>：</p><p>多个 Servlet 都能处理到同一层路径，精确优选原则</p><p>A：/my/</p><p>B：/my/1</p><h3 id="_9-2-使用-registrationbean" tabindex="-1"><a class="header-anchor" href="#_9-2-使用-registrationbean" aria-hidden="true">#</a> 9.2 使用 RegistrationBean</h3><p><code>ServletRegistrationBean</code> , <code>FilterRegistrationBean</code> and <code>ServletListenerRegistrationBean</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRegistConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">MyServlet</span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">&quot;/my&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/my02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token class-name">MyFilter</span> myFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// return new FilterRegistrationBean(myFilter,myServlet());</span>
        <span class="token class-name">FilterRegistrationBean</span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;/my&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/css/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletListenerRegistrationBean</span> <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">MySwervletContextListener</span> mySwervletContextListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySwervletContextListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span>mySwervletContextListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-嵌入式-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_10-嵌入式-servlet-容器" aria-hidden="true">#</a> 10. 嵌入式 Servlet 容器</h2><h3 id="_10-1-切换嵌入式-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_10-1-切换嵌入式-servlet-容器" aria-hidden="true">#</a> 10.1 切换嵌入式 Servlet 容器</h3><ul><li><p>默认支持的 webServer</p><ul><li>Tomcat , Jetty or Undertow</li><li>ServletWebServerApplicationContext 容器启动寻找 ServletWebServerFactory 并引导创建服务器</li></ul></li><li><p>切换服务器</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/springboot-image37.png" alt="springboot-image37" tabindex="0" loading="lazy"><figcaption>springboot-image37</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>原理</p><ul><li>SpringBoot 应用启动发现当前是 Web 应用，web 场景包 - <code>导入 tomcat</code></li><li>web 应用会创建一个 web 版的 ioc 容器 <code>ServletWebServerApplicationContext</code></li><li><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <strong><code>ServletWebServerFactory</code></strong>（<code>Servlet 的 web 服务器工厂 ---&gt; Servlet 的 web 服务器</code>）</li><li>SpringBoot 底层默认有很多的 WebServer 工厂：<code>TomcatServletWebServerFactory , JettyServerWebServerFactory or UndertowServerWebServerFactory</code></li><li><code>底层直接会有一个自动配置类：ServletWebServerFactoryAutoConfiguration</code></li><li><strong>ServletWebServerFactoryAutoConfiguration 导入了 ServletWebServerFactoryConfiguration（配置类）</strong></li><li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了哪个 Web 服务器的包。（默认是 web-starter 导入 tomcat 包），容器中就有 TomcatServetWebServerFactory</code></li><li><code>TomcatServerWebServerFactory 创建出 Tomcat 服务器并启动，TomcatWebServer 的构造器拥有初始化方法 initialize --- this.tomcat.start();</code></li><li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat 核心 jar 包存在）</code></li></ul></li></ul><h3 id="_10-2-定制-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_10-2-定制-servlet-容器" aria-hidden="true">#</a> 10.2 定制 Servlet 容器</h3>`,82),z=n("li",null,[s("实现 "),n("strong",null,"WebServerFactoryCustomizer"),s("< ConfigurationServletWebServerFactory> "),n("ul",null,[n("li",null,"把配置文件的值和 ServletWebServerFactory 进行绑定")])],-1),O={href:"http://server.xxx",target:"_blank",rel:"noopener noreferrer"},V=n("li",null,[s("直接自定义 "),n("strong",null,"ConfigurableServletWebServerFactory")],-1),I=e(`<p><strong>xxxCustomizer：定制化器，可以改变 xxx 的默认规则</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizationBean</span> <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurableServletWebServerFactory</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableServletWebServerFactory</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        server<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-定制化原理" tabindex="-1"><a class="header-anchor" href="#_11-定制化原理" aria-hidden="true">#</a> 11. 定制化原理</h2><h3 id="_11-1-定制化的常见方式" tabindex="-1"><a class="header-anchor" href="#_11-1-定制化的常见方式" aria-hidden="true">#</a> 11.1 定制化的常见方式</h3><ul><li><p>修改配置文件</p></li><li><p><strong>xxxCustomiizer</strong></p></li><li><p><strong>编写自定义的配置类 xxxConfiguration + @Bean 替换、增加容器中默认组件、视图解析器</strong></p></li><li><p><strong><span style="color:red;">Web 应用编写一个配置类实现 WebMvcConfiguration 即可定制化 web 功能 + @Bean 给容器中再扩展一些组件</span></strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@EnableWebMvc + WebMvcConfiguration --- @Bean 可以全面接管 SpringMVC，所有规则全部自己重新配置，实现定制和扩展功能</p><ul><li>WebMvcAutoConfiguration 是默认的 SpringMVC 的自动配置功能类。静态资源、欢迎页、......</li><li>一旦使用 <code>@EnableWebMvc</code>。会 <code>@Import</code>(DelegatingWebMvcConfiguration.class)</li><li><strong>DelegatingWebMvcConfigurtaion</strong> 的作用，只保证 SpringMVC 最基本的使用 <ul><li>把所有系统中的 WebMvcConfigurer 拿过来，所有功能的定制都是这些 WebMvcConfigurer 合起来一起生效</li><li>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</li><li><strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends WebMvcConfigurationSupport</strong></li></ul></li><li><strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须 <code>@ConditionalOnMissingBean</code><strong>(WebMvcConfigurationSupport.class</strong>)</li><li><code>@EnableWebMvc 导致了</code> WebMvcAutoConfiguration 没有生效</li></ul></li><li><p>......</p></li></ul><h3 id="_11-2-原理分析套路" tabindex="-1"><a class="header-anchor" href="#_11-2-原理分析套路" aria-hidden="true">#</a> 11.2 原理分析套路</h3><p><strong><span style="color:red;">场景 starter </span>--- xxxAutoConfiguration --- <code>导入 xxx 组件</code> --- 绑定 xxxProperties --- <span style="color:red;">绑定配置文件项</span></strong></p>`,7);function U(D,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("ul",null,[k,n("li",null,[s("Support for serving static resources, including support for WebJars (covered later "),n("a",d,[s("in this document"),t(a)]),s(")). "),m]),v,n("li",null,[s("Support for HttpMessageConverters (covered later "),n("a",g,[s("in this document"),t(a)]),s("). "),b]),n("li",null,[s("Automatic registration of MessageCodesResolver (covered later "),n("a",h,[s("in this document"),t(a)]),s("). "),f]),y,n("li",null,[s("Custom Favicon support (covered later "),n("a",w,[s("in this document"),t(a)]),s("). "),q]),n("li",null,[s("Automatic use of a ConfigurableWebBindingInitializer bean (covered later "),n("a",x,[s("in this document"),t(a)]),s("). "),_])]),M,n("p",null,[n("a",S,[s("https://www.webjars.org/"),t(a)])]),C,n("p",null,[s("访问地址："),n("a",R,[s("http://localhost:8080/webjars/jquery/3.6.0/jquery.js"),t(a)]),s(" 后面地址要按照依赖里面的包路径")]),j,n("p",null,[n("a",P,[s("http://localhost:8080/test/user?format=json"),t(a)])]),A,n("p",null,[n("a",H,[s("http://localhost:8080/test/user?format=xml"),t(a)])]),E,B,W,n("p",null,[n("a",T,[s("https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes"),t(a)])]),F,n("ul",null,[z,n("li",null,[s("修改配置文件 "),n("strong",null,[n("a",O,[s("server.xxx"),t(a)])])]),V]),I])}const J=p(i,[["render",U],["__file","springboot2-core-2.html.vue"]]);export{J as default};
