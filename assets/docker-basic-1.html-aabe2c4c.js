import{_ as t,E as n,Z as d,$ as c,a0 as e,a1 as i,a3 as l,a4 as o,a5 as r}from"./framework-1fb77053.js";const g={},h=e("h2",{id:"_1-docker-是什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-docker-是什么","aria-hidden":"true"},"#"),i(" 1. Docker 是什么")],-1),u=e("h3",{id:"_1-1-问题-docker-为什么出现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-1-问题-docker-为什么出现","aria-hidden":"true"},"#"),i(" 1.1 问题：Docker 为什么出现？")],-1),s=e("p",null,"假设你在开发一个商城项目，使用的是一台笔记本电脑而且你的开发环境具有特定的配置，其他开发人员身处的环境配置也各有不同，你正在开发的应用依赖于你当前的配置且还要依赖于某些配置文件，此外，你的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。你希望尽可能多在本地模拟这些环境而不产生重新创建服务器环境的开销，请问：",-1),_=e("ul",null,[e("li",null,"你要如何确保应用能够在这些环境中运行和通过质量检测？"),e("li",null,"你如何在部署过程中不出现令人头疼的版本、配置问题？"),e("li",null,"你如何无需重新编写代码和进行故障修复？")],-1),p=e("h3",{id:"_1-2-docker-理念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-2-docker-理念","aria-hidden":"true"},"#"),i(" 1.2 Docker 理念")],-1),f=e("figure",null,[e("img",{src:"http://img.hl1015.top/blog/image-20220303152136913.png",alt:"image-20220303152136913",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20220303152136913")],-1),m=e("h3",{id:"_1-3-总结",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-3-总结","aria-hidden":"true"},"#"),i(" 1.3 总结")],-1),b=r('<h2 id="_2-容器和虚拟机的比较" tabindex="-1"><a class="header-anchor" href="#_2-容器和虚拟机的比较" aria-hidden="true">#</a> 2. 容器和虚拟机的比较</h2><h3 id="_2-1-容器发展简史" tabindex="-1"><a class="header-anchor" href="#_2-1-容器发展简史" aria-hidden="true">#</a> 2.1 容器发展简史</h3><figure><img src="http://img.hl1015.top/blog/image-20220303170457942.png" alt="image-20220303170457942" tabindex="0" loading="lazy"><figcaption>image-20220303170457942</figcaption></figure><h3 id="_2-2-传统虚拟机技术" tabindex="-1"><a class="header-anchor" href="#_2-2-传统虚拟机技术" aria-hidden="true">#</a> 2.2 传统虚拟机技术</h3><p>虚拟机（Virtual Machine）就是带环境安装的一种解决方案</p><p>它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 10 系统里面运行 Linux 系统 CentOS 7，应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响，这类虚拟机完美地运行了另一套系统，能够使应用程序、操作系统和硬件三者之间的逻辑不变</p><figure><img src="http://img.hl1015.top/blog/image-20220304100639832.png" alt="image-20220304100639832" tabindex="0" loading="lazy"><figcaption>image-20220304100639832</figcaption></figure><p>传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如：VirtualBox 和 VMWare 等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用</p><figure><img src="http://img.hl1015.top/blog/image-20220304101132082.png" alt="image-20220304101132082" tabindex="0" loading="lazy"><figcaption>image-20220304101132082</figcaption></figure><p>因此，<strong>传统虚拟机缺点：①资源占用多 ②冗余步骤多 ③启动慢</strong></p><h3 id="_2-3-容器虚拟化技术" tabindex="-1"><a class="header-anchor" href="#_2-3-容器虚拟化技术" aria-hidden="true">#</a> 2.3 容器虚拟化技术</h3><p>由于前面虚拟机存在某些缺点，Linux 发展出了另一种虚拟化技术：</p>',12),k=e("p",null,"Linux 容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件，容器提供的镜像包含了应用的所有依赖项，因为从开发到测试再到生产的整个过程中，它都具有可移植性和一致性",-1),x=e("figure",null,[e("img",{src:"http://img.hl1015.top/blog/image-20220304102042325.png",alt:"image-20220304102042325",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20220304102042325")],-1),D=e("p",null,[i("Docker 容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统虚拟机则是在硬件层面实现虚拟化，与传统的虚拟机相比，"),e("strong",null,"Docker 优势体现在启动速度快，占用体积小")],-1),y=e("h3",{id:"_2-4-对比",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-4-对比","aria-hidden":"true"},"#"),i(" 2.4 对比")],-1),z=e("figure",null,[e("img",{src:"http://img.hl1015.top/blog/image-20220304102357554.png",alt:"image-20220304102357554",tabindex:"0",loading:"lazy"}),e("figcaption",null,"image-20220304102357554")],-1),L=e("p",null,"比较 Docker 和传统虚拟机方式的不同之处：",-1),v=e("li",null,"传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，在该系统上再运行所需应用进程",-1),B=e("li",null,"每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会互相影响，能区分计算资源",-1),C=r('<h2 id="_3-docker-能干嘛" tabindex="-1"><a class="header-anchor" href="#_3-docker-能干嘛" aria-hidden="true">#</a> 3. Docker 能干嘛</h2><h3 id="_3-1-技术职级变化" tabindex="-1"><a class="header-anchor" href="#_3-1-技术职级变化" aria-hidden="true">#</a> 3.1 技术职级变化</h3><p>coder【码农】 ---》 programmer【程序员】 ---》 software enginner【软件工程师】</p><h3 id="_3-2-开发-运维-devops-新一代开发工程师" tabindex="-1"><a class="header-anchor" href="#_3-2-开发-运维-devops-新一代开发工程师" aria-hidden="true">#</a> 3.2 开发/运维（DevOps）新一代开发工程师</h3>',4),V=r("<li><p><strong>更快速的应用交付和部署</strong></p><ul><li>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据文档进行繁重复杂的配置才能正常运行。Docker 化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间</li></ul></li><li><p><strong>更便捷的升级和扩缩容</strong></p><ul><li>随着微服务架构和 Docker 的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个 Docker 容器将变成一块 &quot;积木&quot;，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天极变成分钟级甚至秒级</li></ul></li><li><p><strong>更简单的系统运维</strong></p><ul><li>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的 bug，当出现程序异常时，也可以通过测试环境的相同容器进行快读定位和修复</li></ul></li>",3),w=e("p",null,[e("strong",null,"更高效的计算资源利用")],-1),A=r('<h3 id="_3-3-docker-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-3-docker-应用场景" aria-hidden="true">#</a> 3.3 Docker 应用场景</h3><figure><img src="http://img.hl1015.top/work/image-20221126002723571.png" alt="image-20221126002723571" tabindex="0" loading="lazy"><figcaption>image-20221126002723571</figcaption></figure><p>Docker 借鉴了标准集装箱的概念。标准集装箱将货物运往世界各地，Docker 将这个模型运用到自己的设计中，唯一不同的是：集装箱运输货物，而 Docker 运输软件</p><h3 id="_3-4-哪些企业在使用" tabindex="-1"><a class="header-anchor" href="#_3-4-哪些企业在使用" aria-hidden="true">#</a> 3.4 哪些企业在使用</h3><ul><li>新浪</li></ul><figure><img src="http://img.hl1015.top/blog/image-20220304105425431.png" alt="image-20220304105425431" tabindex="0" loading="lazy"><figcaption>image-20220304105425431</figcaption></figure><ul><li>美团</li></ul><figure><img src="http://img.hl1015.top/blog/image-20220304105517253.png" alt="image-20220304105517253" tabindex="0" loading="lazy"><figcaption>image-20220304105517253</figcaption></figure><ul><li>蘑菇街</li></ul><figure><img src="http://img.hl1015.top/blog/image-20220304105538469.png" alt="image-20220304105538469" tabindex="0" loading="lazy"><figcaption>image-20220304105538469</figcaption></figure><ul><li>......</li></ul>',11);function M(N,S){const a=n("font");return d(),c("div",null,[h,u,s,_,e("p",null,[i("答案就是使用容器，Docker 之所以发展迅速，也是因为它对此给出了一个标准化的解决方案 --- "),l(a,{color:"red"},{default:o(()=>[i("系统平滑移植，容器虚拟化技术")]),_:1})]),e("p",null,[i("由于环境配置相当麻烦，换一台机器，就要重来一次，费力费时，很多人想到，能不能从根本上解决问题，"),l(a,{color:"red"},{default:o(()=>[i("软件可以带环境安装？")]),_:1}),i("也就是说，"),l(a,{color:"red"},{default:o(()=>[i('安装的时候，把原始环境一模一样地复制过来，开发人员利用 Docker 可以消除协作编码时 "在我的机器上可以正常工作，换一台机器为什么就不行" 的问题')]),_:1})]),e("p",null,[i("之前在服务器配置一个应用的运行环境，要安装各种软件，就拿电商项目的环境来说，Java、RabbitMQ、MySQL、JDBC 驱动包等等，安装和配置这些东西有多麻烦就不说了，它还不能跨平台，假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装，况且就算不跨操作系统，换另一台同样操作系统的服务器，要"),l(a,{color:"red"},{default:o(()=>[i("移植")]),_:1}),i("应用也是非常麻烦的")]),e("p",null,[i("传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等（java 为例），而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让运维团队得以部署应用程序，"),l(a,{color:"blue"},{default:o(()=>[i("开发需要清楚地告诉运维部署团队，用的全部配置文件 + 所有软件环境。不过，即便如此，仍然常常发生部署失败的状况")]),_:1}),i("。"),l(a,{color:"red"},{default:o(()=>[i("Docker 的出现使得 Docker 得以打破过去【程序即应用】的观念，透过镜像（images）将作业系统核心除外，运作应用程序所需要的系统环境，由下而上打包，达到应用程序跨平台间的无缝接轨运作")]),_:1})]),p,l(a,{color:"red"},{default:o(()=>[i("Docker 是基于 Go 语言实现的云开源项目")]),_:1}),e("p",null,[i('Docker 的主要目标是 "Build，Ship and Run Any App，Anywhere"，也就是通过对应组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 Web 应用或数据库应用等等）及其运行环境能够做到 '),l(a,{color:"red"},{default:o(()=>[i('"一次镜像，处处运行"')]),_:1})]),f,l(a,{color:"blue"},{default:o(()=>[i("Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。")]),_:1}),i("将应用打包成镜像，通过镜像成为运行在 Docker 容器上面的实例，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。"),l(a,{color:"red"},{default:o(()=>[i("只需要一次配置好环境，换到别的机器上就可以一键部署好，大大简化了操作")]),_:1}),m,e("p",null,[i("Docker 是为了解决"),l(a,{color:"red"},{default:o(()=>[i("运行环境和配置问题")]),_:1}),i("的"),l(a,{color:"red"},{default:o(()=>[i("软件容器")]),_:1}),i("，方便做持续集成并有助于整体发布的容器虚拟化技术")]),b,l(a,{color:"blue"},{default:o(()=>[i("Linux 容器（Linux Containers，缩写为 LXC）")]),_:1}),k,l(a,{color:"red"},{default:o(()=>[i("Linux 容器不是模拟一个完整的操作系统")]),_:1}),i("而是对进程进行隔离，有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中，"),l(a,{color:"blue"},{default:o(()=>[i("容器与虚拟机不同，不需要捆绑一整套操作系统")]),_:1}),i("，只需要软件工作所需的库资源和设置，系统因此变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行"),x,D,y,z,L,e("ul",null,[v,e("li",null,[i("容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也"),l(a,{color:"red"},{default:o(()=>[i("没有进行硬件虚拟")]),_:1}),i("，因此容器要比传统虚拟机更为轻便")]),B]),C,l(a,{color:"blue"},{default:o(()=>[i('"一次构建，随处运行"')]),_:1}),e("ul",null,[V,e("li",null,[w,e("ul",null,[e("li",null,[i("Docker 是"),l(a,{color:"red"},{default:o(()=>[i("内核级虚拟化")]),_:1}),i("，其不像传统的虚拟化技术一样需要额外的 Hypervisor 支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的 CPU 和内存的利用率")])])])]),A])}const P=t(g,[["render",M],["__file","docker-basic-1.html.vue"]]);export{P as default};
