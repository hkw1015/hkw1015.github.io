import{_ as n,Z as s,$ as a,a5 as p}from"./framework-1fb77053.js";const t={},e=p(`<h2 id="_1-异常" tabindex="-1"><a class="header-anchor" href="#_1-异常" aria-hidden="true">#</a> 1. 异常</h2><ul><li><p><strong>异常的体系结构</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span>

 	<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Error</span>：错误

 			<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token class-name">StackOverflowError</span>

 			<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token constant">OOM</span>

 	<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Exception</span>：异常

 			<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 编译时异常<span class="token punctuation">(</span>非<span class="token class-name">RuntimeException</span><span class="token punctuation">)</span>：执行javac<span class="token punctuation">.</span>exe命令时，报出的异常

 			<span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 运行时异常<span class="token punctuation">(</span><span class="token class-name">RuntimeException</span><span class="token punctuation">)</span>：执行java<span class="token punctuation">.</span>exe命令时，报出的异常
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Error：错误</strong></p><p>（1）java 虚拟机无法解决的严重问题；</p><p>​        比如：JVM系统内部错误、资源耗尽等严重情况。例：StackOverflowError 和 OOM。</p><p>（2）一般不编写针对性的代码进行处理。</p></li><li><p><strong>Exception：异常</strong></p><p>（1）其他因编程错误或偶然的外在因素导致的一般性问题；</p><p>（2）可以使用针对性的代码进行处理。</p></li><li><p><strong>从程序执行过程，看编译时异常和运行时异常</strong></p></li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/java/base/image-20210810130838634.png" alt="image-20210810130838634" tabindex="0" loading="lazy"><figcaption>image-20210810130838634</figcaption></figure><p>编译时异常（非RuntimeException）：执行 javac.exe 命令时，报出的异常；</p><p>运行时异常（RuntimeException）：执行 java.exe 命令时，报出的异常。</p><ul><li><p><strong>常见的异常</strong></p><p>（1）算术异常：ArithmeticException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）类型转换异常：ClassCastException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;AA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Date</span> date  <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）数组下标越界异常：ArrayIndexOutOfBoundsException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）空指针异常：NullPointerException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//	int[] arr = null;</span>
<span class="token comment">//	System.out.println(arr[0]);</span>
		
	<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>
	s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（5）数值格式化异常：NumberFormatException</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;abc123&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_2-异常的处理" tabindex="-1"><a class="header-anchor" href="#_2-异常的处理" aria-hidden="true">#</a> 2. 异常的处理</h2><ul><li><p><strong>java异常处理的抛抓模型</strong></p><p>（1）过程一：“抛”</p><p>       程序在正常的执行过程中，一旦出现异常，就会在相应的代码处生成相应的异常类的对象，并将此对象抛出。一旦异常对象抛出，程序就不会再执行后面的逻辑代码。</p><p>       异常对象的抛出的两种情况： ①自动抛出；②手动抛出（在方法内部使用 throw 的方式）。</p><p>（2）过程二：“抓”</p><p>      可以理解为异常处理的方式：①try-catch-finally；②throws。</p></li><li><p><strong>异常处理方式一：try-catch-finally</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
	可能出现异常的代码；
<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception1</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	处理方式<span class="token number">1</span>；
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception2</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	处理方式<span class="token number">2</span>；
<span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">finally</span><span class="token punctuation">{</span>
	一定会被执行的代码；
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><p>①finally 是可选的；</p><p>②try 中包裹的可能出现异常的代码。程序执行过程中，一旦出现异常，就会抛出一个异常类的对象。此异常对象就会在下边的 catch 语句中进行匹配，一旦匹配成功，就进入执行具体的处理方法的处理；</p><p>③多个 catch 语句中的异常类型如果是子父类关系，必须将子类异常类型声明在父类异常类型的上面；</p><p>④一旦匹配成功某一个 catch 语句，执行完以后，就跳出当前的 try-catch 结构，不会继续匹配下面的 catch；</p><p>⑤在 try 中声明的变量，出了其所在的一对{}之后，就不可以再被调用；</p><p>⑥catch 中异常处理的常见方式：①sout(e.getMessage())；②e.printStackTrace；// 打印堆栈信息；</p><p>⑦一旦在 catch 中处理了异常信息，那么程序就可以继续执行；</p><p>⑧开发中，针对于运行时异常，一般就不进行异常的处理了。</p><p>       针对于编译时异常，一定需要考虑异常的处理，否则，编译不通过。</p><p>       处理以后的效果，可以理解为将一个编译时异常延迟到运行时才可能出现。</p><p>⑨try-catch-finally 结构可以嵌套使用。</p></li><li><p><strong>finally 的说明</strong></p><p>（1）finally：将一定会被执行的代码写在 finally 中；</p><p>（2）不管try、catch中是否存在未被处理的异常，也不管try、catch中是否存在return的情况，finally中的代码都一定会被执行。</p><p>（3）什么样的代码会被声明在 finally 中？</p><p>       涉及到流操作、网络操作中的Socket资源、数据库连接资源，必须考虑手动关闭时，需要将这些关闭操作声明在finally中。</p><p><strong>【面试题】final、finally、finalize的区别？</strong></p><p>final：</p><p>​  有三种用法：修饰类、变量和方法。</p><p>​  ①修饰类时，表明该类不能被继承；</p><p>​  ②修饰变量时，表明该变量在使用时不能被改变，所以在声明时需要给变量进行初始化（如果是成员变量，也可以在声明处先不赋值，但在构造器内要对改成员变量赋值）；</p><p>​  ③修饰方法时，表明该方法只能使用，在子类中不能被重写。</p><p>finally：</p><p>​  通常是放在 try...catch 后面构造最终代码执行块，无论程序是正常还是异常，这部分代码都会执行，一般将释放资源的代码写在里面。</p><p>finalize：</p><p>​  finalize() 是 Object 类里定义的方法，这个方法是垃圾收集器在销毁对象时调用的，但该方法被调用并不意味着 gc 会立即回收该对象。</p><p><strong>【类似】HashMap 、LinkedHashMap 的区别？</strong></p><p>HashMap 是 Map 接口的主要实现类，是线程不安全的，底层是数组+链表+红黑树（jdk1.8新增），根据键的 hashCode 值存储数据，也可以根据值获取数据，可以存储 null 键和 null 值。</p><p>LinkedHashMap 是 HashMap 的子类，底层维护了一个双向链表，在添加数据的同时，它能够记录添加的先后顺序，在遍历时，可以按照添加的先后顺序遍历。</p></li><li><p><strong>异常处理方式二：“throws + 异常处理类型”的方式</strong></p><p>（1）格式：在方法声明的最后，使用“throws 异常类型1，异常类型2...”的方式，将异常抛出；</p><p>（2）“throws 异常类型1，异常类型2...”这种方式将可能产生的异常对象抛给了方法的调用者。</p></li><li><p><strong>体会开发中应该如何选择两种处理方式？</strong></p><p>（1）对比处理方式一：</p><p>​  try-catch-finally：真正地将异常给处理了；</p><p>​  throws：只是将异常向上抛出，并没有从根本上处理掉此异常。</p><p>（2）如何选择使用哪种处理方式处理异常？</p><p>​  ①如果涉及到资源的关闭等操作，需要使用 try-catch-finally，而不能用 throws；</p><p>​  ②在项目中，针对于某个 method1() 的某些逻辑中涉及到的多个方法的调用，此多个方法如果异常，习惯上使用 throws 的方式，然后在 method1() 中统一使用 try-catch-finally 进行处理；</p><p>​  ③父类被重写的方法如果没有抛出异常，则子类重写的方法内部如果有异常，只能使用 try-catch-finally；</p></li></ul><h2 id="_3-手动抛出异常对象" tabindex="-1"><a class="header-anchor" href="#_3-手动抛出异常对象" aria-hidden="true">#</a> 3. 手动抛出异常对象</h2><ul><li><p><strong>使用说明</strong></p><p>在方法内部使用 throw 的方式抛出异常</p></li><li><p><strong>【面试题】</strong></p><p>throws 和 throw 的区别？</p><p>throws：用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上抛，谁调用就抛给谁。</p><p>​  说明：①用在方法声明后面，跟的是异常类名；</p><p>​    ②可以跟多个异常类名，用逗号隔开；</p><p>​    ③表示抛出异常，由该方法的调用者来处理；</p><p>​    ④throws 表示出现异常的一种可能性，并不一定会发生这些异常。</p><p>throw：用来抛出一个具体的异常类型。</p><p>​  说明：①用在方法体内，跟的是异常对象名；</p><p>​    ②只能抛出一个异常对象；</p><p>​    ③表示抛出异常，由方法体内的语句处理；</p><p>​    ④执行 throw 一定会抛出某种异常。</p></li><li><p><strong>举例</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 举例1：</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> id<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 手动创建一个异常类的对象，并throw出去</span>
			<span class="token comment">// throw new RuntimeException(&quot;输入的学号不合法&quot;);</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;输入的学号不合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
    
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;Student [id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 举例2：</span>
<span class="token comment">// 若返回值是 0 , 代表相等; 若为正数，代表当前对象大；负数代表当前对象小</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ComparableCircle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ComparableCircle</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;传入的数据类型不一致！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-自定义异常类" tabindex="-1"><a class="header-anchor" href="#_4-自定义异常类" aria-hidden="true">#</a> 4. 自定义异常类</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * 1.继承于现的异常类。通常会继承于 RuntimeException 或者 Exception
 * 2.定义重载的构造器
 * 3.提供一个全局常量：serialVersionUID，唯一的识别当前类本身
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7034896939L</span><span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 技巧：参照 Exception 或 RuntimeException 的定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","exception.html.vue"]]);export{r as default};
