import{_ as p,E as e,Z as o,$ as c,a0 as n,a1 as s,a3 as l,a5 as a}from"./framework-1fb77053.js";const i={},u=a(`<h2 id="_1-file-类的使用" tabindex="-1"><a class="header-anchor" href="#_1-file-类的使用" aria-hidden="true">#</a> 1. File 类的使用</h2><ul><li><p><strong>java.io.File 类的使用</strong></p><p>（1）FIle 类的一个对象，代表着一个文件（.txt , .doc , .jpg , .avi等）或文件目录；</p><p>（2）本章涉及到的 File，流相关的类，都定义在 <code>java.io</code> 包下；</p><p>（3）File 类的对象，如果作为一个文件，就可以理解作为一个端点（起始点、目标点）被流所使用；</p><p>​        代码上的体现：常常将 File 类的对象，作为参数传递给流的构造器中。</p><p>（4）File 类中提供了文件或文件目录的创建、重命名、长度、删除等操作，但是并没涉及到文件内容的读写。如果涉及到文件内容的读写的话，就需要使用流。</p></li><li><p><strong>File 类的实例化</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * 1.如何实例化File
 * 
 * 2.路径：绝对路径：包含盘符在内的文件或文件目录的完整路径
 * 		   相对路径：相对于当前工程路径来说
 */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建文件</span>
	<span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\io\\\\hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\io&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 创建文件目录</span>
	<span class="token class-name">File</span> file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\io&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">File</span> file4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;d:\\\\io&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;io1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token comment">// 相对路径的表示：</span>
	<span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">File</span> file5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;world.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>常用方法</strong></li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/java/base/image-20210810165437650.png" alt="image-20210810165437650" tabindex="0" loading="lazy"><figcaption>image-20210810165437650</figcaption></figure><p>备注：蓝色的需要熟练使用。</p><h2 id="_2-io-流概述" tabindex="-1"><a class="header-anchor" href="#_2-io-流概述" aria-hidden="true">#</a> 2. IO 流概述</h2><ul><li><p><strong>流的分类</strong></p><p>（1）流的流向：输入流、输出流；</p><p>（2）操作数据的类型：字节流、字符流；</p><p>（3）流的角色：节点流（或文件流）、处理流</p></li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/java/base/image-20210810165723150.png" alt="image-20210810165723150" tabindex="0" loading="lazy"><figcaption>image-20210810165723150</figcaption></figure><ul><li><strong>流的体系结构</strong></li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/java/base/image-20210810165828517.png" alt="image-20210810165828517" tabindex="0" loading="lazy"><figcaption>image-20210810165828517</figcaption></figure><p>备注：淡蓝色是重点。</p><ul><li><p><strong>重点掌握的结构</strong></p><p>（1）抽象基类</p><p>​        InputStream</p><p>​        OutputStream</p><p>​        Reader</p><p>​        Writer</p><p>（2）节点流</p><p>​        FileInputStream(read(byte[] buffer)</p><p>​        FileOutputStream(write(byte[] buffer,0,len)</p><p>​        FileReader(read(char[] buffer)</p><p>​        FileWriter(write(byte[] buffer,0,len)</p><p>（3）缓冲流（处理流的一种：提高数据传输的速度）</p><p>​        BufferedInputStream</p><p>​        BufferedOutputStream</p><p>​        BufferedReader</p><p>​        BufferedWriter</p></li><li><p><strong>FileInputStream/FileOutputStream 的使用</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileInputOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token comment">// 1.提供原文件和目标文件</span>
		<span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;minghui.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\Users\\\\Administrator\\\\Desktop\\\\minghui.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
		<span class="token comment">// 2.创建相应的输入流和输出流</span>
		fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
		fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
		<span class="token comment">// 3.读取数据并写出数据的操作</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 记录读入字节数组中的字节数</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>				
			fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>				
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
		<span class="token comment">// 4.关闭资源</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>				
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>				
		<span class="token punctuation">}</span>			
	<span class="token punctuation">}</span>		
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>FileReader/FileWriter的使用</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实现“dbcp.txt”文件的复制</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReaderWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token comment">// 1.提供原文件和目标文件</span>
		<span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">File</span> dest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp1.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 2.创建相应的输入流和输出流</span>
		reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
		writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
		<span class="token comment">// 3.具体的读入、写出的操作</span>
		<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 记录读入到cbuf中字符的个数</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 4.关闭资源</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>				
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>总结</strong></p><p>（1）如果操作输入流对应的文件，要求文件必须存在，否则会报 FileNotFoundException;</p><p>（2）如果操作输出流对应的文件，此文件可以不存在。</p><p>​        如果此文件不存在，在程序运行过程中，会自动创建；</p><p>​        如果此文件存在，使用 FileOutputStream(File file)：则会覆盖原有的文件；</p><p>​        使用 FileOutputStream(File file,true)：则会在原文件内容给末尾追加数据。</p><p>（3）流资源，不会被 JVM 自动回收，必须显示地关闭；</p><p>（4）必须使用 try-catch-finally 处理流的关闭，为了保证此资源一定可以关闭；</p><p>（5）此时多个节点流的关闭，没有顺序要求。</p><p>注意点：</p><p>①在读取文本文件时，一定要确认好读取文件的字符编码格式和我们开发工具所用的字符编码格式，这俩要一致，不然会产生乱码（可以用转换流解决）。</p><p>​        BufferReader reader = new BufferReader(new InputStreamReader(new FileInputStream(“d:\\io\\hello.txt”)));</p><p>②字节流处理图像文件，字符流处理文本文件。</p></li></ul><h2 id="_3-缓冲流的使用" tabindex="-1"><a class="header-anchor" href="#_3-缓冲流的使用" aria-hidden="true">#</a> 3. 缓冲流的使用</h2><ul><li><p><strong>分类</strong></p><p>（1）处理非文本文件的流：BufferedInputStream、BufferedOutputStream;</p><p>（2）处理文本文件的流：BufferedReader、BufferedWriter。</p><p>作用：提高文件的读写速度。</p></li><li><p><strong>典型代码1：处理字节文件</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用BufferedInputStream/BufferedOutputStream实现文件的复制</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyWithBuffered</span><span class="token punctuation">(</span><span class="token class-name">String</span> src<span class="token punctuation">,</span> <span class="token class-name">String</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token comment">// 1.提供原文件和目标文件</span>
		<span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
		<span class="token comment">// 2.创建相应的输入流和输出流</span>
		<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
		bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
		bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
		<span class="token comment">// 3.读取数据并写出数据的操作</span>
		<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> len<span class="token punctuation">;</span> <span class="token comment">// 记录读入字节数组中的字节数</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				
			bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
			bos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 刷新数据</span>
				
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
		<span class="token comment">// 4.关闭资源</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">try</span> <span class="token punctuation">{</span>
				bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>				
		<span class="token punctuation">}</span>			
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>典型代码2：处理字符</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//综合使用BufferedReader和BufferedWriter的例子</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBufferedReaderWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.提供原文件和目标文件</span>
	<span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp2.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 2.1 创建相应的输入流和输出流</span>
	<span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 2.2 创建相应的输入缓冲流和输出缓冲流</span>
	<span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token comment">// 3.使用String</span>
	<span class="token class-name">String</span> str<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 读入到String中的数据不包含换行符</span>
		bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
		bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// bw.newLine();</span>
		<span class="token comment">// bw.flush(); // 刷新数据</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 4.关闭资源</span>
	br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-转换流的使用" tabindex="-1"><a class="header-anchor" href="#_4-转换流的使用" aria-hidden="true">#</a> 4. 转换流的使用</h2><ul><li><p><strong>转换流</strong></p><p>InputStreamReader / OutputStreamWriter</p></li><li><p><strong>作用</strong></p><p>（1）InputStreamReader：将一个输入型的字节流转换为输入型的字符流</p><p>​        解码：字节数组 ---&gt; 字符数组、字符串，对应着 InputStreamReader</p><p>（2）OutputStreamWriter：将一个输出型的字节流转换为输出型的字符流</p><p>​        解码：字符数组、字符串 ---&gt; 字节数组，对应着 OutputStreamWriter</p></li></ul><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/java/base/image-20210810172028690.png" alt="image-20210810172028690" tabindex="0" loading="lazy"><figcaption>image-20210810172028690</figcaption></figure><ul><li><strong>典型实现</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将使用GBK编码方式写出的文件，读入内存，并以UTF-8的方式存储为另外一个文件</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInputStreamReader2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

	<span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp_gbk.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;dbcp_utf-8.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 解码的过程</span>
	<span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span> <span class="token string">&quot;GBK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>说明</strong></p><p>文件在最初保存时，使用什么字符集进行编码的，那么打开此文件，还原为内存中的数据时，就需要使用同样的字符集进行解码。</p></li><li><p><strong>编码集</strong></p><p>（1）常见的编码集</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">ASCII</span>：美国标准信息交换码。
用一个字节的<span class="token number">7</span>位可以表示。

<span class="token constant">ISO8859</span><span class="token operator">-</span><span class="token number">1</span>：拉丁码表。欧洲码表
用一个字节的<span class="token number">8</span>位表示。

<span class="token constant">GB2312</span>：中国的中文编码表。

<span class="token constant">GBK</span>：中国的中文编码表升级，融合了更多的中文文字符号。

<span class="token class-name">Unicode</span>：国际标准码，融合了多种文字。
所文字都用两个字节来表示<span class="token punctuation">,</span><span class="token class-name">Java</span>语言使用的就是unicode

<span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>：最多用三个字节来表示一个字符。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）B/S :Browser Server        C/S:Client Server</p><p>​        为了保证所有的数据在前后端正确显示（不出现乱码），我们要保证编码集和解码集要一致。通常，我们都使用 UTF-8，包括服务器端与数据库的交互，也同样使用 UTF-8。</p></li></ul><h2 id="_5-对象流的使用" tabindex="-1"><a class="header-anchor" href="#_5-对象流的使用" aria-hidden="true">#</a> 5. 对象流的使用</h2><ul><li><p><strong>对象流</strong></p><p>ObjectInputStream 和 ObjectOutputStream</p><p>作用：存储和读取基本数据类型或对象的处理流。</p><p>     （它的强大之处就在于可以把 Java 中的对象写入到数据源中，也能把对象从数据源中还原回来。）</p><p>序列化：内存中的 java 对象 ---&gt; 写入文件、通过网络传输出去【使用ObjectOutputStream实现】</p><p>反序列化：读取文件、通过网络传输过来 ---&gt; 还原内存中的java对象【使用ObjectInputStream实现】</p></li><li><p><strong>对象的序列化机制</strong></p><p>     对象的序列化机制允许把内存中的 java 对象转换成与平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当程序获取了这种二进制流，就可以恢复成原来的 java 对象。</p></li><li><p><strong>实现序列化的类需要满足的条件</strong></p><p>（1）自定义类实现 Serializable 接口；</p><p>（2）在类中声明 serialVersionUID；</p><p>（3）要求自定义类的所有属性都是可序列化的。</p><p>说明：ObjectInputStream 和 ObjectOutputStream 不能序列化 static 和 transient 修饰的成员变量。</p></li></ul><h2 id="_6-其他的流的使用" tabindex="-1"><a class="header-anchor" href="#_6-其他的流的使用" aria-hidden="true">#</a> 6. 其他的流的使用</h2>`,31),k=n("p",null,[n("strong",null,"标准的输入输出流")],-1),r={href:"http://System.in",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"System.out：标准的输出流，默认是从显示器输出。",-1),m=n("p",null,"重写设置：",-1),v=n("p",null,"     System.setIn()：重新设置输入位置；",-1),b=n("p",null,"     System.setOut()：重新设置输出位置。",-1),f=n("li",null,[n("p",null,[n("strong",null,"打印流")]),n("p",null,"PrintStream、PrintWriter"),n("p",null,"提供了一系列重载的 print 和 println 方法，用于多种数据类型的输出；"),n("p",null,"System.out 返回的是 PrintStream 的实例。")],-1),w=n("li",null,[n("p",null,[n("strong",null,"数据流")]),n("p",null,"DataInputStream 和 DataOutputStream"),n("p",null,"作用：用于读取或写出基本数据类型、String、字节数组")],-1),h=a(`<h2 id="_7-randomaccessfile的使用" tabindex="-1"><a class="header-anchor" href="#_7-randomaccessfile的使用" aria-hidden="true">#</a> 7. RandomAccessFile的使用</h2><ul><li><p><strong>随机存取文件流</strong></p></li><li><p><strong>使用说明</strong></p><p>（1）继承于java.lang.Object;</p><p>（2）既可以充当输入流，又可以充当输出流；</p><p>（3）作为输出流，如果输出的文件不存在，则在输出过程中，自动创建此文件；</p><p>     如果输出的文件存在，则默认从文件开头的位置写入，覆盖原有的文件内容，但是可以在写出前，调用 seek(int positioin) 指定开始操作的位置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		
	<span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	<span class="token comment">// 指定指针指向的位置</span>
	raf<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	raf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;xyz&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
	raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
	
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

	<span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;minghui.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">RandomAccessFile</span> raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">&quot;minghui3.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_8-path、paths、files的使用" tabindex="-1"><a class="header-anchor" href="#_8-path、paths、files的使用" aria-hidden="true">#</a> 8. Path、Paths、Files的使用</h2><ul><li><p><strong>NIO 的理解</strong></p><p>NIO：New IO，Non-Blocking IO</p><p>NIO 中使用通道 Channel 和缓冲区 Buffer 来替换原有的流和字节/字符数组，实现数据的传输，效率高，同时是非阻塞式的。</p></li><li><p><strong>Path 的使用</strong></p><p>（1）Path的说明：替换原有的File类</p><p>     ①早期的 java 只提供一个File类来访问文件系统，但 File 类的功能比较有限，所提供的方法性能也不高，而且，大多数方法在出错时仅返回失败，并不会提供异常信息；</p><p>     ②NIO.2 为了弥补这种不足，引入了 Path 接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置，Path 可以看成是 File 类的升级版本，实际引用的资源也可以不存在。</p><p>（2）如何实例化</p><p>     Paths类（工具类）提供静态 get() 方法来获取 Path 对象；</p><p>     ①static Path get(String first,String ... more)：用于将多个字符串连成路径；</p><p>     ②static Path get(URL url)：返回指定url对应Path路径。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>举例：
<span class="token class-name">Path</span> path1 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>“hello<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// new File(“hello.txt”);</span>
<span class="token class-name">Path</span> path2 <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>“<span class="token class-name">D</span><span class="token operator">:</span>\\\\io”<span class="token punctuation">,</span>”io1\\\\io2”<span class="token punctuation">,</span>”hello<span class="token punctuation">.</span>txt”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new File(String parent,String 	fileName);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）常用方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回调用 <span class="token class-name">Path</span> 对象的字符串表示形式

<span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否以 path 路径开始

<span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否以 path 路径结束

<span class="token keyword">boolean</span> <span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是绝对路径

<span class="token class-name">Path</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回 <span class="token class-name">Path</span> 对象包含整个路径，不包含 <span class="token class-name">Path</span> 对象指定的文件路径

<span class="token class-name">Path</span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回调用 <span class="token class-name">Path</span> 对象的根路径

<span class="token class-name">Path</span> <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回与调用 <span class="token class-name">Path</span> 对象关联的文件名

<span class="token keyword">int</span> <span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 返回 <span class="token class-name">Path</span> 根目录后面元素的数量

<span class="token class-name">Path</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token operator">:</span> 返回s指定索引位置 idx 的路径名称

<span class="token class-name">Path</span> <span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 作为绝对路径返回调用 <span class="token class-name">Path</span> 对象

<span class="token class-name">Path</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Path</span> p<span class="token punctuation">)</span> <span class="token operator">:</span> 合并两个路径，返回合并后的路径对应的 <span class="token class-name">Path</span> 对象

<span class="token class-name">File</span> <span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> 将 <span class="token class-name">Path</span> 转化为 <span class="token class-name">File</span> 类的对象

另外，<span class="token class-name">File</span> 类中有方法：<span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 将 <span class="token class-name">File</span> 对象转换为 <span class="token class-name">Path</span> 对象。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Files 中的常用方法：操作文件或文件目录的工具类</strong></p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Path</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Path</span> src<span class="token punctuation">,</span> <span class="token class-name">Path</span> dest<span class="token punctuation">,</span> <span class="token class-name">CopyOption</span> … how<span class="token punctuation">)</span> <span class="token operator">:</span> 文件的复制
    
<span class="token class-name">Path</span> <span class="token function">createDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">FileAttribute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> … attr<span class="token punctuation">)</span> <span class="token operator">:</span> 创建一个目录
    
<span class="token class-name">Path</span> <span class="token function">createFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">FileAttribute</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> … arr<span class="token punctuation">)</span> <span class="token operator">:</span> 创建一个文件
    
<span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 删除一个文件<span class="token operator">/</span>目录，如果不存在，执行报错
    
<span class="token keyword">void</span> <span class="token function">deleteIfExists</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Path</span>对应的文件<span class="token operator">/</span>目录如果存在，执行删除
    
<span class="token class-name">Path</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token class-name">Path</span> src<span class="token punctuation">,</span> <span class="token class-name">Path</span> dest<span class="token punctuation">,</span> <span class="token class-name">CopyOption</span>…how<span class="token punctuation">)</span> <span class="token operator">:</span> 将 src 移动到 dest 位置
    
<span class="token keyword">long</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 返回 path 指定文件的大小
    
<span class="token class-name">Files</span> 常用方法：用于判断
<span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">LinkOption</span> … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否存在
    
<span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">LinkOption</span> … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是目录
    
<span class="token keyword">boolean</span> <span class="token function">isRegularFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">LinkOption</span> … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是文件
    
<span class="token keyword">boolean</span> <span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断是否是隐藏文件
    
<span class="token keyword">boolean</span> <span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否可读
    
<span class="token keyword">boolean</span> <span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否可写
    
<span class="token keyword">boolean</span> <span class="token function">notExists</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">LinkOption</span> … opts<span class="token punctuation">)</span> <span class="token operator">:</span> 判断文件是否不存在
    
<span class="token class-name">Files</span> 常用方法：用于操作内容
<span class="token class-name">SeekableByteChannel</span> <span class="token function">newByteChannel</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span>…how<span class="token punctuation">)</span> <span class="token operator">:</span> 获取与指定文	件的连接，how 指定打开方式。
    
<span class="token class-name">DirectoryStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Path</span><span class="token punctuation">&gt;</span></span>  <span class="token function">newDirectoryStream</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">)</span> <span class="token operator">:</span> 打开 path 指定的目录
    
<span class="token class-name">InputStream</span> <span class="token function">newInputStream</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span>…how<span class="token punctuation">)</span><span class="token operator">:</span> 获取 <span class="token class-name">InputStream</span> 对象
    
<span class="token class-name">OutputStream</span> <span class="token function">newOutputStream</span><span class="token punctuation">(</span><span class="token class-name">Path</span> path<span class="token punctuation">,</span> <span class="token class-name">OpenOption</span>…how<span class="token punctuation">)</span> <span class="token operator">:</span> 获取 <span class="token class-name">OutputStream</span> 对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function g(y,F){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[k,n("p",null,[n("a",r,[s("System.in"),l(t)]),s("：标准的输入流，默认是从键盘输入；")]),d,m,v,b]),f,w]),h])}const x=p(i,[["render",g],["__file","io.html.vue"]]);export{x as default};
