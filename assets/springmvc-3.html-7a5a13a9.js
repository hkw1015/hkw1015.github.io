const e=JSON.parse('{"key":"v-67d71e6d","path":"/java/framework/springmvc/springmvc-3.html","title":"RESTful","lang":"zh-CN","frontmatter":{"title":"RESTful","date":"2021-09-08T00:00:00.000Z","category":"常用框架","tag":["SpringMVC"],"description":"1. RESTful 1.1 RESTful 简介 REST：Representational State Transfer，表现层资源状态转移。 a&gt;资源 资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个 URI 来标识。URI 既是资源的名称，也是资源在 Web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其进行交互。","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/framework/springmvc/springmvc-3.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"RESTful"}],["meta",{"property":"og:description","content":"1. RESTful 1.1 RESTful 简介 REST：Representational State Transfer，表现层资源状态转移。 a&gt;资源 资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个 URI 来标识。URI 既是资源的名称，也是资源在 Web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其进行交互。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"SpringMVC"}],["meta",{"property":"article:published_time","content":"2021-09-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RESTful\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. RESTful","slug":"_1-restful","link":"#_1-restful","children":[{"level":3,"title":"1.1 RESTful 简介","slug":"_1-1-restful-简介","link":"#_1-1-restful-简介","children":[]},{"level":3,"title":"1.2 RESTful 的实现","slug":"_1-2-restful-的实现","link":"#_1-2-restful-的实现","children":[]},{"level":3,"title":"1.3 HiddenHttpMethodFilter","slug":"_1-3-hiddenhttpmethodfilter","link":"#_1-3-hiddenhttpmethodfilter","children":[]}]},{"level":2,"title":"2. RESTful案例","slug":"_2-restful案例","link":"#_2-restful案例","children":[{"level":3,"title":"2.1 准备工作","slug":"_2-1-准备工作","link":"#_2-1-准备工作","children":[]},{"level":3,"title":"2.2 功能清单","slug":"_2-2-功能清单","link":"#_2-2-功能清单","children":[]},{"level":3,"title":"2.3 具体功能：访问首页","slug":"_2-3-具体功能-访问首页","link":"#_2-3-具体功能-访问首页","children":[]},{"level":3,"title":"2.4 具体功能：查询所有员工数据","slug":"_2-4-具体功能-查询所有员工数据","link":"#_2-4-具体功能-查询所有员工数据","children":[]},{"level":3,"title":"2.5 具体功能：删除","slug":"_2-5-具体功能-删除","link":"#_2-5-具体功能-删除","children":[]},{"level":3,"title":"2.6 具体功能：跳转到添加数据页面","slug":"_2-6-具体功能-跳转到添加数据页面","link":"#_2-6-具体功能-跳转到添加数据页面","children":[]},{"level":3,"title":"2.7 具体功能：执行保存","slug":"_2-7-具体功能-执行保存","link":"#_2-7-具体功能-执行保存","children":[]},{"level":3,"title":"2.8 具体功能：跳转到更新数据页面","slug":"_2-8-具体功能-跳转到更新数据页面","link":"#_2-8-具体功能-跳转到更新数据页面","children":[]},{"level":3,"title":"2.9 具体功能：执行更新","slug":"_2-9-具体功能-执行更新","link":"#_2-9-具体功能-执行更新","children":[]}]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":6.87,"words":2062},"filePathRelative":"java/framework/springmvc/springmvc-3.md","localizedDate":"2021年9月8日","excerpt":"<h2> 1. RESTful</h2>\\n<h3> 1.1 RESTful 简介</h3>\\n<p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>\\n<h5> a&gt;资源</h5>\\n<p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个 URI 来标识。URI 既是资源的名称，也是资源在 Web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其进行交互。</p>","autoDesc":true}');export{e as data};
