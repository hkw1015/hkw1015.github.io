import{_ as o,Z as e,$ as t,a5 as s}from"./framework-1fb77053.js";const r={},c=s('<h2 id="v-if" tabindex="-1"><a class="header-anchor" href="#v-if" aria-hidden="true">#</a> v-if</h2><p><strong>写法：</strong></p><ul><li><code>v-if=&quot;表达式&quot;</code></li><li><code>v-else-if=&quot;表达式&quot;</code></li><li><code>v-else=&quot;表达式&quot;</code></li></ul><p><strong>适用于</strong>：切换频率较低的场景</p><p><strong>特点</strong>：不展示的 DOM 元素直接被移除</p><p><strong>注意</strong>：<code>v-if</code> 可以和 <code>v-else-if、v-else</code> 一起使用，但要求结构<strong>不能被 &quot;打断&quot;，要保持连续性</strong></p><h2 id="v-show" tabindex="-1"><a class="header-anchor" href="#v-show" aria-hidden="true">#</a> v-show</h2><p><strong>写法</strong>：<code>v-show=&quot;表达式&quot;</code></p><p><strong>适用于</strong>：切换频率高的场景</p><p><strong>特点</strong>：不展示的 DOM 元素未被移除，仅仅是使用样式隐藏掉</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><p>使用 <code>v-if</code> 的时候，元素可能获取不到，而使用 <code>v-show</code> 一定可以获取到</p>',12),d=[c];function n(a,i){return e(),t("div",null,d)}const l=o(r,[["render",n],["__file","10-条件渲染.html.vue"]]);export{l as default};
