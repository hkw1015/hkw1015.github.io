const n=JSON.parse('{"key":"v-422c02b4","path":"/java/basic/collection.html","title":"集合","lang":"zh-CN","frontmatter":{"title":"集合","category":"Java","tag":["Java 基础"],"description":"1. 数组与集合 内存中多个相同数据类型的存储“容器”：①数组 ②集合 对应的，数据的持久化：①数据库 ②文件（.txt,.jpg,...） ③xml文件 数组存储的特点 ①一旦初始化，其长度就确定了； ②存储有序的、重复的数据； ③声明的类型，就决定了只能操作此类型的元素。 数组存储的弊端： ①一旦初始化，其长度就不可变； ②数组中涉及到数据的增删改查的方法比较少，不及集合； ③不能存放无序的、要求不可重复的数据。 集合存储的优点 （1）使用集合，可以不用考虑长度问题，直接添加即可； （2）集合中提供了丰富的方法，便于数据的操作（CRUD）； （3）操作的数据特点更丰富，可以存储无序的、不可重复的；有序的、可重复的；键值对特点。 数据结构研究的问题 （1）数据与数据之间的逻辑关系：一对一，一对多，多对多； （2）数据的存储结构：①顺序存储（典型：一维数组）②链式存储。 // 单向链表 class A { \\tA next; } // 双向链表 class A { \\tA prev; \\tA next; } // 二叉树 class A { \\tA left; \\tA right; }","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/basic/collection.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"集合"}],["meta",{"property":"og:description","content":"1. 数组与集合 内存中多个相同数据类型的存储“容器”：①数组 ②集合 对应的，数据的持久化：①数据库 ②文件（.txt,.jpg,...） ③xml文件 数组存储的特点 ①一旦初始化，其长度就确定了； ②存储有序的、重复的数据； ③声明的类型，就决定了只能操作此类型的元素。 数组存储的弊端： ①一旦初始化，其长度就不可变； ②数组中涉及到数据的增删改查的方法比较少，不及集合； ③不能存放无序的、要求不可重复的数据。 集合存储的优点 （1）使用集合，可以不用考虑长度问题，直接添加即可； （2）集合中提供了丰富的方法，便于数据的操作（CRUD）； （3）操作的数据特点更丰富，可以存储无序的、不可重复的；有序的、可重复的；键值对特点。 数据结构研究的问题 （1）数据与数据之间的逻辑关系：一对一，一对多，多对多； （2）数据的存储结构：①顺序存储（典型：一维数组）②链式存储。 // 单向链表 class A { \\tA next; } // 双向链表 class A { \\tA prev; \\tA next; } // 二叉树 class A { \\tA left; \\tA right; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Java 基础"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. 数组与集合","slug":"_1-数组与集合","link":"#_1-数组与集合","children":[]},{"level":2,"title":"2. Collection 接口及其子接口","slug":"_2-collection-接口及其子接口","link":"#_2-collection-接口及其子接口","children":[]},{"level":2,"title":"3. Iterator 接口","slug":"_3-iterator-接口","link":"#_3-iterator-接口","children":[]},{"level":2,"title":"4. Map接口","slug":"_4-map接口","link":"#_4-map接口","children":[]},{"level":2,"title":"5. Collections 工具类的使用","slug":"_5-collections-工具类的使用","link":"#_5-collections-工具类的使用","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":19.95,"words":5986},"filePathRelative":"java/basic/collection.md","localizedDate":"2023年5月17日","excerpt":"<h2> 1. 数组与集合</h2>\\n<ul>\\n<li>\\n<p><strong>内存中多个相同数据类型的存储“容器”：①数组 ②集合</strong></p>\\n<p>对应的，数据的持久化：①数据库 ②文件（.txt,.jpg,...） ③xml文件</p>\\n</li>\\n<li>\\n<p><strong>数组存储的特点</strong></p>\\n<p>①一旦初始化，其长度就确定了；</p>\\n<p>②存储有序的、重复的数据；</p>\\n<p>③声明的类型，就决定了只能操作此类型的元素。</p>\\n<p>数组存储的弊端：</p>\\n<p>①一旦初始化，其长度就不可变；</p>\\n<p>②数组中涉及到数据的增删改查的方法比较少，不及集合；</p>\\n<p>③不能存放无序的、要求不可重复的数据。</p>\\n</li>\\n<li>\\n<p><strong>集合存储的优点</strong></p>\\n<p>（1）使用集合，可以不用考虑长度问题，直接添加即可；</p>\\n<p>（2）集合中提供了丰富的方法，便于数据的操作（CRUD）；</p>\\n<p>（3）操作的数据特点更丰富，可以存储无序的、不可重复的；有序的、可重复的；键值对特点。</p>\\n</li>\\n<li>\\n<p><strong>数据结构研究的问题</strong></p>\\n<p>（1）数据与数据之间的逻辑关系：一对一，一对多，多对多；</p>\\n<p>（2）数据的存储结构：①顺序存储（典型：一维数组）②链式存储。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 单向链表</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">A</span> next<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 双向链表</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">A</span> prev<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">A</span> next<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">// 二叉树</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">A</span> left<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">A</span> right<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{n as data};
