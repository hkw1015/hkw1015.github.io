import{_ as l,E as o,Z as p,$ as c,a3 as e,a4 as i,a0 as n,a1 as a,a5 as t}from"./framework-1fb77053.js";const d={},r=t(`<h2 id="_1-是什么" tabindex="-1"><a class="header-anchor" href="#_1-是什么" aria-hidden="true">#</a> 1. 是什么</h2><p>主机数据更新后根据配置和策略，自动同步到备机的 <span style="color:red;">master/slave 机制</span>， <span style="color:red;"><strong>Master 以写为主，Slave 以读为主</strong></span></p><h2 id="_2-能干嘛" tabindex="-1"><a class="header-anchor" href="#_2-能干嘛" aria-hidden="true">#</a> 2. 能干嘛</h2><ul><li>读写分离，性能扩展</li><li>容灾快速恢复</li></ul><figure><img src="http://img.hl1015.top/blog/image-20211123101533604.png" alt="image-20211123101533604" tabindex="0" loading="lazy"><figcaption>image-20211123101533604</figcaption></figure><h2 id="_3-怎么玩-主从复制" tabindex="-1"><a class="header-anchor" href="#_3-怎么玩-主从复制" aria-hidden="true">#</a> 3. 怎么玩：主从复制</h2><h3 id="_3-0-准备工作" tabindex="-1"><a class="header-anchor" href="#_3-0-准备工作" aria-hidden="true">#</a> 3.0 准备工作</h3><p><strong>（1）准备 3 台虚拟机，模拟 3 台 服务器</strong></p><figure><img src="http://img.hl1015.top/blog/image-20211123131953814.png" alt="image-20211123131953814" tabindex="0" loading="lazy"><figcaption>image-20211123131953814</figcaption></figure><p><strong>（2）在每台虚拟机上安装 Redis 6</strong></p><ul><li><p>1-上传 redis 6 安装包（使用 xftp 工具）</p><ul><li><img src="http://img.hl1015.top/blog/image-20211123132340910.png" alt="image-20211123132340910" tabindex="0" loading="lazy"><figcaption>image-20211123132340910</figcaption></li></ul></li><li><p>2-解压安装包</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> /opt/module/redis-6.2.1.tar.gz <span class="token parameter variable">-C</span> /opt/software/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>3-编译 &amp; 安装</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/software/redis-6.2.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token comment"># 编译</span>
<span class="token function">make</span> <span class="token function">install</span> <span class="token comment"># 安装</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>4-创建 /myredis 文件夹，并将 /opt/software/redis-6.2.1/redis.conf 复制到 /myredis 文件夹中</p><ul><li><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>mkdir <span class="token operator">/</span>myredis <span class="token comment"># 创建 myredis 文件夹</span>
<span class="token function">cp</span> <span class="token operator">/</span>opt/software/redis-6<span class="token punctuation">.</span>2<span class="token punctuation">.</span>1/redis<span class="token punctuation">.</span>conf <span class="token operator">/</span>myredis/  <span class="token comment"># 复制 redis.conf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>5-修改 /myredis/redis.conf，开启后台运行 &amp; 解除只绑定本机 &amp; 关闭本机保护模式</p><ul><li><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /myredis/redis.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>①开启后台运行</p><figure><img src="http://img.hl1015.top/blog/image-20211123152438661.png" alt="image-20211123152438661" tabindex="0" loading="lazy"><figcaption>image-20211123152438661</figcaption></figure><p>②解除只绑定本机，允许其他 ip 地址访问</p><figure><img src="http://img.hl1015.top/blog/image-20211124111506069.png" alt="image-20211124111506069" tabindex="0" loading="lazy"><figcaption>image-20211124111506069</figcaption></figure><p>③将本机访问保护模式设置 no</p><figure><img src="http://img.hl1015.top/blog/image-20211117193639739.png" alt="image-20211117193639739" tabindex="0" loading="lazy"><figcaption>image-20211117193639739</figcaption></figure></li></ul></li><li><p>6-<strong>从机</strong> centos 101、centos102 的 /myredis/redis.conf 中加入关于主从复制的配置【永久生效】</p><ul><li><p>使用 <code>ifconfig</code> 命令查看主机 centos103 服务器的 IP 地址</p><figure><img src="http://img.hl1015.top/blog/image-20211123231811467.png" alt="image-20211123231811467" tabindex="0" loading="lazy"><figcaption>image-20211123231811467</figcaption></figure><figure><img src="http://img.hl1015.top/blog/image-20211124130037420.png" alt="image-20211124130037420" tabindex="0" loading="lazy"><figcaption>image-20211124130037420</figcaption></figure></li><li><p>配从（库）不配主（库）-【命令行方式、临时生效】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>slaceof <span class="token operator">&lt;</span>ip<span class="token operator">&gt;</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token comment"># 成为某个实例的从服务器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_3-1-在-centos101-上新建-redis101-conf" tabindex="-1"><a class="header-anchor" href="#_3-1-在-centos101-上新建-redis101-conf" aria-hidden="true">#</a> 3.1 在 centos101 上新建 redis101.conf</h3><p><strong>（1）新建 redis101.conf</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /myredis/redis101.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）填写以下内容</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>include /myredis/redis.conf
pidfile /var/run/redis_101.pid
port <span class="token number">6379</span>
dbfilename dump101.rdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211123225922601.png" alt="image-20211123225922601" tabindex="0" loading="lazy"><figcaption>image-20211123225922601</figcaption></figure><h3 id="_3-2-在-centos102-上新建-redis102-conf" tabindex="-1"><a class="header-anchor" href="#_3-2-在-centos102-上新建-redis102-conf" aria-hidden="true">#</a> 3.2 在 centos102 上新建 redis102.conf</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /myredis/redis102.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>include /myredis/redis.conf
pidfile /var/run/redis_102.pid
port <span class="token number">6379</span>
dbfilename dump102.rdb
slave-priority <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211124123648963.png" alt="image-20211124123648963" tabindex="0" loading="lazy"><figcaption>image-20211124123648963</figcaption></figure><blockquote><p>slave-priority：设置从机的优先级，值越小，优先级越高，用于选择主机时使用【默认 100】</p></blockquote><h3 id="_3-3-在-centos103-上新建-redis103-conf" tabindex="-1"><a class="header-anchor" href="#_3-3-在-centos103-上新建-redis103-conf" aria-hidden="true">#</a> 3.3 在 centos103 上新建 redis103.conf</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /myredis/redis103.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>include /myredis/redis.conf
pidfile /var/run/redis_103.pid
port <span class="token number">6379</span>
dbfilename dump103.rdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211124123607103.png" alt="image-20211124123607103" tabindex="0" loading="lazy"><figcaption>image-20211124123607103</figcaption></figure><h3 id="_3-4-启动三台-redis-服务器" tabindex="-1"><a class="header-anchor" href="#_3-4-启动三台-redis-服务器" aria-hidden="true">#</a> 3.4 启动三台 redis 服务器</h3><figure><img src="http://img.hl1015.top/blog/image-20211123230737304.png" alt="image-20211123230737304" tabindex="0" loading="lazy"><figcaption>image-20211123230737304</figcaption></figure><figure><img src="http://img.hl1015.top/blog/image-20211123230655206.png" alt="image-20211123230655206" tabindex="0" loading="lazy"><figcaption>image-20211123230655206</figcaption></figure><figure><img src="http://img.hl1015.top/blog/image-20211123230711027.png" alt="image-20211123230711027" tabindex="0" loading="lazy"><figcaption>image-20211123230711027</figcaption></figure><h3 id="_3-5-查看三台主机运行情况" tabindex="-1"><a class="header-anchor" href="#_3-5-查看三台主机运行情况" aria-hidden="true">#</a> 3.5 查看三台主机运行情况</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>info replication <span class="token comment"># 打印主从复制的相关信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211124131256513.png" alt="image-20211124131256513" tabindex="0" loading="lazy"><figcaption>image-20211124131256513</figcaption></figure><p>演示主机写，从机读：</p><figure><img src="http://img.hl1015.top/blog/master_write_and_slave_read.gif" alt="master_write_and_slave_read" tabindex="0" loading="lazy"><figcaption>master_write_and_slave_read</figcaption></figure><h2 id="_4-常用-3-招" tabindex="-1"><a class="header-anchor" href="#_4-常用-3-招" aria-hidden="true">#</a> 4. 常用 3 招</h2><h3 id="_4-1-一主二仆" tabindex="-1"><a class="header-anchor" href="#_4-1-一主二仆" aria-hidden="true">#</a> 4.1 一主二仆</h3><ul><li>切入点问题？ <ul><li>slave1、slave2 是从头开始复制还是从切入点开始复制？【这个分情况】 <ul><li>如果是刚启动，slave 会主动向 master 发送 sync 命令，完成全量复制（即从头开始复制）</li><li>如果不是刚启动，master 会将所有新收集到的修改命令依次传给 slave 完成同步（即从切入点开始复制）</li></ul></li><li>比如 slave1 没参与到 set k1、k2、k3 的过程，从 set k4 才开始进入，那之前的 k1、k2、k3 是否也可以复制？ <ul><li>可以的，刚启动的 slave 会主动向 master 发送 sync 命令，完成全量复制</li></ul></li></ul></li><li>从机是否可以写？set 可否？ <ul><li>答案：不可以 <img src="http://img.hl1015.top/blog/image-20211124144411373.png" alt="image-20211124144411373" loading="lazy"></li></ul></li><li>主机 shutdown 后情况如何？从机是上位还是原地待命？ <ul><li>答案：从机原地待命 <img src="http://img.hl1015.top/blog/master_shutdown.gif" alt="master_shutdown" loading="lazy"></li></ul></li><li>其中一台从机 down 后情况如何？重新启动后它能跟上大部队吗？ <ul><li>答案：可以 <img src="http://img.hl1015.top/blog/slave_shutdown.gif" alt="slave_shutdown" loading="lazy"></li></ul></li></ul><p>想要回答好上面的问题，我们需要清楚 Redis 的 <strong>主从复制原理：</strong></p><ul><li>slave 启动成功连接到 master 后会发送一个 sync 命令</li><li>master 收到命令后启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master 将传送整个 RDB 数据文件到 slave，以完成一次完全同步</li><li>全量复制：slave 服务器在接收到 RDB 数据文件后，将其存盘并加载到内存中</li><li>增量复制：master 继续将所有新收集到的修改命令依次传给 slave 完成同步</li><li>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行</li></ul><figure><img src="http://img.hl1015.top/blog/image-20211124141633846.png" alt="image-20211124141633846" tabindex="0" loading="lazy"><figcaption>image-20211124141633846</figcaption></figure><h3 id="_4-2-薪火相传" tabindex="-1"><a class="header-anchor" href="#_4-2-薪火相传" aria-hidden="true">#</a> 4.2 薪火相传</h3><p>上一个 slave 可以是下一个 slave 的 master，slave 同样可以接收其他 slaves 的连接和同步请求，那么该 slave 就作为了链条中下一个 master，可以有效减轻 master 的写压力，去中心化降低风险。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>slaveof <span class="token operator">&lt;</span>masterip<span class="token operator">&gt;</span><span class="token operator">&lt;</span>port<span class="token operator">&gt;</span> <span class="token comment"># 建立主从复制关系</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,44),u=t('<figure><img src="http://img.hl1015.top/blog/image-20211124152244129.png" alt="image-20211124152244129" tabindex="0" loading="lazy"><figcaption>image-20211124152244129</figcaption></figure><figure><img src="http://img.hl1015.top/blog/xinhuoxiangchuan.gif" alt="xinhuoxiangchuan" tabindex="0" loading="lazy"><figcaption>xinhuoxiangchuan</figcaption></figure><blockquote><p>从机 centos101-IP：192.168.184.130，从机 centos102-IP：192.168.184.131，主机 centos103-IP：192.168.184.132</p></blockquote><h3 id="_4-3-反客为主" tabindex="-1"><a class="header-anchor" href="#_4-3-反客为主" aria-hidden="true">#</a> 4.3 反客为主</h3><p>当一个 master 宕机后，后面的 slave 可以立刻升为 master，其后面的 slave 不用做任何修改，使用命令 <code>slaveof no one</code> 可以将从机变为主机【全手动操作】</p><figure><img src="http://img.hl1015.top/blog/fankeweizhu.gif" alt="fankeweizhu" tabindex="0" loading="lazy"><figcaption>fankeweizhu</figcaption></figure><h2 id="_5-哨兵模式-sentinel" tabindex="-1"><a class="header-anchor" href="#_5-哨兵模式-sentinel" aria-hidden="true">#</a> 5. 哨兵模式（sentinel）</h2><h3 id="_5-1-是什么" tabindex="-1"><a class="header-anchor" href="#_5-1-是什么" aria-hidden="true">#</a> 5.1 是什么</h3>',8),g=n("strong",null,"反客为主的自动版",-1),m=t(`<figure><img src="http://img.hl1015.top/blog/image-20211124162400098.png" alt="image-20211124162400098" tabindex="0" loading="lazy"><figcaption>image-20211124162400098</figcaption></figure><h3 id="_5-2-怎么玩-使用步骤" tabindex="-1"><a class="header-anchor" href="#_5-2-怎么玩-使用步骤" aria-hidden="true">#</a> 5.2 怎么玩（使用步骤）</h3><h4 id="_5-2-1-调整回一主二仆模式-centos103-带着-centos101、centos102" tabindex="-1"><a class="header-anchor" href="#_5-2-1-调整回一主二仆模式-centos103-带着-centos101、centos102" aria-hidden="true">#</a> 5.2.1 调整回一主二仆模式，centos103 带着 centos101、centos102</h4><figure><img src="http://img.hl1015.top/blog/image-20211124162927994.png" alt="image-20211124162927994" tabindex="0" loading="lazy"><figcaption>image-20211124162927994</figcaption></figure><h4 id="_5-2-2-自定义的-myredis-目录下新建-sentinel-conf" tabindex="-1"><a class="header-anchor" href="#_5-2-2-自定义的-myredis-目录下新建-sentinel-conf" aria-hidden="true">#</a> 5.2.2 自定义的 /myredis 目录下新建 sentinel.conf</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /myredis/sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-2-3-配置哨兵-填写内容" tabindex="-1"><a class="header-anchor" href="#_5-2-3-配置哨兵-填写内容" aria-hidden="true">#</a> 5.2.3 配置哨兵，填写内容</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sentinel monitor centos103 <span class="token number">192.168</span>.184.132 <span class="token number">6379</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>其中 centos103 为监控对象起的服务器名称，1 为至少有多少哨兵同一迁移的数量</p></blockquote><h4 id="_5-2-4-启动哨兵" tabindex="-1"><a class="header-anchor" href="#_5-2-4-启动哨兵" aria-hidden="true">#</a> 5.2.4 启动哨兵</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-sentinel /myredis/sentinel.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以 centos101 启动的截图为例：</p><figure><img src="http://img.hl1015.top/blog/image-20211124170918945.png" alt="image-20211124170918945" tabindex="0" loading="lazy"><figcaption>image-20211124170918945</figcaption></figure>`,13),h=n("strong",null,"redis-benchmark",-1),k=n("h4",{id:"_5-2-5-当主机挂掉-从机选举中产生新的主机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-2-5-当主机挂掉-从机选举中产生新的主机","aria-hidden":"true"},"#"),a(" 5.2.5 当主机挂掉，从机选举中产生新的主机")],-1),v=n("figure",null,[n("img",{src:"http://img.hl1015.top/blog/sentinel.gif",alt:"sentinel",tabindex:"0",loading:"lazy"}),n("figcaption",null,"sentinel")],-1),b=n("figure",null,[n("img",{src:"http://img.hl1015.top/blog/image-20211124214744943.png",alt:"image-20211124214744943",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20211124214744943")],-1),f=t(`<h4 id="_5-2-6-复制延时" tabindex="-1"><a class="header-anchor" href="#_5-2-6-复制延时" aria-hidden="true">#</a> 5.2.6 复制延时</h4><p>由于所有的写操作都是先在 master 上操作，然后同步更新到 slave 上，所以从 master 同步到 slave 机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，slave 机器数量的增加也会使这个问题更加严重。</p><h3 id="_5-3-故障恢复" tabindex="-1"><a class="header-anchor" href="#_5-3-故障恢复" aria-hidden="true">#</a> 5.3 故障恢复</h3><p><strong>（1）新主登基</strong></p><p>从下线的主服务的所有从服务里面挑选一个从服务，将其转成主服务，选择条件依次为：</p><ol><li>选择优先级靠前的</li><li>选择偏移量最大的</li><li>选择 runid 最小的从服务</li></ol><blockquote><p>优先级在 redis.conf 中默认：<code>slave-priority 100</code>，值越小优先级越高</p><p>偏移量是指获得原主机数据最全的</p><p>每个 redis 实例启动后都会随机生成一个 40 位的 runid</p></blockquote><p><strong>（2）群仆俯首</strong></p><p>挑选出新的主服务之后，sentinel 向原主服务的从服务发送 salveof 新主服务的命令，复制新 master</p><p><strong>（3）旧主俯首</strong></p><p>当已下线的服务重新上线时，sentinel 会向其发送 slaveof 命令，让其成为新主的从</p><h3 id="_5-4-主从复制-jedis-应用" tabindex="-1"><a class="header-anchor" href="#_5-4-主从复制-jedis-应用" aria-hidden="true">#</a> 5.4 主从复制（jedis 应用）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisSentinelTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisSentinelPool</span> jedisSentinelPool <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedisFromSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jedisSentinelPool <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sentinelSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sentinelSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.184.130:26379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sentinelSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.184.131:26379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sentinelSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.184.132:26379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">JedisPoolConfig</span> jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大可用连接数</span>
            jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大闲置连接数</span>
            jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最小闲置连接数</span>
            jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setBlockWhenExhausted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接耗尽是否等待</span>
            jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待时间</span>
            jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取连接的时候进行一下测试 ping pong</span>

            jedisSentinelPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span><span class="token string">&quot;centos103&quot;</span><span class="token punctuation">,</span> sentinelSet<span class="token punctuation">,</span> jedisPoolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> jedisSentinelPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> jedisSentinelPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Jedis</span> jedisFromSentinel <span class="token operator">=</span> <span class="token class-name">JedisSentinelTest</span><span class="token punctuation">.</span><span class="token function">getJedisFromSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ping <span class="token operator">=</span> jedisFromSentinel<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function _(x,y){const s=o("font");return p(),c("div",null,[r,e(s,{color:"blue"},{default:i(()=>[a("某个 slave 中途变更转向：会清除之前的数据，重新建立连接，全量拷贝最新的")]),_:1}),e(s,{color:"blue"},{default:i(()=>[a("风险：一旦某个 slave 宕机，后面的 slave 都没法备份【因为主机如果挂了，从机还是从机，无法写数据】")]),_:1}),u,n("p",null,[a("可以理解为"),e(s,{color:"red"},{default:i(()=>[g]),_:1}),a("，能够在后台监控主机是否故障，如果故障了根据投票自动将从库转换为主库")]),m,n("blockquote",null,[n("p",null,[a("/usr/local/bin 目录下，带的 "),e(s,{color:"red"},{default:i(()=>[h]),_:1}),a(" 工具，可以用于 redis 做压测")])]),k,v,b,n("p",null,[a("大概 10 秒左右，可以看到哨兵窗口日志，切换了新的主机【哪个从机会被选举为主机呢？根据优先级别："),e(s,{color:"red"},{default:i(()=>[a("slave-priority")]),_:1}),a("】，"),e(s,{color:"green"},{default:i(()=>[a("原主机重启后会变为从机")]),_:1}),a("。")]),f])}const z=l(d,[["render",_],["__file","redis-14.html.vue"]]);export{z as default};
