import{_ as a,Z as s,$ as n,a5 as e}from"./framework-1fb77053.js";const p={},t=e(`<h2 id="ref-属性" tabindex="-1"><a class="header-anchor" href="#ref-属性" aria-hidden="true">#</a> ref 属性</h2><p>（1）功能：被用来给元素或子组件注册引用信息（id 的替代者）</p><p>（2）应用场景</p><ul><li>应用在 html 标签上获取的是真实 DOM 元素</li><li>应用在组件标签上获取的是组件实例对象（vc）</li></ul><p>（3）使用方式</p><ul><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;...&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ul><h2 id="props-配置项" tabindex="-1"><a class="header-anchor" href="#props-配置项" aria-hidden="true">#</a> props 配置项</h2><p>（1）功能：让组件接收外部传过来的数据</p><p>（2）使用方式</p><ul><li>传递数据</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
或者
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Demo</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>接收数据</p><ul><li><p>第一种方式（只接收）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>第二种方式（限制类型）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> Number
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// 类型</span>
        <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 必要性</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;老王&#39;</span> <span class="token comment">// 默认值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><p>（3）说明</p><p>props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据</p><h2 id="mixin-混入" tabindex="-1"><a class="header-anchor" href="#mixin-混入" aria-hidden="true">#</a> mixin 混入</h2><p>（1）功能：可以把多个组件公用的配置提取成一个混入对象</p><p>（2）使用方式</p><ul><li>第一步，定义混入（mixin.js），例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二步，使用混入 <ul><li>全局混入：<code>Vue.mixin(xxx)</code></li><li>局部混入：<code>mixins: [xxx]</code></li></ul></li></ul><p>（3）说明</p><ul><li>如果组件的 data 和 methods 配置项和混入冲突了，以组件的为准</li><li>如果组件的生命周期函数和混入冲突了，则两者都会保留</li></ul>`,22),l=[t];function i(o,c){return s(),n("div",null,l)}const u=a(p,[["render",i],["__file","02-ref、props、mixin.html.vue"]]);export{u as default};
