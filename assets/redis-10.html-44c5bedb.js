import{_ as e,E as i,Z as t,$ as p,a0 as n,a1 as l,a3 as o,a5 as a}from"./framework-1fb77053.js";const c={},r=a(`<h2 id="_1-redis-的事务定义" tabindex="-1"><a class="header-anchor" href="#_1-redis-的事务定义" aria-hidden="true">#</a> 1. Redis 的事务定义</h2><p>Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis 事务的主要作用就是 <span style="color:red;">串联多个命令</span> 防止别的命令插队。</p><h2 id="_2-multi、exec、discard" tabindex="-1"><a class="header-anchor" href="#_2-multi、exec、discard" aria-hidden="true">#</a> 2. Multi、Exec、Discard</h2><p>从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过 Discard 来放弃组队。</p><figure><img src="http://img.hl1015.top/blog/image-20211118220138936.png" alt="image-20211118220138936" tabindex="0" loading="lazy"><figcaption>image-20211118220138936</figcaption></figure><p><strong>案例：</strong></p><p>（1）组队成功，提交成功</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k1 v1
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> k2 v2
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）组队阶段报错，提交失败</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> m1 v1
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> m2
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR wrong number of arguments <span class="token keyword">for</span> <span class="token string">&#39;set&#39;</span> <span class="token builtin class-name">command</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> m3 v3
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> EXECABORT Transaction discarded because of previous errors.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）组队成功，提交有成功有失败的情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multi
OK
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> m1 v1
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> incr m1
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> m2 v2
QUEUED
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span>
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range
<span class="token number">3</span><span class="token punctuation">)</span> OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-事务的错误处理" tabindex="-1"><a class="header-anchor" href="#_3-事务的错误处理" aria-hidden="true">#</a> 3. 事务的错误处理</h2><p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</p><figure><img src="http://img.hl1015.top/blog/image-20211118220933644.png" alt="image-20211118220933644" tabindex="0" loading="lazy"><figcaption>image-20211118220933644</figcaption></figure><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚</p><figure><img src="http://img.hl1015.top/blog/image-20211118221059732.png" alt="image-20211118221059732" tabindex="0" loading="lazy"><figcaption>image-20211118221059732</figcaption></figure><h2 id="_4-为什么要做成事务" tabindex="-1"><a class="header-anchor" href="#_4-为什么要做成事务" aria-hidden="true">#</a> 4. 为什么要做成事务</h2><p>想想一个场景：有很多人都有你的账户，同时去参加双十一抢购</p><h2 id="_5-事务冲突的问题" tabindex="-1"><a class="header-anchor" href="#_5-事务冲突的问题" aria-hidden="true">#</a> 5. 事务冲突的问题</h2><h3 id="_5-1-例子" tabindex="-1"><a class="header-anchor" href="#_5-1-例子" aria-hidden="true">#</a> 5.1 例子</h3><ul><li>一个请求想给金额减 8000</li><li>一个请求想给金额减 5000</li><li>一个请求想给金额减 1000</li></ul><figure><img src="http://img.hl1015.top/blog/image-20211118221403594.png" alt="image-20211118221403594" tabindex="0" loading="lazy"><figcaption>image-20211118221403594</figcaption></figure><h3 id="_5-2-悲观锁" tabindex="-1"><a class="header-anchor" href="#_5-2-悲观锁" aria-hidden="true">#</a> 5.2 悲观锁</h3><figure><img src="http://img.hl1015.top/blog/image-20211118221615244.png" alt="image-20211118221615244" tabindex="0" loading="lazy"><figcaption>image-20211118221615244</figcaption></figure><p><span style="color:red;"><strong>悲观锁（Pessimistic Lock）</strong></span>，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。<span style="color:red;"><strong>传统的关系型数据库里边就用到了这种锁机制</strong></span>，比如<strong>行锁，表锁</strong>等，<strong>读锁，写锁</strong>等，都是在做操作之前先上锁。</p><h3 id="_5-3-乐观锁" tabindex="-1"><a class="header-anchor" href="#_5-3-乐观锁" aria-hidden="true">#</a> 5.3 乐观锁</h3><figure><img src="http://img.hl1015.top/blog/image-20211118222125624.png" alt="image-20211118222125624" tabindex="0" loading="lazy"><figcaption>image-20211118222125624</figcaption></figure><p><span style="color:red;"><strong>乐观锁（Optimistic Lock）</strong></span>，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<span style="color:red;"><strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong></span>。<span style="color:red;">Redis 就是利用这种 check-and-set 机制实现事务的</span>。</p><h3 id="_5-4-watch-key-key" tabindex="-1"><a class="header-anchor" href="#_5-4-watch-key-key" aria-hidden="true">#</a> 5.4 WATCH key [key ...]</h3><p>在执行 mutli 之前，先执行 watch key1 [key2 ...]，可以监视一个（或多个）key，如果在事务<strong>执行之前这个（或这些）key 被其他命令所改动，那么事务将被打断</strong>。</p><h3 id="_5-5-unwatch" tabindex="-1"><a class="header-anchor" href="#_5-5-unwatch" aria-hidden="true">#</a> 5.5 unwatch</h3><p>取消 WATCH 命令对所有 key 的监视。</p><p>如果在执行 WATCH 命令之后，EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p>`,36),d={href:"http://doc.redisfans.com/transaction/exec.html",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="_6-redis-事务三特性" tabindex="-1"><a class="header-anchor" href="#_6-redis-事务三特性" aria-hidden="true">#</a> 6. Redis 事务三特性</h2><ul><li>单独的隔离操作 <ul><li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断</li></ul></li><li>没有隔离级别的概念 <ul><li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li></ul></li><li>不保证原子性 <ul><li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li></ul></li></ul>',2);function m(g,h){const s=i("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[n("a",d,[l("http://doc.redisfans.com/transaction/exec.html"),o(s)])]),u])}const b=e(c,[["render",m],["__file","redis-10.html.vue"]]);export{b as default};
