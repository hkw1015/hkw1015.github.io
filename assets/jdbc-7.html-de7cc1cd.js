const e=JSON.parse('{"key":"v-263ae3f4","path":"/java/jdbc/jdbc-7.html","title":"数据库连接池","lang":"zh-CN","frontmatter":{"title":"数据库连接池","date":"2021-09-14T00:00:00.000Z","category":"Java","tag":["JDBC"],"description":"1. JDBC 数据库连接池的必要性 （1）在使用开发基于数据库的 web 程序时，传统的设计模式是按以下步骤： ①在主程序(如 servlet、beans)中建立数据库连接 ②进行 sql 操作 ③断开数据库连接 （2）这种模式开发，存在的问题： ①普通的 JDBC 数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s~1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。数据库的连接资源并没有得到很好的利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。 ②对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄露，最终将导致重启数据库。(回忆：何为 Java 的内存泄露?) ③这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及地分配出去，如果连接过多，也可能导致内存泄漏，服务器崩溃。","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/jdbc/jdbc-7.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"数据库连接池"}],["meta",{"property":"og:description","content":"1. JDBC 数据库连接池的必要性 （1）在使用开发基于数据库的 web 程序时，传统的设计模式是按以下步骤： ①在主程序(如 servlet、beans)中建立数据库连接 ②进行 sql 操作 ③断开数据库连接 （2）这种模式开发，存在的问题： ①普通的 JDBC 数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s~1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。数据库的连接资源并没有得到很好的利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。 ②对于每一次数据库连接，使用完后都得断开。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄露，最终将导致重启数据库。(回忆：何为 Java 的内存泄露?) ③这种开发不能控制被创建的连接对象数，系统资源会被毫无顾及地分配出去，如果连接过多，也可能导致内存泄漏，服务器崩溃。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"JDBC"}],["meta",{"property":"article:published_time","content":"2021-09-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据库连接池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. JDBC 数据库连接池的必要性","slug":"_1-jdbc-数据库连接池的必要性","link":"#_1-jdbc-数据库连接池的必要性","children":[]},{"level":2,"title":"2. 数据库连接池技术","slug":"_2-数据库连接池技术","link":"#_2-数据库连接池技术","children":[]},{"level":2,"title":"3. 多种开源的数据库连接池","slug":"_3-多种开源的数据库连接池","link":"#_3-多种开源的数据库连接池","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":5.51,"words":1654},"filePathRelative":"java/jdbc/jdbc-7.md","localizedDate":"2021年9月14日","excerpt":"<h2> 1. JDBC 数据库连接池的必要性</h2>\\n<p>（1）在使用开发基于数据库的 web 程序时，传统的设计模式是按以下步骤：</p>\\n<ul>\\n<li>①在主程序(如 servlet、beans)中建立数据库连接</li>\\n<li>②进行 sql 操作</li>\\n<li>③断开数据库连接</li>\\n</ul>\\n<p>（2）这种模式开发，存在的问题：</p>\\n<ul>\\n<li>①<strong>普通的 JDBC 数据库连接使用 DriverManager 来获取</strong>，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s~1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。数据库的连接资源并没有得到很好的利用。若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li>\\n<li>②<strong>对于每一次数据库连接，使用完后都得断开</strong>。否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄露，最终将导致重启数据库。(回忆：何为 Java 的内存泄露?)</li>\\n<li>③<strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及地分配出去，如果连接过多，也可能导致内存泄漏，服务器崩溃。</li>\\n</ul>","autoDesc":true}');export{e as data};
