import{_ as n,Z as a,$ as s,a5 as t}from"./framework-1fb77053.js";const e={},p=t(`<h2 id="一、lambda-表达式" tabindex="-1"><a class="header-anchor" href="#一、lambda-表达式" aria-hidden="true">#</a> 一、Lambda 表达式</h2><h3 id="_1-lambda-使用" tabindex="-1"><a class="header-anchor" href="#_1-lambda-使用" aria-hidden="true">#</a> 1. Lambda 使用</h3><h4 id="_1-1-为什么要使用-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么要使用-lambda-表达式" aria-hidden="true">#</a> 1.1 为什么要使用 Lambda 表达式？</h4><p>Lambda 表达式是一个 <strong>匿名函数</strong>，我们可以把表达式理解为是 <strong>一段可以传递的代码</strong>（将代码像数据一样进行传递），可以写出更简洁、灵活的代码，作为一种更紧凑的代码风格，使 Java 的语言表达能力得到了提升。</p><h4 id="_1-2-从匿名内部类到-lambda-的转换" tabindex="-1"><a class="header-anchor" href="#_1-2-从匿名内部类到-lambda-的转换" aria-hidden="true">#</a> 1.2 从匿名内部类到 Lambda 的转换</h4><p>举例 1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 匿名内部类</span>
    <span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Lambda 表达式</span>
    <span class="token class-name">Runnable</span> r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Lambda!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    r2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211018214929756.png" alt="image-20211018214929756" tabindex="0" loading="lazy"><figcaption>image-20211018214929756</figcaption></figure><p>举例 2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用匿名内部类作为参数传递</span>
    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用Lambda表达式作为参数传递</span>
    <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> comp2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>comp1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;AB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;===========================================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeSet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>comp2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ABC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;AB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeSet2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211018215007273.png" alt="image-20211018215007273" tabindex="0" loading="lazy"><figcaption>image-20211018215007273</figcaption></figure><h4 id="_3-lambda-表达式语法" tabindex="-1"><a class="header-anchor" href="#_3-lambda-表达式语法" aria-hidden="true">#</a> 3. Lambda 表达式语法</h4><p>Lambda 表达式在 Java 语言中引入了一个新的语法语法元素和操作符。这个操作符为 &quot;<strong>-&gt;</strong>&quot; ，该操作符被称为 Lambda 操作符或箭头操作符。它将 Lambda 分为两个部分：</p><ul><li>左侧：指定了 Lambda 表达式需要的所有参数</li><li>右侧：指定了 Lambda 体，即 Lambda 表达式要执行的功能</li></ul><p><strong>语法格式一</strong>：无参，无返回值，Lambda 体只需一条语句</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Lambda!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>语法格式二</strong>：Lambda 体只需一个参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun1 <span class="token operator">=</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>语法格式三</strong>：Lambda 体只需要一个参数时，参数的小括号可以省略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun2 <span class="token operator">=</span> arg <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>语法格式四</strong>：Lambda 体需要两个参数，并且有返回值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> bo1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> x<span class="token punctuation">,</span> <span class="token class-name">Long</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;实现函数式接口!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="http://img.hl1015.top/blog/image-20211012170726353.png" alt="image-20211012170726353" tabindex="0" loading="lazy"><figcaption>image-20211012170726353</figcaption></figure><p><span style="color:blue;">类型推断</span> 说明：</p><p>上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的，这就是所谓的 &quot;类型推断&quot;。</p><p><strong>语法格式五</strong>：当 Lambda 体只有 <span style="color:red;"><strong>一条</strong></span> 语句时，<span style="color:red;"><strong>return</strong></span> 和 <span style="color:red;"><strong>大括号</strong></span> 可以省略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> bo2 <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-函数式接口" tabindex="-1"><a class="header-anchor" href="#_2-函数式接口" aria-hidden="true">#</a> 2. 函数式接口</h3><h4 id="_2-1-什么是函数式接口" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是函数式接口" aria-hidden="true">#</a> 2.1 什么是函数式接口</h4><ul><li>只包含一个抽象方法的接口，称为 <strong>函数式接口</strong></li><li>你可以通过 Lambda 表达式来创建该接口的对象（若 Lambda 表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）</li><li>我们可以在任意函数式接口上使用 <strong>@FunctionalInterface</strong> 注解，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口</li></ul><h4 id="_2-2-自定义函数式接口" tabindex="-1"><a class="header-anchor" href="#_2-2-自定义函数式接口" aria-hidden="true">#</a> 2.2 自定义函数式接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun1</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数式接口中使用泛型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyFun2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-作为参数传递-lambda-表达式" tabindex="-1"><a class="header-anchor" href="#_2-3-作为参数传递-lambda-表达式" aria-hidden="true">#</a> 2.3 作为参数传递 Lambda 表达式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">MyFun2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fun<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为参数传递 Lambda 表达式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> newStr <span class="token operator">=</span> <span class="token function">toUpperStr</span><span class="token punctuation">(</span><span class="token string">&quot;abcde&quot;</span><span class="token punctuation">,</span> s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;newStr = &quot;</span> <span class="token operator">+</span> newStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><span style="color:red;">作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，接收 Lambda 表达式的参数必须是与该 Lambda 表达式兼容的函数式接口的类型。</span></p><h4 id="_2-4-java-内置四大核心函数式接口" tabindex="-1"><a class="header-anchor" href="#_2-4-java-内置四大核心函数式接口" aria-hidden="true">#</a> 2.4 Java 内置四大核心函数式接口</h4><table><thead><tr><th style="text-align:center;">函数式接口</th><th style="text-align:center;">参数类型</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">用途</th></tr></thead><tbody><tr><td style="text-align:center;">Consumer&lt;T&gt; 消费型接口</td><td style="text-align:center;">T</td><td style="text-align:center;">void</td><td style="text-align:center;">对类型为 T 的对象应用操作，包含方法：void accept(T t);</td></tr><tr><td style="text-align:center;">Supplier&lt;T&gt; 供给型接口</td><td style="text-align:center;">无</td><td style="text-align:center;">T</td><td style="text-align:center;">返回类型为 T 的对象，包含方法：T get();</td></tr><tr><td style="text-align:center;">Function&lt;T&gt; 函数型接口</td><td style="text-align:center;">T</td><td style="text-align:center;">R</td><td style="text-align:center;">对类型为 T 的对象应用操作，并返回结果，结果是 R 类型的对象，包含方法：R apply(T t);</td></tr><tr><td style="text-align:center;">Predicate&lt;T&gt; 断定型接口</td><td style="text-align:center;">T</td><td style="text-align:center;">boolean</td><td style="text-align:center;">确定类型为 T 的对象是否满足某约束，并返回 boolean 值，包含方法 boolean test(T t);</td></tr></tbody></table><h4 id="_2-5-其他接口" tabindex="-1"><a class="header-anchor" href="#_2-5-其他接口" aria-hidden="true">#</a> 2.5 其他接口</h4><table><thead><tr><th style="text-align:center;">函数式接口</th><th style="text-align:center;">参数类型</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">用途</th></tr></thead><tbody><tr><td style="text-align:center;">BiFunction&lt;T, U, R&gt;</td><td style="text-align:center;">T, U</td><td style="text-align:center;">R</td><td style="text-align:center;">对类型为 T, U 参数应用操作，返回 R 类型的结果，包含方法为 R apply(T t, U u);</td></tr><tr><td style="text-align:center;">UnaryOperator&lt;T&gt; （Function 子接口）</td><td style="text-align:center;">T</td><td style="text-align:center;">T</td><td style="text-align:center;">对类型为 T 的对象进行一元运算，并返回 T 类型的结果，包含方法为 T apply(T t);</td></tr><tr><td style="text-align:center;">BinaryOperator&lt;T&gt; （BiFunction 子接口）</td><td style="text-align:center;">T, T</td><td style="text-align:center;">T</td><td style="text-align:center;">对类型为 T 的对象进行二元运算，并返回 T 类型的结果，包含方法为 T apply(T t1, T t2);</td></tr><tr><td style="text-align:center;">BiConsumer&lt;T, U&gt;</td><td style="text-align:center;">T, U</td><td style="text-align:center;">void</td><td style="text-align:center;">对类型为 T, U 参数应用操作，包含方法为 void accept(T t, U u);</td></tr><tr><td style="text-align:center;">ToIntFunction&lt;T&gt;<br>ToLongFunction&lt;T&gt;<br>ToDoubleFunction&lt;T&gt;</td><td style="text-align:center;">T</td><td style="text-align:center;">int<br>long<br>double</td><td style="text-align:center;">分别计算 int、long、double 值的函数</td></tr><tr><td style="text-align:center;">IntFunction&lt;R&gt;<br>LongFunction&lt;R&gt;<br>DoubleFunction&lt;R&gt;</td><td style="text-align:center;">int<br>long<br>doubleR</td><td style="text-align:center;">R</td><td style="text-align:center;">参数分别为 int、long、double 类型的函数</td></tr></tbody></table><h3 id="_3-方法引用与构造器引用" tabindex="-1"><a class="header-anchor" href="#_3-方法引用与构造器引用" aria-hidden="true">#</a> 3. 方法引用与构造器引用</h3><h4 id="_3-1-方法引用" tabindex="-1"><a class="header-anchor" href="#_3-1-方法引用" aria-hidden="true">#</a> 3.1 方法引用</h4><p>当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用！（实现抽象方法的参数列表，必须与方法引用的方法的参数列表保持一致！）</p><p>方法引用：使用操作符 &quot;<strong>::</strong>&quot; 将方法名和对象或类的名字分隔开来。</p><p>有如下三种主要使用情况：</p><ul><li><strong>对象 :: 实例方法</strong></li><li><strong>类 :: 静态方法</strong></li><li><strong>类 :: 实例方法</strong></li></ul><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> bo <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">BinaryOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> bo <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">pow</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">compare</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">,</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：当需要引用方法的第一个参数是调用对象，并且第二个参数是需要引用方法的第二个参数（或无参数）时：ClassName :: methodName</p><h4 id="_4-构造器引用" tabindex="-1"><a class="header-anchor" href="#_4-构造器引用" aria-hidden="true">#</a> 4. 构造器引用</h4><p>格式：<strong>ClassName :: new</strong></p><p>与函数式接口相结合，自动与函数式接口中方法兼容，可以把构造器引用赋值给定义的方法，与构造器参数列表要与接口中抽象方法的参数列表一致！</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">&gt;</span></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">&gt;</span></span> fun <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-数组引用" tabindex="-1"><a class="header-anchor" href="#_5-数组引用" aria-hidden="true">#</a> 5. 数组引用</h4><p>格式：<strong>type[] :: new</strong></p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> fun <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、强大的-stream-api" tabindex="-1"><a class="header-anchor" href="#二、强大的-stream-api" aria-hidden="true">#</a> 二、强大的 Stream API</h2><h3 id="_1-了解-stream" tabindex="-1"><a class="header-anchor" href="#_1-了解-stream" aria-hidden="true">#</a> 1. 了解 Stream</h3><p>Java 8 中有两大最为重要的改变，第一个是 Lambda 表达式，另一个则是：<strong>Stream API（java.util.stream.*）</strong></p><p>Stream 是 Java 8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于 SQL 执行的数据库查询，也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><h3 id="_2-什么是-stream" tabindex="-1"><a class="header-anchor" href="#_2-什么是-stream" aria-hidden="true">#</a> 2. 什么是 Stream</h3><h4 id="_2-1-流-stream-到底是什么呢" tabindex="-1"><a class="header-anchor" href="#_2-1-流-stream-到底是什么呢" aria-hidden="true">#</a> 2.1 流（Stream）到底是什么呢？</h4><p>流（Stream）是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</p><p><strong>&quot;集合讲的是数据，流讲的是计算！&quot;</strong></p><p>注意：</p><ul><li>Stream 自己不会存储元素</li><li>Stream 不会改变源对象，相反，它会返回一个持有结果的新的 Stream</li><li>Stream 操作是延迟执行的，这意味着它会等到需要结果的时候才执行</li></ul><h4 id="_2-2-stream-的三个操作" tabindex="-1"><a class="header-anchor" href="#_2-2-stream-的三个操作" aria-hidden="true">#</a> 2.2 Stream 的三个操作</h4><ul><li><p><strong>创建 Stream</strong></p><p>一个数据源（如：集合、数组），获取一个流</p></li><li><p><strong>中间操作</strong></p><p>一个中间操作链，对数据源的数据进行处理</p></li><li><p><strong>终止操作（终端操作）</strong></p><p>一个终止操作，执行中间操作，并产生结果</p></li></ul><figure><img src="http://img.hl1015.top/blog/image-20211016160909570.png" alt="image-20211016160909570" tabindex="0" loading="lazy"><figcaption>image-20211016160909570</figcaption></figure><h3 id="_3-创建-stream-流" tabindex="-1"><a class="header-anchor" href="#_3-创建-stream-流" aria-hidden="true">#</a> 3. 创建 Stream 流</h3><h4 id="_3-1-由集合创建-stream" tabindex="-1"><a class="header-anchor" href="#_3-1-由集合创建-stream" aria-hidden="true">#</a> 3.1 由集合创建 Stream</h4><p>Java 8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><ul><li>default Stream&lt;E&gt; stream()：返回一个顺序流</li><li>default Stream&lt;E&gt; parallelStream()：返回一个并行流</li></ul><h4 id="_3-2-由数组创建-stream" tabindex="-1"><a class="header-anchor" href="#_3-2-由数组创建-stream" aria-hidden="true">#</a> 3.2 由数组创建 Stream</h4><p>Java 8 中的 Arrays 的静态方法 steam() 可以获取数组流：</p><ul><li>static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)：返回一个流</li></ul><p>重载形式，能够处理对应基本类型的数组：</p><ul><li>public static IntStream stream(int[] array)</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul><h4 id="_3-3-由值创建流" tabindex="-1"><a class="header-anchor" href="#_3-3-由值创建流" aria-hidden="true">#</a> 3.3 由值创建流</h4><p>可以使用静态方法 Stream.of()，通过显示值创建一个流，它可以接收任意数量的参数。</p><ul><li>public static&lt;T&gt; Stream&lt;T&gt; of(T ... values)：返回一个流</li></ul><h4 id="_3-4-由函数创建流-创建无限流" tabindex="-1"><a class="header-anchor" href="#_3-4-由函数创建流-创建无限流" aria-hidden="true">#</a> 3.4 由函数创建流：创建无限流</h4><p>可以使用静态方法 Stream.iterate() 和 Stream.generate()，创建无限流：</p><ul><li><p>迭代</p><p>public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed,final UnaryOperator&lt;T&gt; f)</p></li><li><p>生成</p><p>public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</p></li></ul><h3 id="_4-stream-的中间操作" tabindex="-1"><a class="header-anchor" href="#_4-stream-的中间操作" aria-hidden="true">#</a> 4. Stream 的中间操作</h3><p>多个<strong>中间操作</strong>可以连接起来形成一个<strong>流水线</strong>，除非流水线触发终止操作，否则<strong>中间操作不会执行任何的处理</strong>！而在<strong>终止操作时一次性全部处理，称为 &quot;惰性处理&quot;</strong>。</p><h4 id="_4-1-筛选与切片" tabindex="-1"><a class="header-anchor" href="#_4-1-筛选与切片" aria-hidden="true">#</a> 4.1 筛选与切片</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">filter(Predicate p)</td><td style="text-align:center;">接收 Lambda，从流中排除某些元素</td></tr><tr><td style="text-align:center;">distinct()</td><td style="text-align:center;">筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</td></tr><tr><td style="text-align:center;">limit(long maxSize)</td><td style="text-align:center;">截断流，使其元素不超过给定数量</td></tr><tr><td style="text-align:center;">skip(long n)</td><td style="text-align:center;">跳过元素，返回一个扔掉了前 n 各元素的流。若流中元素不足 n 个，则返回一个空流，与 limit(n) 互补</td></tr></tbody></table><h4 id="_4-2-映射" tabindex="-1"><a class="header-anchor" href="#_4-2-映射" aria-hidden="true">#</a> 4.2 映射</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">map(Function f)</td><td style="text-align:center;">接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</td></tr><tr><td style="text-align:center;">mapToDouble(ToDoubleFunction f)</td><td style="text-align:center;">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream</td></tr><tr><td style="text-align:center;">mapToInt(ToIntFunction f)</td><td style="text-align:center;">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream</td></tr><tr><td style="text-align:center;">mapToLong(ToLongFunction f)</td><td style="text-align:center;">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream</td></tr><tr><td style="text-align:center;">flatMap(Function f)</td><td style="text-align:center;">接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table><h4 id="_4-3-排序" tabindex="-1"><a class="header-anchor" href="#_4-3-排序" aria-hidden="true">#</a> 4.3 排序</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">sorted()</td><td style="text-align:center;">产生一个新流，其中按自然顺序排序</td></tr><tr><td style="text-align:center;">sorted(Compatator comp)</td><td style="text-align:center;">产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><h3 id="_5-stream-的终止操作" tabindex="-1"><a class="header-anchor" href="#_5-stream-的终止操作" aria-hidden="true">#</a> 5. Stream 的终止操作</h3><p>终端操作会从流的流水线生成结果，其结果可以是任何不是流的值，例如：List、Integer，甚至是 void</p><h4 id="_5-1-查找和匹配" tabindex="-1"><a class="header-anchor" href="#_5-1-查找和匹配" aria-hidden="true">#</a> 5.1 查找和匹配</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">allMatch(Predicate p)</td><td style="text-align:center;">检查是否匹配所有元素</td></tr><tr><td style="text-align:center;">anyMatch(Predicate p)</td><td style="text-align:center;">检查至少匹配一个元素</td></tr><tr><td style="text-align:center;">noneMatch(Predicate p)</td><td style="text-align:center;">检查是否没有匹配所有元素</td></tr><tr><td style="text-align:center;">findFirst</td><td style="text-align:center;">返回第一个元素</td></tr><tr><td style="text-align:center;">findAny()</td><td style="text-align:center;">返回当前流中的任意元素</td></tr><tr><td style="text-align:center;">count()</td><td style="text-align:center;">返回流中元素总数</td></tr><tr><td style="text-align:center;">max(Comparator c)</td><td style="text-align:center;">返回流中最大值</td></tr><tr><td style="text-align:center;">max(Comparator c)</td><td style="text-align:center;">返回流中最小值</td></tr><tr><td style="text-align:center;">forEach(Consumer c)</td><td style="text-align:center;">内部迭代（使用 Collection 接口需要用户去做迭代，称为 外部迭代。相反，Stream API 使用内部迭代 --- 它帮你把迭代做了）</td></tr></tbody></table><h4 id="_5-2-归约" tabindex="-1"><a class="header-anchor" href="#_5-2-归约" aria-hidden="true">#</a> 5.2 归约</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">reduce(T iden, BinaryOperator b)</td><td style="text-align:center;">可以将流中元素反复结合起来，得到一个值，返回 T</td></tr><tr><td style="text-align:center;">reduce(BinaryOperator b)</td><td style="text-align:center;">可以将流中元素反复结合起来，得到一个值，返回 Option&lt;T&gt;</td></tr></tbody></table><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p><h4 id="_5-3-收集" tabindex="-1"><a class="header-anchor" href="#_5-3-收集" aria-hidden="true">#</a> 5.3 收集</h4><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">collect(Collector c)</td><td style="text-align:center;">将流转换为其他形式，接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流执行收集操作（如收集到 List、Set、Map），但是我们更多时候可以使用 Collectors 工具类，它提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与操作实例如下：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">toList</td><td style="text-align:center;">List&lt;T&gt;</td><td style="text-align:center;">把流中元素收集到 List</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emps <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">toSet</td><td style="text-align:center;">Set&lt;T&gt;</td><td style="text-align:center;">把流中元素收集到 Set</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emps <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">toCollection</td><td style="text-align:center;">Collection&lt;T&gt;</td><td style="text-align:center;">把流中元素收集到创建的集合</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emps <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">counting</td><td style="text-align:center;">Long</td><td style="text-align:center;">计算流中元素的个数</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">summingInt</td><td style="text-align:center;">Integer</td><td style="text-align:center;">对流中元素的整数属性求和</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> total <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">averagingInt</td><td style="text-align:center;">Double</td><td style="text-align:center;">计算流中元素 Integer 属性的平均值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> avg <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">summarizingInt</td><td style="text-align:center;">IntSummaryStatistics</td><td style="text-align:center;">收集流中 Integer 属性的统计值。如：平均值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">IntSummaryStatistics</span> iss <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">joining</td><td style="text-align:center;">String</td><td style="text-align:center;">连接流中的每个字符串</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span>joining<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">maxBy</td><td style="text-align:center;">Optional&lt;T&gt;</td><td style="text-align:center;">根据比较器选择最大值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">minBy</td><td style="text-align:center;">Optional&lt;T&gt;</td><td style="text-align:center;">根据比较器选择最小值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">reducing</td><td style="text-align:center;">归约产生的类型</td><td style="text-align:center;">从一个作为累加器的初始值开始，利用 BinaryOperator 与流中元素逐个结合，从而归约成单个值</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> total <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">collectingAndThen</td><td style="text-align:center;">转换函数返回的类型</td><td style="text-align:center;">包裹另一个收集器，对其结果转换函数</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> how <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">collectingAndThen</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span>toList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">::</span><span class="token function">size</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">groupingBy</td><td style="text-align:center;">Map&lt;K, List&lt;T&gt;&gt;</td><td style="text-align:center;">根据某属性值对流分组，属性为 K，结果为 V</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp<span class="token punctuation">.</span>Status</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getStatus</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回类型</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">partitioningBy</td><td style="text-align:center;">Map&lt;Boolean, List&lt;T&gt;&gt;</td><td style="text-align:center;">根据 true 或 false 进行分区</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> vd <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">grouopingBy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getManage</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-并行流和串行流" tabindex="-1"><a class="header-anchor" href="#_6-并行流和串行流" aria-hidden="true">#</a> 6.并行流和串行流</h3><p>并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流。</p><p>Java 8 中将并行进行了优化，我们可以很容易地对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与顺序流之间进行切换。</p><h3 id="_7-了解-fork-join-框架" tabindex="-1"><a class="header-anchor" href="#_7-了解-fork-join-框架" aria-hidden="true">#</a> 7.了解 Fork/Join 框架</h3><p><strong>Fork / Join 框架</strong>：就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务(拆到不可再拆时)，再将一个个的小任务运算的结果进行 join 汇总。</p><figure><img src="http://img.hl1015.top/blog/image-20211016220626481.png" alt="image-20211016220626481" tabindex="0" loading="lazy"><figcaption>image-20211016220626481</figcaption></figure><p><strong>Fork / Join 框架与传统线程池的区别：</strong></p><p>采用 &quot;工作窃取&quot; 模式（working-stealing）：</p><p>当执行新的任务时，它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</p><p>相对于一般的线程池实现，fork/join 框架的优势在对其中包含的任务处理方式上，在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态，而在 fork/join 框架实现中，如果某个子问题由于等待另一个子问题的完成而无法继续运行，那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行，这种方式减少了线程的等待时间，提高了性能。</p><p>使用 LocalDate、LocalTime、LocalDateTime 类的实例是<strong>不可变的对象</strong>，分别表示使用 ISO-8601 日历系统的日期、时间、日期和时间。它们提供了简单的日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p><p>（注：ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示法）</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">now()</td><td style="text-align:center;">静态方法，根据 当前时间 创建对象</td><td style="text-align:center;">LocalDate localDate = LocalDate.now();<br>LocalTime localTime = LocalTime.now();<br>LocalDateTime localDateTime = LocalDateTime.now();</td></tr><tr><td style="text-align:center;">of()</td><td style="text-align:center;">静态方法，根据 指定日期/时间 创建对象</td><td style="text-align:center;">LocalDate localDate = LocalDate.of(2021, 10, 18);<br>LocalTime localTime = LocalTime.of(20, 5, 55);<br>LocalDateTime localDateTime = LocalDateTime.of(2021, 10, 18, 20, 5, 55);</td></tr><tr><td style="text-align:center;">plusDays, plusWeeks, plusMonths, plueYears</td><td style="text-align:center;">向当前 LocalDate 对象添加几天、几周、几月、几年</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">minusDays, minusWeeks, minusMonths, minusYears</td><td style="text-align:center;">向当前 LocalDate 对象减去几天、几周、几月、几年</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">plus, minus</td><td style="text-align:center;">添加或减少一个 Duration 或 Period</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">withDayOfMonth, withDayOfYear, withMonth, withYear</td><td style="text-align:center;">将月份天数、年份天数、月份 、年份修改为指定的值并返回新的 LocalDate 对象</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">getDayOfMonth</td><td style="text-align:center;">获得月份天数（1 ~ 31）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">getDayOfYear</td><td style="text-align:center;">获得年份天数（1 ~ 366）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">getDayOfWeek</td><td style="text-align:center;">获得星期几（返回一个 DayOfWeek 枚举值）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">getMonth</td><td style="text-align:center;">获得月份，返回一个 Month 枚举值</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">getMonthValue</td><td style="text-align:center;">获得月份（1 ~ 12）</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">getYear</td><td style="text-align:center;">获得年份</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">until</td><td style="text-align:center;">获得两个日期之间的 Period 对象，或者 指定 ChronoUnits</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">isBefore, isAfter</td><td style="text-align:center;">比较两个 LocalDate</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">isLeapYear</td><td style="text-align:center;">判断是否是闰年</td><td style="text-align:center;"></td></tr></tbody></table><h2 id="三、新时间日期-api" tabindex="-1"><a class="header-anchor" href="#三、新时间日期-api" aria-hidden="true">#</a> 三、新时间日期 API</h2><h3 id="_1-instant-时间戳" tabindex="-1"><a class="header-anchor" href="#_1-instant-时间戳" aria-hidden="true">#</a> 1. Instant 时间戳</h3><p>用于 &quot;时间戳&quot; 的运算，它是以 Unix 元年（传统的设定为 UTC 时区 1970年1月1日午夜时分）开始所经历的描述进行运算</p><h3 id="_2-duration-和-period" tabindex="-1"><a class="header-anchor" href="#_2-duration-和-period" aria-hidden="true">#</a> 2. Duration 和 Period</h3><ul><li>Duration：用于计算两个 &quot;时间&quot; 间隔</li><li>Period：用于计算两个 &quot;日期&quot; 间隔</li></ul><h3 id="_3-日期的操纵" tabindex="-1"><a class="header-anchor" href="#_3-日期的操纵" aria-hidden="true">#</a> 3. 日期的操纵</h3><ul><li><p>TemporalAdjuster：时间校正器</p><p>有时我们可能需要获取例如：将日期调整到 &quot;下个周日&quot; 等操作。</p></li><li><p>TempoalAdjusters：该类通过静态方法提供了大量的常用 TempAdjuster 的实现</p><p>例如获取下个周日：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LocalDate</span> nextSunday <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span>now<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>
	<span class="token class-name">TemporalAdjusters</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">SUNDAY</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-解析与格式化" tabindex="-1"><a class="header-anchor" href="#_4-解析与格式化" aria-hidden="true">#</a> 4. 解析与格式化</h3><p>java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法</p><ul><li><p>预定义的标准格式</p><figure><img src="http://img.hl1015.top/blog/image-20211018220136915.png" alt="image-20211018220136915" tabindex="0" loading="lazy"><figcaption>image-20211018220136915</figcaption></figure></li><li><p>语言环境相关的格式</p></li><li><p>自定义的格式</p><figure><img src="http://img.hl1015.top/blog/image-20211018220333692.png" alt="image-20211018220333692" tabindex="0" loading="lazy"><figcaption>image-20211018220333692</figcaption></figure></li></ul><h3 id="_5-时区的处理" tabindex="-1"><a class="header-anchor" href="#_5-时区的处理" aria-hidden="true">#</a> 5. 时区的处理</h3><p>java 8 中加入了对时区的支持，带时区的时间分别为：ZonedDate、ZoneTime、ZoneDateTime</p><ul><li>其中每个时区都对应着 ID，地区 ID 都为 &quot;{区域}/{城市}&quot; 的格式，例如：Asia/Shanghai 等</li><li>ZoneId：该类中包含了所有的时区信息</li><li>getAvailableZoneIds()：可以获取所有时区信息</li><li>of(id)：用指定的时区信息获取 ZoneId 对象</li></ul><h3 id="_6-与传统日期处理的转换" tabindex="-1"><a class="header-anchor" href="#_6-与传统日期处理的转换" aria-hidden="true">#</a> 6. 与传统日期处理的转换</h3><table><thead><tr><th style="text-align:center;">类</th><th style="text-align:center;">to 遗留类</th><th style="text-align:center;">from 遗留类</th></tr></thead><tbody><tr><td style="text-align:center;">java.time.instant<br>java.util.Date</td><td style="text-align:center;">Date.from(instant)</td><td style="text-align:center;">date.toInstant()</td></tr><tr><td style="text-align:center;">java.time.instant<br>java.sql.Timestamp</td><td style="text-align:center;">Timestamp.from(instant)</td><td style="text-align:center;">timestamp.toInstant()</td></tr><tr><td style="text-align:center;">java.time.ZonedDateTime<br>java.util.GregorianCalendar</td><td style="text-align:center;">GregorianCalendar.from(zoneDateTime)</td><td style="text-align:center;">cal.toZonedDateTime()</td></tr><tr><td style="text-align:center;">java.time.LocalDate<br>java.sql.Time</td><td style="text-align:center;">Date.valueOf(localDate)</td><td style="text-align:center;">date.toLcalDate()</td></tr><tr><td style="text-align:center;">java.time.LocalTime<br>java.sql.Time</td><td style="text-align:center;">Date.valueOf(localDate)</td><td style="text-align:center;">date.toLocalTime()</td></tr><tr><td style="text-align:center;">java.time.LocalDateTime<br>java.sql.Timestamp</td><td style="text-align:center;">Timestamp.valueOf(localDateTime)</td><td style="text-align:center;">timestamp.toLocalDateTime()</td></tr><tr><td style="text-align:center;">java.time.ZoneId<br>java.util.TimeZone</td><td style="text-align:center;">Timezone.getTimeZone(id)</td><td style="text-align:center;">timeZone.toZoneId()</td></tr><tr><td style="text-align:center;">java.time.format.DateTimeFormatter<br>java.text.DateFormat</td><td style="text-align:center;">formatter.toFormat()</td><td style="text-align:center;">无</td></tr></tbody></table><h2 id="四、接口中的默认方法与静态方法" tabindex="-1"><a class="header-anchor" href="#四、接口中的默认方法与静态方法" aria-hidden="true">#</a> 四、接口中的默认方法与静态方法</h2><h3 id="_1-接口中的默认方法" tabindex="-1"><a class="header-anchor" href="#_1-接口中的默认方法" aria-hidden="true">#</a> 1. 接口中的默认方法</h3><p>Java 8 中允许接口包含具有具体实现的方法，该方法称为 &quot;默认方法&quot;，默认方法使用 default 关键字修饰。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MyFunc</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token class-name">T</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;Hello Java8!&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口默认方法的 &quot;类优先&quot; 原则</p><p>若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了同名的方法时：</p><ul><li>选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。</li><li>接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名字和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">MyFunc</span> <span class="token punctuation">{</span>
	<span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;Hello Java8!&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Named</span> <span class="token punctuation">{</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello hkw!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">MyFunc</span><span class="token punctuation">,</span> <span class="token class-name">Named</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Named</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-接口中的静态方法" tabindex="-1"><a class="header-anchor" href="#_2-接口中的静态方法" aria-hidden="true">#</a> 2. 接口中的静态方法</h3><p>Java 8 中，接口中允许添加静态方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Named</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello hkw!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Lambda!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、optional-类、重复注解与类型注解" tabindex="-1"><a class="header-anchor" href="#五、optional-类、重复注解与类型注解" aria-hidden="true">#</a> 五、Optional 类、重复注解与类型注解</h2><h3 id="_1-optional-类" tabindex="-1"><a class="header-anchor" href="#_1-optional-类" aria-hidden="true">#</a> 1. Optional 类</h3><h4 id="_1-1-说明" tabindex="-1"><a class="header-anchor" href="#_1-1-说明" aria-hidden="true">#</a> 1.1 说明</h4><p>Optional&lt;T&gt; 类（Java.util.Optional）是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好地表达这个概念，并且可以避免空指针异常。</p><h4 id="_1-2-常用方法" tabindex="-1"><a class="header-anchor" href="#_1-2-常用方法" aria-hidden="true">#</a> 1.2 常用方法</h4><ul><li>Optional.of(T t)：创建一个 Optional 实例</li><li>Optional.empty()：创建一个空的 Optional 实例</li><li>Optional.ofNullable(T t)：若 t 不为 null，创建 Optional 实例，否则创建空实例</li><li>isPresent()：判断是否包含值</li><li>orElse(T t)：如果调用对象包含值，返回该值，否则返回 t</li><li>orElseGet(Supplier s)：如果调用对象包含值，返回该值，否则返回 s 获取的值</li><li>map(Function f)：如果有值对其处理，并返回处理后的 Optional，否则返回 Optional.empty()</li><li>flatMap(Function mapper)：与 map 类似，要求返回值必须是 Optional</li></ul><h3 id="_2-重复注解与类型注解" tabindex="-1"><a class="header-anchor" href="#_2-重复注解与类型注解" aria-hidden="true">#</a> 2. 重复注解与类型注解</h3><p>Java 8 对注解处理提供了两点改进：可重复的注解以及可用于类型的注解。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyAnnotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 可重复</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">&quot;hkw&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 可用于类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,187),l=[p];function c(o,i){return a(),s("div",null,l)}const r=n(e,[["render",c],["__file","jdk8-new-feature.html.vue"]]);export{r as default};
