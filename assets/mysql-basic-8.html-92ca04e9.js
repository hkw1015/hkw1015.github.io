import{_ as t,Z as e,$ as n,a5 as a}from"./framework-1fb77053.js";const s={},l=a(`<h2 id="_1-数值类型" tabindex="-1"><a class="header-anchor" href="#_1-数值类型" aria-hidden="true">#</a> 1. 数值类型</h2><h3 id="_1-1-整型" tabindex="-1"><a class="header-anchor" href="#_1-1-整型" aria-hidden="true">#</a> 1.1 整型</h3><h4 id="_1-分类" tabindex="-1"><a class="header-anchor" href="#_1-分类" aria-hidden="true">#</a> （1）分类</h4><table><thead><tr><th style="text-align:center;">整数类型</th><th style="text-align:center;">字节</th><th style="text-align:center;">范围</th></tr></thead><tbody><tr><td style="text-align:center;">tinyint</td><td style="text-align:center;">1</td><td style="text-align:center;">有符号：-128~127<br>无符号：0~255</td></tr><tr><td style="text-align:center;">smallint</td><td style="text-align:center;">2</td><td style="text-align:center;">有符号：-32768~32767<br>无符号：0~65535</td></tr><tr><td style="text-align:center;">mediumint</td><td style="text-align:center;">3</td><td style="text-align:center;">有符号：-8388608~8388607<br>无符号：0~1677215</td></tr><tr><td style="text-align:center;">int / integer</td><td style="text-align:center;">4</td><td style="text-align:center;">有符号：- 2147483648~2147483647<br>无符号：0~4294967295</td></tr><tr><td style="text-align:center;">bigint</td><td style="text-align:center;">8</td><td style="text-align:center;">有符号：-9223372036854775808~9223372036854775807<br>无符号：0~9223372036854775807*2+1</td></tr></tbody></table><h4 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> （2）特点</h4><ul><li>如果不设置整型无符号还是有符号，默认是有符号，如需设置无符号，需要添加 UNSIGNED 关键字</li><li>如果插入的数值超出了整型的范围，会报 out of range 异常，并且会往相应字段插入临界值</li><li>如果不设置长度，会有默认的长度，长度代表的是显示的最大宽度，如果不够会用 0 在左侧填充，但前提是搭配上 ZEROFILL 使用</li></ul><h3 id="_1-2-小数" tabindex="-1"><a class="header-anchor" href="#_1-2-小数" aria-hidden="true">#</a> 1.2 小数</h3><h4 id="_1-分类-1" tabindex="-1"><a class="header-anchor" href="#_1-分类-1" aria-hidden="true">#</a> （1）分类</h4><table><thead><tr><th style="text-align:center;">浮点数类型</th><th style="text-align:center;">字节</th><th style="text-align:center;">范围</th></tr></thead><tbody><tr><td style="text-align:center;">float</td><td style="text-align:center;">4</td><td style="text-align:center;">±1.75494351E-38~±3.402823466E+38</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">8</td><td style="text-align:center;">±2.2250738585072014E-308~ ±1.7976931348623157E+308</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">定点数类型</th><th style="text-align:center;">字节</th><th style="text-align:center;">范围</th></tr></thead><tbody><tr><td style="text-align:center;">DEC(M,D) / DECIMAL(M,D)</td><td style="text-align:center;">M+2</td><td style="text-align:center;">最大取值范围与 double 相同，给定 decimal 的有效取值范围由 M 和 D 决定</td></tr></tbody></table><h4 id="_2-关于-m-d-的用法说明" tabindex="-1"><a class="header-anchor" href="#_2-关于-m-d-的用法说明" aria-hidden="true">#</a> （2）关于(M , D) 的用法说明</h4><ul><li>M：整数部分 + 小数部分 的位数 D：小数部分 的位数</li><li>如果超过范围，则插入临界值</li><li>M 和 D 都可以省略 <ul><li>如果是 DECIMAL，则 M 默认为10，D 默认为 0</li><li>如果是 float 和 double，则会根据插入的数值的精度来决定精度</li></ul></li><li><strong>定点型的精确度较高</strong>，如果要求插入数值的精确度较高如 <strong>货币运算</strong> 等则考虑使用定点型</li></ul><h3 id="_1-3-关于数值类型的选取原则" tabindex="-1"><a class="header-anchor" href="#_1-3-关于数值类型的选取原则" aria-hidden="true">#</a> 1.3 关于数值类型的选取原则</h3><p>所选择的类型越简单越好，能保存数值的类型越小越好</p><h2 id="_2-字符类型" tabindex="-1"><a class="header-anchor" href="#_2-字符类型" aria-hidden="true">#</a> 2. 字符类型</h2><h3 id="_2-1-保存较短的文本" tabindex="-1"><a class="header-anchor" href="#_2-1-保存较短的文本" aria-hidden="true">#</a> 2.1 保存较短的文本</h3><p>①char ②varchar</p><table><thead><tr><th style="text-align:center;">字符串类型</th><th style="text-align:center;">最多字符数</th><th style="text-align:center;">描述及存储要求</th></tr></thead><tbody><tr><td style="text-align:center;">char(M)</td><td style="text-align:center;">M</td><td style="text-align:center;">M 为 0~255 之间的整数</td></tr><tr><td style="text-align:center;">varchar(M)</td><td style="text-align:center;">M</td><td style="text-align:center;">M 为 0~65535 之间的整数</td></tr></tbody></table><p>二者区别：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">写法</th><th style="text-align:center;">M 的意思</th><th style="text-align:center;">特点</th><th style="text-align:center;">空间的耗费</th><th style="text-align:center;">效率</th></tr></thead><tbody><tr><td style="text-align:center;">char</td><td style="text-align:center;">char(M)</td><td style="text-align:center;">最大的字符数，可以省略，默认为1</td><td style="text-align:center;">固定长度的字符</td><td style="text-align:center;">比较耗费</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">varchar</td><td style="text-align:center;">varchar(M)</td><td style="text-align:center;">最大的字符数，不可以省略</td><td style="text-align:center;">可变长度的字符</td><td style="text-align:center;">比较节省</td><td style="text-align:center;">低</td></tr></tbody></table><h3 id="_2-2-保存较长的文本" tabindex="-1"><a class="header-anchor" href="#_2-2-保存较长的文本" aria-hidden="true">#</a> 2.2 保存较长的文本</h3><p>①text ②blob（较大的二进制）</p><h3 id="_2-3-其他" tabindex="-1"><a class="header-anchor" href="#_2-3-其他" aria-hidden="true">#</a> 2.3 其他</h3><p>①Enum类型</p><ul><li><p>说明：又称为枚举类型，要求插入的值必须属于列表中指定的值之一</p></li><li><p>如果列表成员为 1~255，则需要 1 个字节存储，如果列表成员为 255~65535，则需要 2 个字节存储，最多需要65535 个成员！</p></li><li><p>示例</p><ul><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_enum<span class="token punctuation">(</span>
	e1 <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入成功</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入成功</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入成功</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入失败</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab_enum <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 插入成功</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结果：</p><ul><li><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210910162359413.png" alt="image-20210910162359413" tabindex="0" loading="lazy"><figcaption>image-20210910162359413</figcaption></li></ul></li></ul></li></ul><p>②Set类型</p><ul><li><p>说明：和 Enum 类型类似，里面可以保存 0~64 个成员，和 Enum 最大的区别是：Set 类型一次可以选取多个成员，而 Enum 只能选一个</p></li><li><p>根据成员个数不同，存储所占的字节也不同</p><ul><li><table><thead><tr><th style="text-align:center;">成员数</th><th style="text-align:center;">字节数</th></tr></thead><tbody><tr><td style="text-align:center;">1~8</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">9~16</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">17~24</td><td style="text-align:center;">3</td></tr><tr><td style="text-align:center;">25~32</td><td style="text-align:center;">4</td></tr><tr><td style="text-align:center;">33~64</td><td style="text-align:center;">8</td></tr></tbody></table></li></ul></li><li><p>示例</p><ul><li><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tab_set<span class="token punctuation">(</span>
	s1 <span class="token keyword">SET</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tab_set <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;a,b,c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结果：</p><ul><li><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210910162639446.png" alt="image-20210910162639446" tabindex="0" loading="lazy"><figcaption>image-20210910162639446</figcaption></li></ul></li></ul></li></ul><p>③binary 和 varbinary 用于保存较短的二进制（了解即可）</p><h2 id="_3-日期类型" tabindex="-1"><a class="header-anchor" href="#_3-日期类型" aria-hidden="true">#</a> 3. 日期类型</h2><h3 id="_3-1-分类" tabindex="-1"><a class="header-anchor" href="#_3-1-分类" aria-hidden="true">#</a> 3.1 分类</h3><p>主要关注 <strong>datetime</strong> 和 <strong>timestamp</strong></p><table><thead><tr><th style="text-align:center;">日期和时间类型</th><th style="text-align:center;">字节</th><th style="text-align:center;">最小值</th><th style="text-align:center;">最大值</th></tr></thead><tbody><tr><td style="text-align:center;">date</td><td style="text-align:center;">4</td><td style="text-align:center;">1000-01-01</td><td style="text-align:center;">9999-12-31</td></tr><tr><td style="text-align:center;"><strong>datetime</strong></td><td style="text-align:center;">8</td><td style="text-align:center;">1000-01-01 00:00:00</td><td style="text-align:center;">9999-12-31 23:59:59</td></tr><tr><td style="text-align:center;"><strong>timestamp</strong></td><td style="text-align:center;">4</td><td style="text-align:center;">19700101080001</td><td style="text-align:center;">2038年的某个时刻</td></tr><tr><td style="text-align:center;">time</td><td style="text-align:center;">3</td><td style="text-align:center;">-838:59:59</td><td style="text-align:center;">838:59:59</td></tr><tr><td style="text-align:center;">year</td><td style="text-align:center;">1</td><td style="text-align:center;">1901</td><td style="text-align:center;">2155</td></tr></tbody></table><h3 id="_3-2-datetime-和-timestamp-的区别" tabindex="-1"><a class="header-anchor" href="#_3-2-datetime-和-timestamp-的区别" aria-hidden="true">#</a> 3.2 datetime 和 timestamp 的区别</h3><ul><li>timestamp 支持的时间范围较小</li><li>timestamp 和实际时区有关，更能反映实际的日期，而 datetime 则只能反映出插入时的当地时区</li><li>timestamp 的属性受 MySQL 版本和 SQLMode 的影响很大</li></ul>`,34),i=[l];function d(r,c){return e(),n("div",null,i)}const o=t(s,[["render",d],["__file","mysql-basic-8.html.vue"]]);export{o as default};
