import{_ as i,Z as a,$ as e,a5 as n}from"./framework-1fb77053.js";const t={},g=n(`<h2 id="_1-配置-git-过滤文件" tabindex="-1"><a class="header-anchor" href="#_1-配置-git-过滤文件" aria-hidden="true">#</a> 1. 配置 git 过滤文件</h2><p><strong>（1）Eclipse 特定文件</strong></p><img src="http://img.hl1015.top/blog/image-20211114175630742.png" alt="image-20211114175630742" style="zoom:67%;"><p><strong>（2）IDEA 特定文件</strong></p><img src="http://img.hl1015.top/blog/image-20211114175711881.png" alt="image-20211114175711881" style="zoom:67%;"><p><strong>（3）Maven 工程的 target 文件</strong></p><img src="http://img.hl1015.top/blog/image-20211114175759260.png" alt="image-20211114175759260" style="zoom:67%;"><p><strong>问题 1：为什么要忽略他们？</strong></p><p>答：与项目的实际功能无关，不参与服务器上部署运行，把它们忽略掉能够屏蔽 IDE 工具之间的差异。</p><p><strong>问题 2：怎么忽略？</strong></p><p>（1）创建忽略规则文件 <span style="color:red;">xxx.ignore（前缀名随便起，建议是 git.ignore）</span></p><p>这个文件的存放位置原则上在哪里都可以，为了便于让 ~/.gitconfig 文件引用，建议也放在用户家目录下</p><p>git.ignore 文件模版内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Compiled class file</span>
*.class

<span class="token comment"># Log file</span>
*.log

<span class="token comment"># BlueJ files</span>
*.ctxt

<span class="token comment"># Mobile Tools for Java (J2ME)</span>
.mtj.tmp/

<span class="token comment"># Package Files</span>
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

<span class="token comment"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span>
hs_err_pid*

.classpath
.project
.settings
target
.idea
*.iml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）在 .gitconfig 文件中引用忽略配置文件（此文件在 Windows 的家目录中）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>user<span class="token punctuation">]</span>
    name <span class="token operator">=</span> hkw
    email <span class="token operator">=</span> hkw1015@163.com
<span class="token punctuation">[</span>core<span class="token punctuation">]</span>
    excludesfile <span class="token operator">=</span> C:/Users/asus/git.ignore
注意：这里要使用“正斜线（/）”，不要使用“反斜线（<span class="token punctuation">\\</span>）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-定位-git-程序" tabindex="-1"><a class="header-anchor" href="#_2-定位-git-程序" aria-hidden="true">#</a> 2. 定位 Git 程序</h2><figure><img src="http://img.hl1015.top/blog/image-20211114181326462.png" alt="image-20211114181326462" tabindex="0" loading="lazy"><figcaption>image-20211114181326462</figcaption></figure><h2 id="_3-初始化本地仓库" tabindex="-1"><a class="header-anchor" href="#_3-初始化本地仓库" aria-hidden="true">#</a> 3. 初始化本地仓库</h2><img src="http://img.hl1015.top/blog/image-20211114181509741.png" alt="image-20211114181509741" style="zoom:67%;"><p>选择要创建 Git 本地仓库的工程</p><img src="http://img.hl1015.top/blog/image-20211114182738695.png" alt="image-20211114182738695" style="zoom:67%;"><p>通过 IDEA 打开刚初始化的 Git 本地仓库工程</p><img src="http://img.hl1015.top/blog/image-20211114183015831.png" alt="image-20211114183015831" style="zoom:67%;"><img src="http://img.hl1015.top/blog/image-20211114183103123.png" alt="image-20211114183103123" style="zoom:67%;"><h2 id="_4-添加到暂存区" tabindex="-1"><a class="header-anchor" href="#_4-添加到暂存区" aria-hidden="true">#</a> 4. 添加到暂存区</h2><p>右键点击项目，选择 Git -&gt; Add 将项目添加到暂存区</p><img src="http://img.hl1015.top/blog/image-20211114183933051.png" alt="image-20211114183933051" style="zoom:50%;"><h2 id="_5-提交到本地库" tabindex="-1"><a class="header-anchor" href="#_5-提交到本地库" aria-hidden="true">#</a> 5. 提交到本地库</h2><img src="http://img.hl1015.top/blog/image-20211114184039444.png" alt="image-20211114184039444" style="zoom:50%;"><img src="http://img.hl1015.top/blog/image-20211114184222416.png" alt="image-20211114184222416" style="zoom:50%;"><h2 id="_6-切换版本" tabindex="-1"><a class="header-anchor" href="#_6-切换版本" aria-hidden="true">#</a> 6. 切换版本</h2><p>在 IDEA 的左下角，点击 Version Control 或者 Git，然后点击 Log 查看版本</p><figure><img src="http://img.hl1015.top/blog/image-20211114184812391.png" alt="image-20211114184812391" tabindex="0" loading="lazy"><figcaption>image-20211114184812391</figcaption></figure><p>右键选择要切换的版本，然后在菜单里点击 Checkout Revision</p><figure><img src="http://img.hl1015.top/blog/image-20211114184918960.png" alt="image-20211114184918960" tabindex="0" loading="lazy"><figcaption>image-20211114184918960</figcaption></figure><h2 id="_7-创建分支" tabindex="-1"><a class="header-anchor" href="#_7-创建分支" aria-hidden="true">#</a> 7. 创建分支</h2><p>选择 Git，在 Repository 里面，点击 Branches 按钮</p><img src="http://img.hl1015.top/blog/image-20211114185450170.png" alt="image-20211114185450170" style="zoom:50%;"><p>在弹出的 Git Branches 框里，点击 New Branch 按钮</p><figure><img src="http://img.hl1015.top/blog/image-20211114185527789.png" alt="image-20211114185527789" tabindex="0" loading="lazy"><figcaption>image-20211114185527789</figcaption></figure><p>填写分支名称，创建 dev_hkw 分支</p><figure><img src="http://img.hl1015.top/blog/image-20211114191423723.png" alt="image-20211114191423723" tabindex="0" loading="lazy"><figcaption>image-20211114191423723</figcaption></figure><p>然后在 IDEA 的右下角看到 dev_hkw，说明分支创建成功，并且当前已经切换成 dev_hkw 分支</p><figure><img src="http://img.hl1015.top/blog/image-20211114191537775.png" alt="image-20211114191537775" tabindex="0" loading="lazy"><figcaption>image-20211114191537775</figcaption></figure><h2 id="_8-切换分支" tabindex="-1"><a class="header-anchor" href="#_8-切换分支" aria-hidden="true">#</a> 8. 切换分支</h2><p>在 IDEA 窗口的右下角，切换到 mater 分支</p><figure><img src="http://img.hl1015.top/blog/image-20211114191702598.png" alt="image-20211114191702598" tabindex="0" loading="lazy"><figcaption>image-20211114191702598</figcaption></figure><p>然后在 IDEA 窗口的右下角看到了 master，说明 master 分支切换成功</p><figure><img src="http://img.hl1015.top/blog/image-20211114191824106.png" alt="image-20211114191824106" tabindex="0" loading="lazy"><figcaption>image-20211114191824106</figcaption></figure><h2 id="_9-合并分支" tabindex="-1"><a class="header-anchor" href="#_9-合并分支" aria-hidden="true">#</a> 9. 合并分支</h2><p>在 IDEA 窗口的右下角，将 dev_hkw 分支合并到当前 master 分支</p><figure><img src="http://img.hl1015.top/blog/image-20211114214211515.png" alt="image-20211114214211515" tabindex="0" loading="lazy"><figcaption>image-20211114214211515</figcaption></figure><p>如果代码没有冲突，分支直接合并成功，分支合并成功以后，代码自动提交，无需手动提交本地库</p><h2 id="_10-解决冲突" tabindex="-1"><a class="header-anchor" href="#_10-解决冲突" aria-hidden="true">#</a> 10. 解决冲突</h2><p>如图所示，如果 master 分支和 dev_hkw 分支都修改了同一行代码，在合并分支的时候就会发生冲突</p><figure><img src="http://img.hl1015.top/blog/image-20211114215019313.png" alt="image-20211114215019313" tabindex="0" loading="lazy"><figcaption>image-20211114215019313</figcaption></figure><figure><img src="http://img.hl1015.top/blog/image-20211114215108750.png" alt="image-20211114215108750" tabindex="0" loading="lazy"><figcaption>image-20211114215108750</figcaption></figure><p>我们现在站在 master 分支上合并 dev_hkw 分支，就会发生代码冲突</p><figure><img src="http://img.hl1015.top/blog/image-20211114215517648.png" alt="image-20211114215517648" tabindex="0" loading="lazy"><figcaption>image-20211114215517648</figcaption></figure><p>点击 Conflicts 框里的 Merge 按钮，进行手动合并代码</p><figure><img src="http://img.hl1015.top/blog/image-20211114220413620.png" alt="image-20211114220413620" tabindex="0" loading="lazy"><figcaption>image-20211114220413620</figcaption></figure><p>手动合并完代码后，点击右下角的 Apply 按钮</p><figure><img src="http://img.hl1015.top/blog/image-20211114220606747.png" alt="image-20211114220606747" tabindex="0" loading="lazy"><figcaption>image-20211114220606747</figcaption></figure><p>代码冲突解决，自动提交本地库</p><figure><img src="http://img.hl1015.top/blog/image-20211114220703686.png" alt="image-20211114220703686" tabindex="0" loading="lazy"><figcaption>image-20211114220703686</figcaption></figure>`,66),s=[g];function l(o,p){return a(),e("div",null,s)}const m=i(t,[["render",l],["__file","git-7.html.vue"]]);export{m as default};
