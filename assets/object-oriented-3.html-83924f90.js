const n=JSON.parse('{"key":"v-7f842036","path":"/java/basic/object-oriented-3.html","title":"面向对象(下)","lang":"zh-CN","frontmatter":{"title":"面向对象(下)","category":"Java","tag":["Java 基础"],"description":"1. 关键词：static 可以用来修饰的结构 属性、方法、代码块、内部类 static 修饰属性：静态变量（或类变量） ①将属性按照是否使用 static 修饰，分为类变量和实例变量 ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类变量：类创建的多个对象共用同一套类变量； ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实例变量：类创建的每个对象各自拥有一套实例变量。 ②类的某一个对象可以调用类变量，其对类变量的修改，会导致其他对象调用此类变量时，是修改过了的，而类的某一个对象修改了实例变量，不会影响其他对象同名的实例变量的值； ③类变量，随着类的加载而加载，实例变量，随着对象的创建而加载； ④内存中，实例变量存储在堆空间中，类变量存储在静态域中，而静态域存储在方法区。 static修饰方法 ①随着类的加载而加载； ②在静态方法内部：能调用静态的属性或静态的方法，不能调用非静态的属性或非静态的方法； 在非静态方法内部：能调用静态的属性或静态的方法，也能调用非静态的属性或非静态的方法； 如何使用static关键字？ （1）什么样的属性适合声明为 static？ ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①类的多个对象要共享此唯一的数据； ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②类中的常量。 （2）什么样的方法适合声明为 static？ ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①工具类中的方法（比如：Arrays工具类）； ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②操作静态变量的方法，通常为静态的。 举例 单例模式、工具类：Arrays / Math / Collections / XxxUtils / XxxFactory","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/basic/object-oriented-3.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"面向对象(下)"}],["meta",{"property":"og:description","content":"1. 关键词：static 可以用来修饰的结构 属性、方法、代码块、内部类 static 修饰属性：静态变量（或类变量） ①将属性按照是否使用 static 修饰，分为类变量和实例变量 ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类变量：类创建的多个对象共用同一套类变量； ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实例变量：类创建的每个对象各自拥有一套实例变量。 ②类的某一个对象可以调用类变量，其对类变量的修改，会导致其他对象调用此类变量时，是修改过了的，而类的某一个对象修改了实例变量，不会影响其他对象同名的实例变量的值； ③类变量，随着类的加载而加载，实例变量，随着对象的创建而加载； ④内存中，实例变量存储在堆空间中，类变量存储在静态域中，而静态域存储在方法区。 static修饰方法 ①随着类的加载而加载； ②在静态方法内部：能调用静态的属性或静态的方法，不能调用非静态的属性或非静态的方法； 在非静态方法内部：能调用静态的属性或静态的方法，也能调用非静态的属性或非静态的方法； 如何使用static关键字？ （1）什么样的属性适合声明为 static？ ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①类的多个对象要共享此唯一的数据； ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②类中的常量。 （2）什么样的方法适合声明为 static？ ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①工具类中的方法（比如：Arrays工具类）； ​ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②操作静态变量的方法，通常为静态的。 举例 单例模式、工具类：Arrays / Math / Collections / XxxUtils / XxxFactory"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Java 基础"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"面向对象(下)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. 关键词：static","slug":"_1-关键词-static","link":"#_1-关键词-static","children":[]},{"level":2,"title":"2. 单例模式","slug":"_2-单例模式","link":"#_2-单例模式","children":[]},{"level":2,"title":"3. main()的使用说明","slug":"_3-main-的使用说明","link":"#_3-main-的使用说明","children":[]},{"level":2,"title":"4. 类的结构之四：代码块","slug":"_4-类的结构之四-代码块","link":"#_4-类的结构之四-代码块","children":[]},{"level":2,"title":"5. 关键字：final","slug":"_5-关键字-final","link":"#_5-关键字-final","children":[]},{"level":2,"title":"6. 关键字：abstract","slug":"_6-关键字-abstract","link":"#_6-关键字-abstract","children":[]},{"level":2,"title":"7. 关键字：interface","slug":"_7-关键字-interface","link":"#_7-关键字-interface","children":[]},{"level":2,"title":"8. 类的结构之五：内部类","slug":"_8-类的结构之五-内部类","link":"#_8-类的结构之五-内部类","children":[]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":10.07,"words":3021},"filePathRelative":"java/basic/object-oriented-3.md","localizedDate":"2023年5月17日","excerpt":"<h2> 1. 关键词：static</h2>\\n<ul>\\n<li>\\n<p><strong>可以用来修饰的结构</strong></p>\\n<p>属性、方法、代码块、内部类</p>\\n</li>\\n<li>\\n<p><strong>static 修饰属性：静态变量（或类变量）</strong></p>\\n<p>①将属性按照是否使用 static 修饰，分为类变量和实例变量</p>\\n<p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类变量：类创建的多个对象共用同一套类变量；</p>\\n<p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实例变量：类创建的每个对象各自拥有一套实例变量。</p>\\n<p>②类的某一个对象可以调用类变量，其对类变量的修改，会导致其他对象调用此类变量时，是修改过了的，而类的某一个对象修改了实例变量，不会影响其他对象同名的实例变量的值；</p>\\n<p>③类变量，随着类的加载而加载，实例变量，随着对象的创建而加载；</p>\\n<p>④内存中，实例变量存储在堆空间中，类变量存储在静态域中，而静态域存储在方法区。</p>\\n</li>\\n<li>\\n<p><strong>static修饰方法</strong></p>\\n<p>①随着类的加载而加载；</p>\\n<p>②在静态方法内部：能调用静态的属性或静态的方法，不能调用非静态的属性或非静态的方法；</p>\\n<p>在非静态方法内部：能调用静态的属性或静态的方法，也能调用非静态的属性或非静态的方法；</p>\\n</li>\\n<li>\\n<p><strong>如何使用static关键字？</strong></p>\\n<p>（1）什么样的属性适合声明为 static？</p>\\n<p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①类的多个对象要共享此唯一的数据；</p>\\n<p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②类中的常量。</p>\\n<p>（2）什么样的方法适合声明为 static？</p>\\n<p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①工具类中的方法（比如：Arrays工具类）；</p>\\n<p>​    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②操作静态变量的方法，通常为静态的。</p>\\n</li>\\n<li>\\n<p><strong>举例</strong></p>\\n<p>单例模式、工具类：Arrays / Math / Collections / XxxUtils / XxxFactory</p>\\n</li>\\n</ul>","autoDesc":true}');export{n as data};
