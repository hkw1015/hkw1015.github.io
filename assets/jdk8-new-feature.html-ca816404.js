const n=JSON.parse('{"key":"v-da4a4d7e","path":"/java/basic/jdk8-new-feature.html","title":"Java8 新特性","lang":"zh-CN","frontmatter":{"title":"Java8 新特性","category":"Java","tag":["Java 基础"],"description":"一、Lambda 表达式 1. Lambda 使用 1.1 为什么要使用 Lambda 表达式？ Lambda 表达式是一个 匿名函数，我们可以把表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递），可以写出更简洁、灵活的代码，作为一种更紧凑的代码风格，使 Java 的语言表达能力得到了提升。 1.2 从匿名内部类到 Lambda 的转换 举例 1： @Test public void test1() { // 匿名内部类 Runnable r1 = new Runnable() { @Override public void run() { System.out.println(\\"Hello World!\\"); } }; r1.run(); System.out.println(\\"===========================================\\"); // Lambda 表达式 Runnable r2 = () -&gt; System.out.println(\\"Hello Lambda!\\"); r2.run(); }","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/basic/jdk8-new-feature.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"Java8 新特性"}],["meta",{"property":"og:description","content":"一、Lambda 表达式 1. Lambda 使用 1.1 为什么要使用 Lambda 表达式？ Lambda 表达式是一个 匿名函数，我们可以把表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递），可以写出更简洁、灵活的代码，作为一种更紧凑的代码风格，使 Java 的语言表达能力得到了提升。 1.2 从匿名内部类到 Lambda 的转换 举例 1： @Test public void test1() { // 匿名内部类 Runnable r1 = new Runnable() { @Override public void run() { System.out.println(\\"Hello World!\\"); } }; r1.run(); System.out.println(\\"===========================================\\"); // Lambda 表达式 Runnable r2 = () -&gt; System.out.println(\\"Hello Lambda!\\"); r2.run(); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Java 基础"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8 新特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"一、Lambda 表达式","slug":"一、lambda-表达式","link":"#一、lambda-表达式","children":[{"level":3,"title":"1. Lambda 使用","slug":"_1-lambda-使用","link":"#_1-lambda-使用","children":[]},{"level":3,"title":"2. 函数式接口","slug":"_2-函数式接口","link":"#_2-函数式接口","children":[]},{"level":3,"title":"3. 方法引用与构造器引用","slug":"_3-方法引用与构造器引用","link":"#_3-方法引用与构造器引用","children":[]}]},{"level":2,"title":"二、强大的 Stream API","slug":"二、强大的-stream-api","link":"#二、强大的-stream-api","children":[{"level":3,"title":"1. 了解 Stream","slug":"_1-了解-stream","link":"#_1-了解-stream","children":[]},{"level":3,"title":"2. 什么是 Stream","slug":"_2-什么是-stream","link":"#_2-什么是-stream","children":[]},{"level":3,"title":"3. 创建 Stream 流","slug":"_3-创建-stream-流","link":"#_3-创建-stream-流","children":[]},{"level":3,"title":"4. Stream 的中间操作","slug":"_4-stream-的中间操作","link":"#_4-stream-的中间操作","children":[]},{"level":3,"title":"5. Stream 的终止操作","slug":"_5-stream-的终止操作","link":"#_5-stream-的终止操作","children":[]},{"level":3,"title":"6.并行流和串行流","slug":"_6-并行流和串行流","link":"#_6-并行流和串行流","children":[]},{"level":3,"title":"7.了解 Fork/Join 框架","slug":"_7-了解-fork-join-框架","link":"#_7-了解-fork-join-框架","children":[]}]},{"level":2,"title":"三、新时间日期 API","slug":"三、新时间日期-api","link":"#三、新时间日期-api","children":[{"level":3,"title":"1. Instant 时间戳","slug":"_1-instant-时间戳","link":"#_1-instant-时间戳","children":[]},{"level":3,"title":"2. Duration 和 Period","slug":"_2-duration-和-period","link":"#_2-duration-和-period","children":[]},{"level":3,"title":"3. 日期的操纵","slug":"_3-日期的操纵","link":"#_3-日期的操纵","children":[]},{"level":3,"title":"4. 解析与格式化","slug":"_4-解析与格式化","link":"#_4-解析与格式化","children":[]},{"level":3,"title":"5. 时区的处理","slug":"_5-时区的处理","link":"#_5-时区的处理","children":[]},{"level":3,"title":"6. 与传统日期处理的转换","slug":"_6-与传统日期处理的转换","link":"#_6-与传统日期处理的转换","children":[]}]},{"level":2,"title":"四、接口中的默认方法与静态方法","slug":"四、接口中的默认方法与静态方法","link":"#四、接口中的默认方法与静态方法","children":[{"level":3,"title":"1. 接口中的默认方法","slug":"_1-接口中的默认方法","link":"#_1-接口中的默认方法","children":[]},{"level":3,"title":"2. 接口中的静态方法","slug":"_2-接口中的静态方法","link":"#_2-接口中的静态方法","children":[]}]},{"level":2,"title":"五、Optional 类、重复注解与类型注解","slug":"五、optional-类、重复注解与类型注解","link":"#五、optional-类、重复注解与类型注解","children":[{"level":3,"title":"1. Optional 类","slug":"_1-optional-类","link":"#_1-optional-类","children":[]},{"level":3,"title":"2. 重复注解与类型注解","slug":"_2-重复注解与类型注解","link":"#_2-重复注解与类型注解","children":[]}]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":17.64,"words":5293},"filePathRelative":"java/basic/jdk8-new-feature.md","localizedDate":"2023年5月17日","excerpt":"<h2> 一、Lambda 表达式</h2>\\n<h3> 1. Lambda 使用</h3>\\n<h4> 1.1 为什么要使用 Lambda 表达式？</h4>\\n<p>Lambda 表达式是一个 <strong>匿名函数</strong>，我们可以把表达式理解为是 <strong>一段可以传递的代码</strong>（将代码像数据一样进行传递），可以写出更简洁、灵活的代码，作为一种更紧凑的代码风格，使 Java 的语言表达能力得到了提升。</p>\\n<h4> 1.2 从匿名内部类到 Lambda 的转换</h4>\\n<p>举例 1：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Test</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">test1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 匿名内部类</span>\\n    <span class=\\"token class-name\\">Runnable</span> r1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Runnable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token annotation punctuation\\">@Override</span>\\n        <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello World!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n    r1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"===========================================\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// Lambda 表达式</span>\\n    <span class=\\"token class-name\\">Runnable</span> r2 <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Hello Lambda!\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    r2<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
