import{_ as a,Z as e,$ as i,a5 as t}from"./framework-1fb77053.js";const n={},s=t('<h2 id="_1-数据的持久化" tabindex="-1"><a class="header-anchor" href="#_1-数据的持久化" aria-hidden="true">#</a> 1. 数据的持久化</h2><p>（1）持久化（peristence）：<strong>把数据保存到可掉电式的存储设置中供之后使用。<strong>大多数情况下，特别是企业级应用</strong>，数据持久化意味着将内存中的数据保存到磁盘上加以 &quot;固化&quot;</strong>，而持久化的实现过程大多通过各种关系型数据库来完成。</p><p>（2）持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML 数据文件中。</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210914151526458.png" alt="image-20210914151526458" tabindex="0" loading="lazy"><figcaption>image-20210914151526458</figcaption></figure><h2 id="_2-java-中的数据存储技术" tabindex="-1"><a class="header-anchor" href="#_2-java-中的数据存储技术" aria-hidden="true">#</a> 2. Java 中的数据存储技术</h2><p>（1）在 Java 中，数据库存储技术分为如下几类：</p><ul><li><strong>JDBC</strong> 直接访问数据库</li><li>JDO（Java Data Object）技术</li><li><strong>第三方 O/R 工具</strong>，如Hibernate、MyBatis等</li></ul><p>（2）JDBC 是 Java 访问数据库的基石，JDO、Hibernate、MyBatis 等只是更好地封装了 JDBC</p><h2 id="_3-jdbc-介绍" tabindex="-1"><a class="header-anchor" href="#_3-jdbc-介绍" aria-hidden="true">#</a> 3. JDBC 介绍</h2><p>（1）JDBC（Java Database Connectivity）是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口(一组 API)</strong>，定义了用来访问数据库的标准 Java 类库，（java.sql、javax.sql）使用这些类库可以以一种标准的方法、方便地访问数据库资源。</p><p>（2）JDBC 为访问不同的数据库提供了一种 <strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</p><p>（3）JDBC 的目标是使 Java 程序员使用 JDBC 可以连接任何<strong>提供了 JDBC 驱动程序</strong>的数据库系统，这样使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p><p>（4）如果没有 JDBC，那么 Java 程序员访问数据库时是这样的（<strong>我们认为的连接</strong>）：</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210914151858981.png" alt="image-20210914151858981" tabindex="0" loading="lazy"><figcaption>image-20210914151858981</figcaption></figure><p>有了JDBC，Java 访问数据库时是这样的（<strong>真实的连接</strong>）：</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210914151952350.png" alt="image-20210914151952350" tabindex="0" loading="lazy"><figcaption>image-20210914151952350</figcaption></figure><p>总结如下：</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210914152113472.png" alt="image-20210914152113472" tabindex="0" loading="lazy"><figcaption>image-20210914152113472</figcaption></figure><h2 id="_4-jdbc-体系结构" tabindex="-1"><a class="header-anchor" href="#_4-jdbc-体系结构" aria-hidden="true">#</a> 4. JDBC 体系结构</h2><blockquote><p>JDBC 是 sun 公司提供的一套用于数据库操作的接口，java 程序员只需要面向这套接口编程即可。</p><p>不同的数据库厂商，需要针对这套接口，提供不同的实现。不同的实现的集合，即为不同数据库的驱动。</p><p>------------面向接口编程</p></blockquote><p><strong>JDBC 接口（API）包括两个层次</strong></p><p>①<strong>面向应用的 API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获取结果）</p><p>②<strong>面向数据的 API</strong>：Java Driver，供开发商开发数据库驱动程序使用</p><h2 id="_5-jdbc-程序编写步骤" tabindex="-1"><a class="header-anchor" href="#_5-jdbc-程序编写步骤" aria-hidden="true">#</a> 5. JDBC 程序编写步骤</h2><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/mysql/image-20210914152409717.png" alt="image-20210914152409717" tabindex="0" loading="lazy"><figcaption>image-20210914152409717</figcaption></figure><blockquote><p><strong>补充</strong>：ODBC(Open Database Connectivity，开放式数据库连接)，是微软在 Windows 平台下推出的。使用者在程序中只需要调用 ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote>',26),o=[s];function g(r,c){return e(),i("div",null,o)}const l=a(n,[["render",g],["__file","jdbc-1.html.vue"]]);export{l as default};
