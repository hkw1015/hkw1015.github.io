const e=JSON.parse('{"key":"v-381488f6","path":"/vue/chapter1/12-%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B%E6%80%BB%E7%BB%93.html","title":"数据监测总结","lang":"zh-CN","frontmatter":{"title":"数据监测总结","date":"2022-12-01T00:00:00.000Z","category":"Vue","tag":["Vue"],"description":"Vue监视数据的原理： vue 会监视 data 中所有层次的数据 如何监测中的数据？ 通过 setter 实现监视，且要在 new Vue 时就传入要监测的数据 （1）对象中后追加的属性，Vue 默认不做响应式处理 （2）如需给后添加的属性做响应式，请使用如下API： Vue.set(target，propertyName/index，value) 或者 vm.$set(target，propertyName/index，value) 如何监测中的数据？ 通过包裹数组更新元素的方法实现，本质就是做了两件事： （1）调用原生对应的方法对数组进行更新 （2）重新解析模板，进而更新页面 在 Vue 一定要用如下方法： （1）使用这些 API：push()、pop()、shift()、unshift()、splice()、sort()、reverse() （2）Vue.set() 或 vm.$set()","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/vue/chapter1/12-%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"数据监测总结"}],["meta",{"property":"og:description","content":"Vue监视数据的原理： vue 会监视 data 中所有层次的数据 如何监测中的数据？ 通过 setter 实现监视，且要在 new Vue 时就传入要监测的数据 （1）对象中后追加的属性，Vue 默认不做响应式处理 （2）如需给后添加的属性做响应式，请使用如下API： Vue.set(target，propertyName/index，value) 或者 vm.$set(target，propertyName/index，value) 如何监测中的数据？ 通过包裹数组更新元素的方法实现，本质就是做了两件事： （1）调用原生对应的方法对数组进行更新 （2）重新解析模板，进而更新页面 在 Vue 一定要用如下方法： （1）使用这些 API：push()、pop()、shift()、unshift()、splice()、sort()、reverse() （2）Vue.set() 或 vm.$set()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2022-12-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据监测总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-12-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"vue/chapter1/12-数据监测总结.md","localizedDate":"2022年12月1日","excerpt":"<p><strong>Vue监视数据的原理：</strong></p>\\n<ol>\\n<li>\\n<p>vue 会监视 data 中所有层次的数据</p>\\n</li>\\n<li>\\n<p>如何监测中的数据？</p>\\n<p>通过 setter 实现监视，且要在 new Vue 时就传入要监测的数据</p>\\n<p>（1）对象中后追加的属性，Vue 默认不做响应式处理</p>\\n<p>（2）如需给后添加的属性做响应式，请使用如下API：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code>Vue<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>target，propertyName<span class=\\"token operator\\">/</span>index，value<span class=\\"token punctuation\\">)</span> \\n或者\\nvm<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">$set</span><span class=\\"token punctuation\\">(</span>target，propertyName<span class=\\"token operator\\">/</span>index，value<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>如何监测中的数据？</p>\\n<p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p>\\n<p>（1）调用原生对应的方法对数组进行更新</p>\\n<p>（2）重新解析模板，进而更新页面</p>\\n</li>\\n<li>\\n<p>在 Vue 一定要用如下方法：</p>\\n<p>（1）使用这些 API：<code>push()、pop()、shift()、unshift()、splice()、sort()、reverse()</code></p>\\n<p>（2）<code>Vue.set()</code> 或 <code>vm.$set()</code></p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
