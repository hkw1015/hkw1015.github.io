import{_ as i,E as o,Z as r,$ as l,a0 as n,a1 as e,a3 as t,a5 as a}from"./framework-1fb77053.js";const p={},c=a(`<h2 id="_1-profile-功能" tabindex="-1"><a class="header-anchor" href="#_1-profile-功能" aria-hidden="true">#</a> 1. Profile 功能</h2><p>为了方便<code>多环境适配</code>，<code>SpringBoot </code>简化了 profile 功能</p><h3 id="_1-1-application-profile-功能" tabindex="-1"><a class="header-anchor" href="#_1-1-application-profile-功能" aria-hidden="true">#</a> 1.1 application-profile 功能</h3><ul><li>默认配置文件 application.yaml 任何时候都会加载</li><li>指定环境配置文件 application-{env}.yaml</li><li>激活指定环境 <ul><li>配置文件激活</li><li>命令行：java -jar xxx.jar <strong><code>--spring.profiles.active=prod --person.name=haha</code></strong><ul><li><strong>修改配置文件的任意值，<code>命令行优先</code></strong></li></ul></li></ul></li><li>默认配置与环境配置同时生效</li><li>同名配置项，profile 配置优先</li></ul><h3 id="_1-2-profile-条件装配功能" tabindex="-1"><a class="header-anchor" href="#_1-2-profile-条件装配功能" aria-hidden="true">#</a> 1.2 @Profile 条件装配功能</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">&quot;production&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductionConfiguration</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-profile-分组" tabindex="-1"><a class="header-anchor" href="#_1-3-profile-分组" aria-hidden="true">#</a> 1.3 profile 分组</h3><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.profiles.group.production[0]</span><span class="token punctuation">=</span><span class="token value attr-value">proddb</span>
<span class="token key attr-name">spring.profiles.group.production[1]</span><span class="token punctuation">=</span><span class="token value attr-value">prodmq</span>

<span class="token key attr-name">使用：--spring.profiles.active</span><span class="token punctuation">=</span><span class="token value attr-value">production  激活</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-外部化配置" tabindex="-1"><a class="header-anchor" href="#_2-外部化配置" aria-hidden="true">#</a> 2. 外部化配置</h2>`,9),d={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config",target:"_blank",rel:"noopener noreferrer"},u=a("<li>Default properties (specified by setting <code>SpringApplication.setDefaultProperties</code>).</li><li><code>@PropertySource</code> annotations on your <code>@Configuration</code> classes. Please note that such property sources are not added to the <code>Environment</code> until the application context is being refreshed. This is too late to configure certain properties such as <code>logging.*</code> and <code>spring.main.*</code> which are read before refresh begins.</li><li><strong>Config data (such as</strong> <code>**application.properties**</code> <strong>files)</strong></li><li>A <code>RandomValuePropertySource</code> that has properties only in <code>random.*</code>.</li><li>OS environment variables.</li><li>Java System properties (<code>System.getProperties()</code>).</li><li>JNDI attributes from <code>java:comp/env</code>.</li><li><code>ServletContext</code> init parameters.</li><li><code>ServletConfig</code> init parameters.</li><li>Properties from <code>SPRING_APPLICATION_JSON</code> (inline JSON embedded in an environment variable or system property).</li><li>Command line arguments.</li>",11),g=n("code",null,"properties",-1),h=n("code",null,"@SpringBootTest",-1),m={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("code",null,"@TestPropertySource"),e(" annotations on your tests.")],-1),f={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-devtools-globalsettings",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"$HOME/.config/spring-boot",-1),k=a('<h3 id="_2-1-外部配置源" tabindex="-1"><a class="header-anchor" href="#_2-1-外部配置源" aria-hidden="true">#</a> 2.1 外部配置源</h3><p>常用：<strong>Java属性文件</strong>、<strong>YAML文件</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>；</p><h3 id="_2-2-配置文件查找位置" tabindex="-1"><a class="header-anchor" href="#_2-2-配置文件查找位置" aria-hidden="true">#</a> 2.2 配置文件查找位置</h3><p>（1）classpath 根路径</p><p>（2）classpath 根路径下 config 目录</p><p>（3）jar 包当前目录</p><p>（4）jar 包当前目录的 config 目录</p><p>（5）/config 子目录的直接子目录</p><h3 id="_2-3-配置文件加载顺序" tabindex="-1"><a class="header-anchor" href="#_2-3-配置文件加载顺序" aria-hidden="true">#</a> 2.3 <code>配置文件加载顺序</code></h3><ol><li>当前 jar 包内部的 application.properties 和 application.yml</li><li>当前 jar 包内部的 application-{profile}.properties 和 application-{profile}.yml</li><li>引用的外部 jar 包的 application.properties 和 application.yml</li><li>引用的外部 jar 包的 application-{profile}.properties 和 application-{profile}.yml</li></ol><h3 id="_2-4-指定环境优先-外部优先-后面的可以覆盖前面的同名配置项" tabindex="-1"><a class="header-anchor" href="#_2-4-指定环境优先-外部优先-后面的可以覆盖前面的同名配置项" aria-hidden="true">#</a> 2.4 指定环境优先，外部优先，后面的可以覆盖前面的同名配置项</h3><h2 id="_3-自定义-starter" tabindex="-1"><a class="header-anchor" href="#_3-自定义-starter" aria-hidden="true">#</a> 3. 自定义 starter</h2><h3 id="_3-1-starter-启动原理" tabindex="-1"><a class="header-anchor" href="#_3-1-starter-启动原理" aria-hidden="true">#</a> 3.1 starter 启动原理</h3><ul><li><p>starter-pom 引入 autoconfiguration 包</p><figure><img src="https://pet-hkw.oss-cn-shenzhen.aliyuncs.com/image/new_blog_system/framework/image-20210908145220853.png" alt="image-20210908145220853" tabindex="0" loading="lazy"><figcaption>image-20210908145220853</figcaption></figure></li><li><p>autoconfigure 包中配置使用 <strong><span style="color:red;">META-INF/spring.factories</span></strong> 中 <strong>EnableAutoConfiguration 的值，使得项目启动加载指定的自动配置类</strong></p></li><li><p>编写自动配置类 xxxAutoConfiguration -&gt; xxxProperties</p><ul><li>@Configuration</li><li>@Conditional</li><li>@EnableConfigurationProperties</li><li>@Bean</li><li>......</li></ul></li></ul><p><strong><span style="color:red;">引入 starter</span> --- <span style="color:blue;">xxxAutoConfiguration --- 容器中放入组件 --- 绑定 xxxProperties</span> --- <span style="color:red;">配置项</span></strong></p><h3 id="_3-2-自定义-starter" tabindex="-1"><a class="header-anchor" href="#_3-2-自定义-starter" aria-hidden="true">#</a> 3.2 自定义 starter</h3><p><strong>xxx-spring-boot-starter（启动器）</strong></p><p><strong>xxx-spring-boot-starter-autoconfigure（自动配置包）</strong></p><h2 id="_4-springboot-原理" tabindex="-1"><a class="header-anchor" href="#_4-springboot-原理" aria-hidden="true">#</a> 4. SpringBoot 原理</h2>',19),_={href:"https://www.bilibili.com/video/BV1gW411W7wy?p=1",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,"SpringMVC",-1),y=n("strong",null,"自动配置原理",-1),C=a('<h3 id="_4-1-springboot-启动过程" tabindex="-1"><a class="header-anchor" href="#_4-1-springboot-启动过程" aria-hidden="true">#</a> 4.1 SpringBoot 启动过程</h3><ul><li><p>创建 <strong>SpringApplication</strong></p><ul><li>保存一些信息。</li><li>判定当前应用的类型（ClassUtils、Servlet）。</li><li><strong><span style="color:red;">Bootstrappers</span></strong>：初始启动引导器：去 spring.factories 文件中找 org.springframework.boot.<strong>Bootstrapper</strong></li><li><strong>找 <span style="color:red;">ApplicationContextInitializer</span></strong>：去 <strong>spring.factories</strong> 找 <strong>ApplicationContextInitializer</strong><ul><li>List&lt;ApplicationContextInitializer&lt;?&gt;&gt; <strong>initializers</strong></li></ul></li><li>**找 <span style="color:red;">ApplicationListener 应用监听器</span>：**去 <strong>spring.factories</strong> 找 <strong>ApplicationListener</strong><ul><li>List&lt;ApplicationListener&lt;?&gt;&gt; <strong>listeners</strong></li></ul></li></ul></li><li><p>运行 <strong>SpringApplication</strong></p><ul><li><strong>StopWatch</strong></li><li><strong>记录应用的启动时间</strong></li><li><strong>创建引导上下文（Context环境）</strong> --- createBootstrapContext() <ul><li>获取到所有之前的 <strong><span style="color:red;">Bootstrappers 挨个执行</span></strong> intitialize() 来完成对引导启动器上下文环境设置</li></ul></li><li>让当前应用进入 <strong>headless</strong> 模式（<strong>java.awt.headless</strong>）</li><li><strong>获取所有</strong> <strong><span style="color:red;">RunListener</span></strong>（运行监听器）【为了方便所有 Listener 进行事件感知】</li><li>getSpringFactoriesInstances 去 <strong>spring.factories</strong> 找 <strong><span style="color:red;">SpringApplicationRunListener</span></strong>.</li><li>遍历 <strong><span style="color:red;">SpringApplicationRunListener 调用 starting 方法</span></strong><ul><li><strong>相当于通知所有感兴趣系统正在启动过程的人，项目正在 starting。</strong></li></ul></li><li>保存命令行参数，ApplicationArguments</li><li>准备环境 prepareEnvironment(); <ul><li>返回或者创建基础环境信息对象，<strong>StandardServletEnvironment</strong></li><li><strong>配置环境信息对象</strong><ul><li><strong>读取所有的配置源的配置属性值</strong></li></ul></li><li>绑定环境信息</li><li>监听器调用 listener.environmentPrepared()：通知所有的监听器当前环境准备完成</li></ul></li><li>创建IOC容器（createApplicationContext()） <ul><li>根据项目类型（Servlet）创建容器</li><li>当前会创建 <strong>AnnotationConfigServletWebServerApplicationContext</strong></li></ul></li><li><strong>准备 ApplicationContext IOC 容器的基本信息</strong> <strong>prepareContext()</strong><ul><li>保存环境信息</li><li>IOC 容器的后置处理流程</li><li>应用初始化器，applyInitializers <ul><li>遍历所有的 <strong><span style="color:red;">ApplicationContextInitializer ，调用 initialize</span>，来对 IOC 容器进行初始化扩展功能</strong></li><li>遍历所有的 listener 调用 <strong>contextPrepared（EventPublishRunListenr 通知所有的监听器 contextPrepared）</strong></li></ul></li><li><strong>所有的监听器 调用</strong> <strong>contextLoaded（通知所有的监听器</strong> <strong>contextLoaded</strong>）</li></ul></li><li><strong>刷新IOC容器</strong> --- refreshContext <ul><li>创建容器中的所有组件（Spring 注解）</li></ul></li><li>容器刷新完成后工作？afterRefresh</li><li>所有监听器调用 listeners.<strong>started</strong>(context); <strong>通知所有的监听器</strong> <strong>started</strong></li><li><strong>调用所有runners；callRunners()</strong><ul><li><strong>获取容器中的</strong> <strong>ApplicationRunner</strong></li><li><strong>获取容器中的</strong> <strong>CommandLineRunner</strong></li><li><strong>合并所有 runner 并且按照 @Order 进行排序</strong></li><li><strong>遍历所有的 runner，调用 run</strong> <strong>方法</strong></li></ul></li><li><strong>如果以上有异常</strong><ul><li><strong>调用 Listener 的 failed</strong></li></ul></li><li><strong>调用所有监听器的 running 方法</strong> listeners.running(context); <strong>通知所有的监听器</strong> <strong>running</strong></li><li><strong>running 如果有问题，继续通知 failed 。调用所有 Listener 的 failed；通知所有的监听器 failed</strong></li></ul></li></ul><h3 id="_4-2-application-events-and-listeners" tabindex="-1"><a class="header-anchor" href="#_4-2-application-events-and-listeners" aria-hidden="true">#</a> 4.2 Application Events and Listeners</h3>',3),A={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners",target:"_blank",rel:"noopener noreferrer"},S=a(`<p><strong>ApplicationContextInitializer</strong></p><p><strong>ApplicationListener</strong></p><p><strong>SpringApplicationRunListener</strong></p><h3 id="_4-3-applicationrunner-与-commandlinerunner" tabindex="-1"><a class="header-anchor" href="#_4-3-applicationrunner-与-commandlinerunner" aria-hidden="true">#</a> 4.3 ApplicationRunner 与 CommandLineRunner</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Callback used to run the bean.
	 * <span class="token keyword">@param</span> <span class="token parameter">args</span> incoming application arguments
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> on error
	 */</span>
	<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Callback used to run the bean.
	 * <span class="token keyword">@param</span> <span class="token parameter">args</span> incoming main method arguments
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span> on error
	 */</span>
	<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function w(L,I){const s=o("ExternalLinkIcon");return r(),l("div",null,[c,n("p",null,[n("a",d,[e("https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config"),t(s)])]),n("ol",null,[u,n("li",null,[g,e(" attribute on your tests. Available on "),h,e(" and the "),n("a",m,[e("test annotations for testing a particular slice of your application"),t(s)]),e(".")]),v,n("li",null,[n("a",f,[e("Devtools global settings properties"),t(s)]),e(" in the "),b,e(" directory when devtools is active.")])]),k,n("p",null,[e("Spring原理【"),n("a",_,[e("Spring注解"),t(s)]),e("】、"),x,e("原理、"),y,e("、SpringBoot 原理")]),C,n("p",null,[n("a",A,[e("https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners"),t(s)])]),S])}const j=i(p,[["render",w],["__file","springboot2-core-6.html.vue"]]);export{j as default};
