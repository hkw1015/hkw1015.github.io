import{_ as n,Z as s,$ as a,a5 as e}from"./framework-1fb77053.js";const p={},t=e(`<h2 id="_1-标识符的使用" tabindex="-1"><a class="header-anchor" href="#_1-标识符的使用" aria-hidden="true">#</a> 1. 标识符的使用</h2><ul><li><p><strong>规则</strong></p><p>（1）由26个英文字母大小写，0-9，_或$组成；</p><p>（2）数字不可以开头；</p><p>（3）不可以使用关键字和保留字，但能包含关键字和保留字；</p><p>（4）Java中严格区分大小写，长度无限制；</p><p>（5）标识符不能包含空格。</p></li><li><p><strong>规范</strong></p><p>（1）包名：多单词组成时字母都是小写：xxxyyyzzz；</p><p>（2）类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz；</p><p>（3）变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz；</p><p>（4）常量名：所有字母大写，多单词组成时，单词之间用_连接：XXX_YYY_ZZZ。</p></li><li><p><strong>注意</strong></p><p>在起名字时，为了提高阅读性，要尽量“见名知意”。</p></li></ul><h2 id="_2-变量的使用-重点" tabindex="-1"><a class="header-anchor" href="#_2-变量的使用-重点" aria-hidden="true">#</a> 2. 变量的使用（重点）</h2><ul><li><p><strong>变量的分类</strong></p><p>（1）按数据类型分</p><p>​ ①基本数据类型： <span style="color:red;"><strong>byte、short、int、long、float、double、char、boolean</strong></span></p><p>​ ②引用数据类型：类（字符串在这里）、接口、数组</p><p>（2）按声明的位置分（了解）</p><p>​ ①在方法体外，类体内声明的变量称为成员变量</p><p>​ ②在方法体内部声明的变量称为局部变量</p></li><li><p><strong>变量类型转换</strong></p><p>（1）涉及到的基本数据类型</p><p>​ ①整型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>1<span class="token punctuation">&gt;</span></span> <span class="token keyword">byte</span>（<span class="token number">1</span>字节，<span class="token number">8</span>bit，<span class="token operator">-</span><span class="token number">128</span> <span class="token operator">~</span> <span class="token number">127</span>）<span class="token keyword">short</span>（<span class="token number">2</span>字节）<span class="token keyword">int</span>（<span class="token number">4</span>字节）<span class="token keyword">long</span>（<span class="token number">8</span>字节）；
<span class="token generics"><span class="token punctuation">&lt;</span>2<span class="token punctuation">&gt;</span></span> 通常情况下，我们习惯将整型定义为<span class="token keyword">int</span>型；
<span class="token generics"><span class="token punctuation">&lt;</span>3<span class="token punctuation">&gt;</span></span> 定义<span class="token keyword">long</span>型变量时，必须以“l”或“<span class="token class-name">L</span>”结尾；
<span class="token generics"><span class="token punctuation">&lt;</span>4<span class="token punctuation">&gt;</span></span> 整型的常量，默认为<span class="token keyword">int</span>型。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ ②浮点型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>1<span class="token punctuation">&gt;</span></span> <span class="token keyword">float</span>（<span class="token number">4</span>字节）<span class="token keyword">double</span>（<span class="token number">8</span>字节）；
<span class="token generics"><span class="token punctuation">&lt;</span>2<span class="token punctuation">&gt;</span></span> <span class="token keyword">float</span>表示的数值的范围要大于<span class="token keyword">long</span>表示的数值的范围；
<span class="token generics"><span class="token punctuation">&lt;</span>3<span class="token punctuation">&gt;</span></span> 通常情况下，我们习惯将浮点型定义为<span class="token keyword">double</span>型；
<span class="token generics"><span class="token punctuation">&lt;</span>4<span class="token punctuation">&gt;</span></span> 浮点型的常量，默认为<span class="token keyword">double</span>型。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ ③字符型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>1<span class="token punctuation">&gt;</span></span> <span class="token keyword">char</span>（<span class="token number">2</span>字节）；
<span class="token generics"><span class="token punctuation">&lt;</span>2<span class="token punctuation">&gt;</span></span> 通常情况下，字符型使用一对&#39;&#39;；
<span class="token generics"><span class="token punctuation">&lt;</span>3<span class="token punctuation">&gt;</span></span> 还有一种常见的赋值方式：<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">65</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ ④布尔型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>1<span class="token punctuation">&gt;</span></span> 只能有两种取值：<span class="token boolean">true</span>或<span class="token boolean">false</span>
<span class="token generics"><span class="token punctuation">&lt;</span>2<span class="token punctuation">&gt;</span></span> 不能赋值为<span class="token keyword">null</span>等；
<span class="token generics"><span class="token punctuation">&lt;</span>3<span class="token punctuation">&gt;</span></span> 常使用在流程控制语句中：条件判断、循环中
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于 boolean 占几个字节，网上众说纷纭。虽然 boolean 表现出非 0 即 1 的 &quot;位&quot; 特性，但是存储空间的基本计量单位是字节，不是位，所以 boolean 至少占 1 个字节。JVM 规范中，boolean 变量当作 int 处理，也就是 <strong>4 字节</strong>；而 boolean 数组当作 byte 数组处理，即 boolean 数组里的每个元素占 <strong>1 个字节</strong>。</p></blockquote><p>（2）自动类型转换（只涉及7种基本数据类型，除去了boolean）</p><p>​ 规律：byte、short、char ---&gt; int ---&gt; long ---&gt; float ---&gt; double；</p><p>​ 特别的：如果是byte、short、char之间做运算，结果都为int；</p><p>​ <strong>说明：此时所指的容量，是指数据类型表示的数的范围的大小，而非内存存储空间的大小。</strong></p><p>（3）强制类型转换</p><p>​ 适用场景：将容量大的数据类型的变量，转换为容量小的数据类型的变量，需使用强制转换符()。</p><p>​ 说明：①强制类型转换，看做是自动类型提升的逆过程；②使用强制类型转换可能出现的的问题 --- 精度损失。</p></li></ul><p>​ （4）String与8种基本数据类型间的运算</p><ul><li>​ ①String属于引用数据类型中的类；</li><li>​ ②String类型的变量，使用一对””；</li><li>​ ③String可以与8种基本数据类型做运算，但只能使用连接运算符：+做连接运算；</li><li>​ ④运算结果，仍然是String类型。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>举例：
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token number">123</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span><span class="token comment">// int --&gt; String</span>
<span class="token class-name">Int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// String --&gt; int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-运算符" tabindex="-1"><a class="header-anchor" href="#_3-运算符" aria-hidden="true">#</a> 3. 运算符</h2><ul><li>算术运算符</li></ul><p>+ - + - * / % (前)++ (后)++ (前)-- (后)-- + (连接运算符，只适用于String 和其他类型间)</p><p>强调：后++/后--的过程分析</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>举例：
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果：10。</span>
<span class="token comment">// 过程分析：①a++整体 = 10；②a = 11；③a++这个整体赋值给a --&gt; a = 10；（赋值在最后一步）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>赋值运算符</li></ul><p>= += -= *= /=</p><ul><li>比较运算符（关系运算符）</li></ul><p>== != &gt; &lt; &gt;= &lt;= instanceof</p><p>说明：比较运算符计算的结果都为boolean型。</p><ul><li>逻辑运算符</li></ul><p>&amp;（且） &amp;&amp; |（或） || !（非） ^（异或）</p><ul><li>位运算符</li></ul><p>&lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; ^ |</p><p><strong>面试题：你能否写出最高效的2*8的实现方式？答案：2&lt;&lt;3 或 8&lt;&lt;1</strong></p><p>特别说明：</p><p>&lt;&lt;:在一定范围内，每左移一位，相当于原有的数值*2；</p><p>&gt;&gt;:在一定范围内，每右移一位，相当于原有的数值/2；</p><p>&gt;&gt;&gt;:右移以后，最高位不管是正数还是负数，都拿0补。</p><ul><li>三元运算符</li></ul><p>格式：（条件表达式）？表达式1 : 表达式2</p><p>说明：要求 表达式1 和 表达式2 的数据类型保持统一</p><h2 id="_4-流程控制" tabindex="-1"><a class="header-anchor" href="#_4-流程控制" aria-hidden="true">#</a> 4. 流程控制</h2><ul><li>顺序结构：程序从上到下执行</li><li>分支结构：if...else、switch...case</li><li>循环结构：for、while、do...while</li></ul>`,31),l=[t];function o(c,i){return s(),a("div",null,l)}const u=n(p,[["render",o],["__file","basic-grammar.html.vue"]]);export{u as default};
