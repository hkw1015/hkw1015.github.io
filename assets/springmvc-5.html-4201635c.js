const e=JSON.parse('{"key":"v-6b40cfab","path":"/java/framework/springmvc/springmvc-5.html","title":"注解配置 SpringMVC","lang":"zh-CN","frontmatter":{"title":"注解配置 SpringMVC","date":"2021-09-08T00:00:00.000Z","category":"常用框架","tag":["SpringMVC"],"description":"1. 注解配置SpringMVC 使用配置类和注解代替 web.xml 和 SpringMVC 配置文件的功能 1.1 创建初始化类，代替 web.xml 在 Servlet 3.0 环境中，容器会在类路径中查找实现 javax.servlet.ServletContainerInitializer 接口的类，如果找到的话就用它来配置 Servlet 容器。 Spring 提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer 的类并将配置的任务交给它们来完成。Spring 3.2 引入了一个便利的 WebApplicationInitializer 基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer 并将其部署到 Servlet3.0 容器的时候，容器会自动发现它，并用它来配置 Servlet 上下文。","head":[["meta",{"property":"og:url","content":"http://www.hl1015.com/java/framework/springmvc/springmvc-5.html"}],["meta",{"property":"og:site_name","content":"程序员H"}],["meta",{"property":"og:title","content":"注解配置 SpringMVC"}],["meta",{"property":"og:description","content":"1. 注解配置SpringMVC 使用配置类和注解代替 web.xml 和 SpringMVC 配置文件的功能 1.1 创建初始化类，代替 web.xml 在 Servlet 3.0 环境中，容器会在类路径中查找实现 javax.servlet.ServletContainerInitializer 接口的类，如果找到的话就用它来配置 Servlet 容器。 Spring 提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer 的类并将配置的任务交给它们来完成。Spring 3.2 引入了一个便利的 WebApplicationInitializer 基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer 并将其部署到 Servlet3.0 容器的时候，容器会自动发现它，并用它来配置 Servlet 上下文。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T09:01:25.000Z"}],["meta",{"property":"article:author","content":"程序员H"}],["meta",{"property":"article:tag","content":"SpringMVC"}],["meta",{"property":"article:published_time","content":"2021-09-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-17T09:01:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解配置 SpringMVC\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-09-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-17T09:01:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"程序员H\\",\\"url\\":\\"http://www.hl1015.com/\\"}]}"]]},"headers":[{"level":2,"title":"1. 注解配置SpringMVC","slug":"_1-注解配置springmvc","link":"#_1-注解配置springmvc","children":[{"level":3,"title":"1.1 创建初始化类，代替 web.xml","slug":"_1-1-创建初始化类-代替-web-xml","link":"#_1-1-创建初始化类-代替-web-xml","children":[]},{"level":3,"title":"1.2 创建 SpringConfig 配置类，代替 spring 的配置文件","slug":"_1-2-创建-springconfig-配置类-代替-spring-的配置文件","link":"#_1-2-创建-springconfig-配置类-代替-spring-的配置文件","children":[]},{"level":3,"title":"1.3 创建 WebConfig 配置类，代替 SpringMVC 的配置文件","slug":"_1-3-创建-webconfig-配置类-代替-springmvc-的配置文件","link":"#_1-3-创建-webconfig-配置类-代替-springmvc-的配置文件","children":[]},{"level":3,"title":"1.4 测试功能","slug":"_1-4-测试功能","link":"#_1-4-测试功能","children":[]}]}],"git":{"createdTime":1684314085000,"updatedTime":1684314085000,"contributors":[{"name":"hkw","email":"hkw1015@163.com","commits":1}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"java/framework/springmvc/springmvc-5.md","localizedDate":"2021年9月8日","excerpt":"<h2> 1. 注解配置SpringMVC</h2>\\n<p>使用配置类和注解代替 web.xml 和 SpringMVC 配置文件的功能</p>\\n<h3> 1.1 创建初始化类，代替 web.xml</h3>\\n<p>在 Servlet 3.0 环境中，容器会在类路径中查找实现 javax.servlet.ServletContainerInitializer 接口的类，如果找到的话就用它来配置 Servlet 容器。\\nSpring 提供了这个接口的实现，名为 SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer 的类并将配置的任务交给它们来完成。Spring 3.2 引入了一个便利的 WebApplicationInitializer 基础实现，名为 AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了 AbstractAnnotationConfigDispatcherServletInitializer 并将其部署到 Servlet3.0 容器的时候，容器会自动发现它，并用它来配置 Servlet 上下文。</p>","autoDesc":true}');export{e as data};
