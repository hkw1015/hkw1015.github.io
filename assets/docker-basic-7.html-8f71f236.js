import{_ as t,E as s,Z as i,$ as l,a0 as e,a1 as a,a3 as r,a4 as o,a5 as c}from"./framework-1fb77053.js";const d={},p=e("h2",{id:"_1-🚽避坑点-使用容器数据卷记得加上-privileged-true",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-🚽避坑点-使用容器数据卷记得加上-privileged-true","aria-hidden":"true"},"#"),a(" 1. 🚽避坑点：使用容器数据卷记得加上 --privileged=true")],-1),u=e("strong",null,"理由",-1),_=c(`<p><strong>解决方法</strong>：在挂载目录后面多加一个 <strong><code>--privileged=true</code></strong> 参数即可</p><p>如果是 CentOS 7 安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在 SELinux 里面挂载目录被禁止掉了，如果要开启，我们一般使用 --privileged=true 参数，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container 内的 root 拥有真正的 root 权限，否则，container 内的 root 只是外部的一个普通用户权限</p><h2 id="_2-容器数据卷是什么" tabindex="-1"><a class="header-anchor" href="#_2-容器数据卷是什么" aria-hidden="true">#</a> 2. 容器数据卷是什么</h2><p>卷就是目录或文件，存在于一个或多个容器中，由 Docker 挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System 提供一些用于持续存储或共享数据的特性。卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此 Docker 不会在容器删除时删除其挂载的数据卷</p><p>一句话，容器数据卷有点类似我们 Redis 里面的 RDB 和 AOF 文件，它能够将 Dokcer 容器内的数据保存进宿主机的磁盘中，运行一个带有容器卷存储功能的容器实例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /宿主机绝对路径目录:/容器内目录 镜像名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-容器数据卷能干嘛" tabindex="-1"><a class="header-anchor" href="#_3-容器数据卷能干嘛" aria-hidden="true">#</a> 3. 容器数据卷能干嘛</h2>`,7),h=e("p",null,"Docker 容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了，为了能保存数据在 Docker 中我们就需要使用数据卷",-1),v=e("p",null,[e("strong",null,"特点：")],-1),m=e("ol",null,[e("li",null,"数据卷可在容器之间共享或重用数据"),e("li",null,"卷中的更改可以直接实时生效"),e("li",null,"数据卷中的更改不会包含在镜像的更新中"),e("li",null,"数据卷的生命周期一直持续到没有容器使用它为止")],-1);function g(k,f){const n=s("font");return i(),l("div",null,[p,e("p",null,[u,a("：Docker 挂载主机目录访问，如果出现 "),r(n,{color:"red"},{default:o(()=>[a("cannot open directory: Permission denied")]),_:1}),a("，说明权限不足")]),_,e("p",null,[a("将运用于运行的环境打包镜像，run 后形成容器实例运行，但是我们对数据的要求希望是"),r(n,{color:"red"},{default:o(()=>[a("持久化的")]),_:1})]),h,v,m])}const x=t(d,[["render",g],["__file","docker-basic-7.html.vue"]]);export{x as default};
